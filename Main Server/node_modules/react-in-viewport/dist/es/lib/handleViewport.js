"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _useInViewport = _interopRequireDefault(require("./useInViewport"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => {};

var isFunctionalComponent = Component => {
  return typeof Component === 'function' && !(Component.prototype && Component.prototype.render);
};

var isReactComponent = Component => {
  return Component.prototype && Component.prototype.isReactComponent;
};

function handleViewport(TargetComponent, options, config) {
  if (config === void 0) {
    config = {
      disconnectOnLeave: false
    };
  }

  var ForwardedRefComponent = (0, _react.forwardRef)((props, ref) => {
    var refProps = _objectSpread({
      forwardedRef: ref
    }, isReactComponent(TargetComponent) && !isFunctionalComponent(TargetComponent) ? {
      ref
    } : {});

    return _react.default.createElement(TargetComponent, _extends({}, props, refProps));
  });

  var InViewport = (_ref) => {
    var {
      onEnterViewport = noop,
      onLeaveViewport = noop
    } = _ref,
        restProps = _objectWithoutProperties(_ref, ["onEnterViewport", "onLeaveViewport"]);

    var node = (0, _react.useRef)();
    var {
      inViewport,
      enterCount,
      leaveCount
    } = (0, _useInViewport.default)(node, options, config, {
      onEnterViewport,
      onLeaveViewport
    });
    return _react.default.createElement(ForwardedRefComponent, _extends({}, restProps, {
      inViewport: inViewport,
      enterCount: enterCount,
      leaveCount: leaveCount,
      ref: node
    }));
  };

  var name = TargetComponent.displayName || TargetComponent.name || 'Component';
  InViewport.displayName = "handleViewport(" + name + ")";
  return (0, _hoistNonReactStatics.default)(InViewport, ForwardedRefComponent);
}

var _default = handleViewport;
exports.default = _default;