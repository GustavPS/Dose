{"ast":null,"code":"const hash = require('../auth/hash');\n\nconst db = require('../../../lib/db').default;\n\nexport default async function handle(req, res) {\n  res.setHeader('Access-Control-Allow-Origin', \"*\");\n  res.setHeader('Access-Control-Allow-Headers', \"*\");\n  let user = hash.decodeJWT(req.query.token); // Not authenticated\n\n  if (user === false) {\n    res.status(200).json({\n      status: 'error',\n      error: 'unauthorized',\n      servers: []\n    });\n    return;\n  }\n\n  let servers = await db.any('SELECT server_name, server_ip, server_id FROM server WHERE server_id IN (SELECT server_id FROM user_server WHERE user_id = $1)', [user.userId]);\n  res.status(200).json({\n    \"servers\": servers\n  });\n}","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/pages/api/servers/getServers.js"],"names":["hash","require","db","default","handle","req","res","setHeader","user","decodeJWT","query","token","status","json","error","servers","any","userId"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BE,OAAtC;;AAEA,eAAe,eAAeC,MAAf,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC3CA,EAAAA,GAAG,CAACC,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,GAA9C;AACA,MAAIC,IAAI,GAAGR,IAAI,CAACS,SAAL,CAAeJ,GAAG,CAACK,KAAJ,CAAUC,KAAzB,CAAX,CAH2C,CAK3C;;AACA,MAAIH,IAAI,KAAK,KAAb,EAAoB;AAChBF,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBD,MAAAA,MAAM,EAAE,OADS;AAEjBE,MAAAA,KAAK,EAAE,cAFU;AAGjBC,MAAAA,OAAO,EAAE;AAHQ,KAArB;AAKA;AACH;;AACD,MAAIA,OAAO,GAAG,MAAMb,EAAE,CAACc,GAAH,CAAO,gIAAP,EAAyI,CAACR,IAAI,CAACS,MAAN,CAAzI,CAApB;AACAX,EAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjB,eAAWE;AADM,GAArB;AAIH","sourcesContent":["const hash = require('../auth/hash');\r\nconst db = require('../../../lib/db').default;\r\n\r\nexport default async function handle(req, res) {\r\n    res.setHeader('Access-Control-Allow-Origin', \"*\");\r\n    res.setHeader('Access-Control-Allow-Headers', \"*\");\r\n    let user = hash.decodeJWT(req.query.token);\r\n\r\n    // Not authenticated\r\n    if (user === false) {\r\n        res.status(200).json({\r\n            status: 'error',\r\n            error: 'unauthorized',\r\n            servers: []\r\n        });\r\n        return;\r\n    }\r\n    let servers = await db.any('SELECT server_name, server_ip, server_id FROM server WHERE server_id IN (SELECT server_id FROM user_server WHERE user_id = $1)', [user.userId]);\r\n    res.status(200).json({\r\n        \"servers\": servers\r\n    });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}