{"ast":null,"code":"var _jsxFileName = \"/mnt/h/Code/Dose/Main Server/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport '../styles/global.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from 'next/router';\nimport App from 'next/app';\nimport Cookies from 'cookies';\nexport default function DoseApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }\n  }));\n}\n\nDoseApp.getInitialProps = async appContext => {\n  const cookies = new Cookies(appContext.ctx.req, appContext.ctx.res); // calls page's `getInitialProps` and fills `appProps.pageProps`\n\n  const appProps = await App.getInitialProps(appContext); // Allowed pages without auth\n\n  const noAuthPages = ['/login', '/_error'];\n\n  for (const noAuthPage of noAuthPages) {\n    if (appContext.ctx.pathname == noAuthPage) {\n      return _objectSpread({}, appProps);\n    }\n  } // Only runs server side\n\n\n  if (appContext.ctx.res) {\n    if (!tokenExist(appContext.ctx.req.cookies)) {\n      console.log(\"No token saved\");\n      return redirectToLogin(appContext.ctx.res);\n    }\n\n    let accessToken = appContext.ctx.req.cookies.token;\n    let refreshToken = appContext.ctx.req.cookies.refreshToken;\n    let validTo = appContext.ctx.req.cookies.validTo;\n    const currentTime = Date.now() / 1000;\n    const accessTokenValid = validTo - currentTime >= 60;\n    console.log(\"Access token valid: \" + accessTokenValid);\n\n    if (accessTokenValid) {\n      return _objectSpread({}, appProps);\n    } // If access token has expired or is about to expire\n\n\n    const req = await fetch(`http://localhost:${process.env.SERVER_PORT}${process.env.SERVER_SUB_FOLDER}/api/auth/refreshToken`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: accessToken,\n        refreshToken: refreshToken\n      })\n    });\n    const newTokenInfo = await req.json();\n\n    if (newTokenInfo.status === 'success') {\n      console.log(newTokenInfo);\n      saveTokenInfo(cookies, newTokenInfo.token, newTokenInfo.refreshToken, newTokenInfo.validTo);\n      console.log(\"Refreshed token\");\n      return _objectSpread({}, appProps);\n    } else {\n      clearTokenInfo(cookies);\n      console.log(\"Couldn't get new token\");\n      return redirectToLogin(appContext.ctx.res);\n    }\n  } else {\n    console.log(\"klient\");\n    return _objectSpread({}, appProps);\n  }\n};\n\nfunction tokenExist(cookies) {\n  let accessToken = cookies.token;\n  let refreshToken = cookies.refreshToken;\n  let validTo = cookies.validTo;\n  return accessToken != null && accessToken != undefined && refreshToken != null && refreshToken != undefined && validTo != null && validTo != undefined;\n}\n\nfunction redirectToLogin(res) {\n  res.writeHead(302, {\n    Location: `${process.env.SERVER_SUB_FOLDER}/login`\n  });\n  res.end();\n  return {};\n}\n\nfunction saveTokenInfo(cookies, accessToken, refreshToken, validTo) {\n  cookies.set('token', accessToken, {\n    httpOnly: false\n  });\n  cookies.set('refreshToken', refreshToken, {\n    httpOnly: false\n  });\n  cookies.set('validTo', validTo, {\n    httpOnly: false\n  });\n}\n\nfunction clearTokenInfo(cookies) {\n  cookies.set('token', null);\n  cookies.set('refreshToken', null);\n  cookies.set('validTo', null);\n}","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/pages/_app.js"],"names":["Router","App","Cookies","DoseApp","Component","pageProps","getInitialProps","appContext","cookies","ctx","req","res","appProps","noAuthPages","noAuthPage","pathname","tokenExist","console","log","redirectToLogin","accessToken","token","refreshToken","validTo","currentTime","Date","now","accessTokenValid","fetch","process","env","SERVER_PORT","SERVER_SUB_FOLDER","method","headers","body","JSON","stringify","newTokenInfo","json","status","saveTokenInfo","clearTokenInfo","undefined","writeHead","Location","end","set","httpOnly"],"mappings":"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","sourcesContent":["import '../styles/global.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Router from 'next/router';\r\nimport App from 'next/app';\r\nimport Cookies from 'cookies'\r\n\r\nexport default function DoseApp({ Component, pageProps }) {\r\n    return <Component {...pageProps} />\r\n}\r\n\r\nDoseApp.getInitialProps = async (appContext) => {\r\n    const cookies = new Cookies(appContext.ctx.req, appContext.ctx.res)\r\n    // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n    const appProps = await App.getInitialProps(appContext);\r\n \r\n    // Allowed pages without auth\r\n    const noAuthPages = ['/login', '/_error'];\r\n \r\n    for (const noAuthPage of noAuthPages) {\r\n        if (appContext.ctx.pathname == noAuthPage) {\r\n            return { ...appProps }\r\n        }\r\n    }\r\n\r\n    // Only runs server side\r\n   if (appContext.ctx.res) {\r\n        if (!tokenExist(appContext.ctx.req.cookies)) {\r\n            console.log(\"No token saved\");\r\n            return redirectToLogin(appContext.ctx.res);\r\n        }\r\n\r\n       let accessToken  = appContext.ctx.req.cookies.token;\r\n       let refreshToken = appContext.ctx.req.cookies.refreshToken;\r\n       let validTo      = appContext.ctx.req.cookies.validTo;\r\n\r\n       const currentTime      = Date.now() / 1000;\r\n       const accessTokenValid = (validTo - currentTime) >= 60;\r\n\r\n       console.log(\"Access token valid: \" + accessTokenValid);\r\n\r\n       if (accessTokenValid) {\r\n           return { ...appProps };\r\n       }\r\n\r\n       // If access token has expired or is about to expire\r\n       const req = await fetch(`http://localhost:${process.env.SERVER_PORT}${process.env.SERVER_SUB_FOLDER}/api/auth/refreshToken`, {\r\n           method: 'POST',\r\n           headers: {\r\n               'Content-Type': 'application/json'\r\n           },\r\n           body: JSON.stringify({\r\n               token: accessToken,\r\n               refreshToken: refreshToken\r\n           })\r\n       });\r\n\r\n       const newTokenInfo = await req.json();\r\n       if (newTokenInfo.status === 'success') {\r\n           console.log(newTokenInfo);\r\n           saveTokenInfo(cookies,\r\n                         newTokenInfo.token,\r\n                         newTokenInfo.refreshToken,\r\n                         newTokenInfo.validTo);\r\n           console.log(\"Refreshed token\");\r\n           return { ...appProps };\r\n       } else {\r\n           clearTokenInfo(cookies);\r\n           console.log(\"Couldn't get new token\");\r\n           return redirectToLogin(appContext.ctx.res);\r\n       }\r\n   } else {\r\n       console.log(\"klient\");\r\n       return { ...appProps }\r\n   }\r\n}\r\n\r\nfunction tokenExist(cookies) {\r\n    let accessToken  = cookies.token;\r\n    let refreshToken = cookies.refreshToken;\r\n    let validTo      = cookies.validTo;\r\n    return accessToken  != null  && accessToken != undefined &&\r\n           refreshToken != null && refreshToken != undefined &&\r\n           validTo      != null && validTo      != undefined;\r\n}\r\n\r\nfunction redirectToLogin(res) {\r\n    res.writeHead(302, { Location: `${process.env.SERVER_SUB_FOLDER}/login` });\r\n    res.end();\r\n    return {};\r\n}\r\n\r\nfunction saveTokenInfo(cookies, accessToken, refreshToken, validTo) {\r\n    cookies.set('token', accessToken, {\r\n        httpOnly: false\r\n    });\r\n    cookies.set('refreshToken', refreshToken, {\r\n        httpOnly: false\r\n    });\r\n    cookies.set('validTo', validTo, {\r\n        httpOnly: false\r\n    });\r\n}\r\n\r\nfunction clearTokenInfo(cookies) {\r\n    cookies.set('token', null);\r\n    cookies.set('refreshToken', null);\r\n    cookies.set('validTo', null);\r\n}"]},"metadata":{},"sourceType":"module"}