{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/mnt/h/Code/Dose/Main Server/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport '../styles/global.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from 'next/router';\nimport App from 'next/app';\nimport Cookies from 'cookies';\nexport default function DoseApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }\n  }));\n}\n_c = DoseApp;\n\nDoseApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var cookies, appProps, noAuthPages, _i, _noAuthPages, noAuthPage, accessToken, refreshToken, validTo, currentTime, accessTokenValid, req, newTokenInfo;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cookies = new Cookies(appContext.ctx.req, appContext.ctx.res); // calls page's `getInitialProps` and fills `appProps.pageProps`\n\n            _context.next = 3;\n            return App.getInitialProps(appContext);\n\n          case 3:\n            appProps = _context.sent;\n            // Allowed pages without auth\n            noAuthPages = ['/login', '/_error'];\n            _i = 0, _noAuthPages = noAuthPages;\n\n          case 6:\n            if (!(_i < _noAuthPages.length)) {\n              _context.next = 13;\n              break;\n            }\n\n            noAuthPage = _noAuthPages[_i];\n\n            if (!(appContext.ctx.pathname == noAuthPage)) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 10:\n            _i++;\n            _context.next = 6;\n            break;\n\n          case 13:\n            if (!appContext.ctx.res) {\n              _context.next = 43;\n              break;\n            }\n\n            if (tokenExist(appContext.ctx.req.cookies)) {\n              _context.next = 17;\n              break;\n            }\n\n            console.log(\"No token saved\");\n            return _context.abrupt(\"return\", redirectToLogin(appContext.ctx.res));\n\n          case 17:\n            accessToken = appContext.ctx.req.cookies.token;\n            refreshToken = appContext.ctx.req.cookies.refreshToken;\n            validTo = appContext.ctx.req.cookies.validTo;\n            currentTime = Date.now() / 1000;\n            accessTokenValid = validTo - currentTime >= 60;\n            console.log(\"Access token valid: \" + accessTokenValid);\n\n            if (!accessTokenValid) {\n              _context.next = 25;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 25:\n            _context.next = 27;\n            return fetch(\"http://localhost:\".concat(process.env.SERVER_PORT).concat(process.env.SERVER_SUB_FOLDER, \"/api/auth/refreshToken\"), {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                token: accessToken,\n                refreshToken: refreshToken\n              })\n            });\n\n          case 27:\n            req = _context.sent;\n            _context.next = 30;\n            return req.json();\n\n          case 30:\n            newTokenInfo = _context.sent;\n\n            if (!(newTokenInfo.status === 'success')) {\n              _context.next = 38;\n              break;\n            }\n\n            console.log(newTokenInfo);\n            saveTokenInfo(cookies, newTokenInfo.token, newTokenInfo.refreshToken, newTokenInfo.validTo);\n            console.log(\"Refreshed token\");\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 38:\n            clearTokenInfo(cookies);\n            console.log(\"Couldn't get new token\");\n            return _context.abrupt(\"return\", redirectToLogin(appContext.ctx.res));\n\n          case 41:\n            _context.next = 45;\n            break;\n\n          case 43:\n            console.log(\"klient\");\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction tokenExist(cookies) {\n  var accessToken = cookies.token;\n  var refreshToken = cookies.refreshToken;\n  var validTo = cookies.validTo;\n  return accessToken != null && accessToken != undefined && refreshToken != null && refreshToken != undefined && validTo != null && validTo != undefined;\n}\n\nfunction redirectToLogin(res) {\n  res.writeHead(302, {\n    Location: \"\".concat(process.env.SERVER_SUB_FOLDER, \"/login\")\n  });\n  res.end();\n  return {};\n}\n\nfunction saveTokenInfo(cookies, accessToken, refreshToken, validTo) {\n  cookies.set('token', accessToken, {\n    httpOnly: false\n  });\n  cookies.set('refreshToken', refreshToken, {\n    httpOnly: false\n  });\n  cookies.set('validTo', validTo, {\n    httpOnly: false\n  });\n}\n\nfunction clearTokenInfo(cookies) {\n  cookies.set('token', null);\n  cookies.set('refreshToken', null);\n  cookies.set('validTo', null);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DoseApp\");","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/pages/_app.js"],"names":["Router","App","Cookies","DoseApp","Component","pageProps","getInitialProps","appContext","cookies","ctx","req","res","appProps","noAuthPages","noAuthPage","pathname","tokenExist","console","log","redirectToLogin","accessToken","token","refreshToken","validTo","currentTime","Date","now","accessTokenValid","fetch","process","env","SERVER_PORT","SERVER_SUB_FOLDER","method","headers","body","JSON","stringify","json","newTokenInfo","status","saveTokenInfo","clearTokenInfo","undefined","writeHead","Location","end","set","httpOnly"],"mappings":"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","sourcesContent":["import '../styles/global.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Router from 'next/router';\r\nimport App from 'next/app';\r\nimport Cookies from 'cookies'\r\n\r\nexport default function DoseApp({ Component, pageProps }) {\r\n    return <Component {...pageProps} />\r\n}\r\n\r\nDoseApp.getInitialProps = async (appContext) => {\r\n    const cookies = new Cookies(appContext.ctx.req, appContext.ctx.res)\r\n    // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n    const appProps = await App.getInitialProps(appContext);\r\n \r\n    // Allowed pages without auth\r\n    const noAuthPages = ['/login', '/_error'];\r\n \r\n    for (const noAuthPage of noAuthPages) {\r\n        if (appContext.ctx.pathname == noAuthPage) {\r\n            return { ...appProps }\r\n        }\r\n    }\r\n\r\n    // Only runs server side\r\n   if (appContext.ctx.res) {\r\n        if (!tokenExist(appContext.ctx.req.cookies)) {\r\n            console.log(\"No token saved\");\r\n            return redirectToLogin(appContext.ctx.res);\r\n        }\r\n\r\n       let accessToken  = appContext.ctx.req.cookies.token;\r\n       let refreshToken = appContext.ctx.req.cookies.refreshToken;\r\n       let validTo      = appContext.ctx.req.cookies.validTo;\r\n\r\n       const currentTime      = Date.now() / 1000;\r\n       const accessTokenValid = (validTo - currentTime) >= 60;\r\n\r\n       console.log(\"Access token valid: \" + accessTokenValid);\r\n\r\n       if (accessTokenValid) {\r\n           return { ...appProps };\r\n       }\r\n\r\n       // If access token has expired or is about to expire\r\n       const req = await fetch(`http://localhost:${process.env.SERVER_PORT}${process.env.SERVER_SUB_FOLDER}/api/auth/refreshToken`, {\r\n           method: 'POST',\r\n           headers: {\r\n               'Content-Type': 'application/json'\r\n           },\r\n           body: JSON.stringify({\r\n               token: accessToken,\r\n               refreshToken: refreshToken\r\n           })\r\n       });\r\n\r\n       const newTokenInfo = await req.json();\r\n       if (newTokenInfo.status === 'success') {\r\n           console.log(newTokenInfo);\r\n           saveTokenInfo(cookies,\r\n                         newTokenInfo.token,\r\n                         newTokenInfo.refreshToken,\r\n                         newTokenInfo.validTo);\r\n           console.log(\"Refreshed token\");\r\n           return { ...appProps };\r\n       } else {\r\n           clearTokenInfo(cookies);\r\n           console.log(\"Couldn't get new token\");\r\n           return redirectToLogin(appContext.ctx.res);\r\n       }\r\n   } else {\r\n       console.log(\"klient\");\r\n       return { ...appProps }\r\n   }\r\n}\r\n\r\nfunction tokenExist(cookies) {\r\n    let accessToken  = cookies.token;\r\n    let refreshToken = cookies.refreshToken;\r\n    let validTo      = cookies.validTo;\r\n    return accessToken  != null  && accessToken != undefined &&\r\n           refreshToken != null && refreshToken != undefined &&\r\n           validTo      != null && validTo      != undefined;\r\n}\r\n\r\nfunction redirectToLogin(res) {\r\n    res.writeHead(302, { Location: `${process.env.SERVER_SUB_FOLDER}/login` });\r\n    res.end();\r\n    return {};\r\n}\r\n\r\nfunction saveTokenInfo(cookies, accessToken, refreshToken, validTo) {\r\n    cookies.set('token', accessToken, {\r\n        httpOnly: false\r\n    });\r\n    cookies.set('refreshToken', refreshToken, {\r\n        httpOnly: false\r\n    });\r\n    cookies.set('validTo', validTo, {\r\n        httpOnly: false\r\n    });\r\n}\r\n\r\nfunction clearTokenInfo(cookies) {\r\n    cookies.set('token', null);\r\n    cookies.set('refreshToken', null);\r\n    cookies.set('validTo', null);\r\n}"]},"metadata":{},"sourceType":"module"}