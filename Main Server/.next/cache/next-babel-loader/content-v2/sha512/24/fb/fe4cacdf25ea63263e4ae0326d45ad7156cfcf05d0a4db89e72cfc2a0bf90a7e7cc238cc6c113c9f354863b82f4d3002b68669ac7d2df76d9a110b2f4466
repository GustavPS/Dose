{"ast":null,"code":"var _jsxFileName = \"/mnt/h/Code/Dose/Main Server/pages/server/[server]/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../../components/layout';\nimport Head from 'next/head';\nimport fetch from 'node-fetch';\nimport cookie from 'js-cookie';\nimport Router from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Carousel, Container, Row, Col } from 'react-bootstrap';\nimport Link from 'next/link';\nimport validateServerAccess from '../../../lib/validateServerAccess';\nimport useWindowSize from '../../../components/hooks/WindowSize';\nimport Styles from '../../../styles/server.module.css';\nimport MovieBackdrop from '../../../components/movieBackdrop';\nimport EpisodePoster from '../../../components/episodePoster';\nimport socketIOClient from \"socket.io-client\";\nimport { useTransition, animated } from 'react-spring';\n\nconst fetcher = url => fetch(url).then(r => {\n  return r.json().then(result => {\n    return result;\n  });\n});\n\nconst main = props => {\n  // props.server is from the SSR under this function\n  let server = props.server;\n  const {\n    0: latestMovies,\n    1: setLatesMovies\n  } = useState(null);\n  const {\n    0: ongoingMovies,\n    1: setOngoingMovies\n  } = useState([]);\n  const {\n    0: movieWatchList,\n    1: setMovieWatchList\n  } = useState([]);\n  const {\n    0: ongoingShows,\n    1: setOngoingShows\n  } = useState([]);\n  const {\n    0: newlyAddedMovies,\n    1: setNewlyAddedMovies\n  } = useState([]);\n  const {\n    0: newlyAddedShows,\n    1: setNewlyAddedShows\n  } = useState([]);\n  const {\n    0: newlyAddedEpisodes,\n    1: setNewlyAddedEpisodes\n  } = useState([]);\n  const {\n    0: recommendedMovie,\n    1: setRecommendedMovie\n  } = useState(false);\n  const {\n    0: popularMovies,\n    1: setPopularMovies\n  } = useState([]);\n  let loading = 0;\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const transitions = useTransition(newlyAddedMovies, {\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    delay: 200,\n    onRest: () => setItems([])\n  });\n  const windowSize = useWindowSize();\n  let allContent = [];\n  /**\r\n   * Makes a query to the current active server for a list of movies\r\n   * \r\n   * @param {string} genre \r\n   * @param {string} orderby \r\n   * @param {int} limit \r\n   */\n\n  const getMovieList = async (genre = null, orderby = null, limit = 20, ongoing = false, watchlist = false, popular = false) => {\n    return new Promise((resolve, reject) => {\n      let url;\n\n      if (ongoing) {\n        url = `${server.server_ip}/api/movies/list/ongoing?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      } else if (watchlist) {\n        url = `${server.server_ip}/api/movies/list/watchlist?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      } else if (popular) {\n        url = `${server.server_ip}/api/movies/list/popular?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      } else {\n        url = `${server.server_ip}/api/movies/list${genre !== null ? '/genre/' + genre : ''}?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      }\n\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          limit: 20\n        })\n      }).then(r => r.json()).then(response => {\n        // Mark the movies active image\n        response.result.forEach(movie => {\n          for (let image of movie.images) {\n            if (image.active) {\n              if (image.type === 'BACKDROP') {\n                if (image.path === 'no_image') {\n                  movie.backdrop = null;\n                } else {\n                  movie.backdrop = image.path;\n                }\n              } else {\n                if (image.path === 'no_image') {\n                  movie.backdrop = null;\n                } else {\n                  movie.poster = image.path;\n                }\n              }\n\n              if (movie.backdrop != null && movie.poster != null) {\n                break;\n              }\n            }\n          }\n        });\n        resolve(response.result);\n      });\n    });\n  };\n  /**\r\n   * Makes a query to the current active server for a list of new episodes\r\n   * \r\n   * @param {string} genre \r\n   * @param {string} orderby \r\n   * @param {int} limit \r\n   */\n\n\n  const getNewEpisodeList = async (orderby = null, limit = 20) => {\n    return new Promise((resolve, reject) => {\n      let url;\n      url = `${server.server_ip}/api/series/list/episodes?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          limit: 20\n        })\n      }).then(r => r.json()).then(response => {\n        // Mark the movies active image\n        response.result.forEach(episode => {\n          for (let image of episode.images) {\n            if (image.active) {\n              if (image.type === 'BACKDROP') {\n                if (image.path === 'no_image') {\n                  episode.backdrop = null;\n                } else {\n                  episode.backdrop = image.path;\n                }\n              } else if (image.type === 'POSTER') {\n                if (image.path === 'no_image') {\n                  episode.poster = null;\n                } else {\n                  episode.poster = image.path;\n                }\n              } else {\n                if (image.path === 'no_image') {\n                  episode.backdrop = null;\n                } else {\n                  episode.poster = image.path;\n                }\n              }\n\n              if (episode.backdrop != null && episode.poster != null) {\n                break;\n              }\n            }\n          }\n        });\n        console.log(response.result);\n        resolve(response.result);\n      });\n    });\n  };\n\n  const getShowList = async (genre = null, orderby = null, limit = 20, ongoing = false) => {\n    return new Promise((resolve, reject) => {\n      let url;\n\n      if (ongoing) {\n        url = `${server.server_ip}/api/series/list/ongoing?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      } else {\n        url = `${server.server_ip}/api/series/list${genre !== null ? '/genre/' + genre : ''}?${orderby !== null ? 'orderby=' + orderby + '&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`;\n      }\n\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          limit: 20\n        })\n      }).then(r => r.json()).then(response => {\n        // Mark the movies active image\n        if (ongoing) {\n          response.upcoming.forEach(movie => {\n            for (let image of movie.images) {\n              if (image.active) {\n                if (image.type === 'BACKDROP') {\n                  if (image.path === 'no_image') {\n                    movie.backdrop = null;\n                  } else {\n                    movie.backdrop = image.path;\n                  }\n                } else {\n                  if (image.path === 'no_image') {\n                    movie.backdrop = null;\n                  } else {\n                    movie.poster = image.path;\n                  }\n                }\n\n                if (movie.backdrop != null && movie.poster != null) {\n                  break;\n                }\n              }\n            }\n          });\n          response.ongoing.forEach(movie => {\n            for (let image of movie.images) {\n              if (image.active) {\n                if (image.type === 'BACKDROP') {\n                  if (image.path === 'no_image') {\n                    movie.backdrop = null;\n                  } else {\n                    movie.backdrop = image.path;\n                  }\n                } else {\n                  if (image.path === 'no_image') {\n                    movie.backdrop = null;\n                  } else {\n                    movie.poster = image.path;\n                  }\n                }\n\n                if (movie.backdrop != null && movie.poster != null) {\n                  break;\n                }\n              }\n            }\n          });\n          resolve(response);\n          return;\n        }\n\n        response.result.forEach(movie => {\n          for (let image of movie.images) {\n            if (image.active) {\n              if (image.type === 'BACKDROP') {\n                if (image.path === 'no_image') {\n                  movie.backdrop = null;\n                } else {\n                  movie.backdrop = image.path;\n                }\n              } else {\n                if (image.path === 'no_image') {\n                  movie.backdrop = null;\n                } else {\n                  movie.poster = image.path;\n                }\n              }\n\n              if (movie.backdrop != null && movie.poster != null) {\n                break;\n              }\n            }\n          }\n        });\n        resolve(response.result);\n      });\n    });\n  };\n\n  const getActiveImage = (images, type) => {\n    for (let image of images) {\n      if (image.type === type && image.active && image.path != \"no_image\") {\n        return image;\n      }\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    validateServerAccess(server, serverToken => {\n      const socket = socketIOClient(server.server_ip);\n      socket.on(\"status\", data => {\n        console.log(data);\n        set([data, ...newlyAddedMovies]);\n      }); // Get recommended video (random video right now)\n\n      fetch(`${server.server_ip}/api/movies/list/random?trailer=true&token=${cookie.get('serverToken')}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(r => r.json()).then(result => {\n        if (result.status === 'success') {\n          result.movie.activeLogo = getActiveImage(result.movie.images, 'LOGO');\n          console.log(result);\n          setRecommendedMovie(result.movie);\n        } else {\n          console.log(\"Error getting recommended movie\");\n        }\n      }); // Get all the newest released movies (The slieshow)\n\n      getMovieList(null, 'release_date', 5).then(movies => {\n        movies.reverse();\n        let movieElements = [];\n\n        for (let movie of movies) {\n          let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/original/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          movieElements.push(__jsx(Carousel.Item, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 25\n            }\n          }, __jsx(\"img\", {\n            className: \"d-block w-100\",\n            src: img,\n            alt: movie.title,\n            style: {\n              objectFit: 'cover',\n              height: '90vh',\n              minHeight: '500px',\n              cursor: 'pointer'\n            },\n            onClick: () => {\n              selectMovie(movie.id);\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 29\n            }\n          }), __jsx(Carousel.Caption, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 29\n            }\n          }, __jsx(\"h3\", {\n            style: {\n              textShadow: '0px 0px 6px #000'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 33\n            }\n          }, movie.title), __jsx(\"p\", {\n            style: {\n              textShadow: '0px 0px 6px #000'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 33\n            }\n          }, movie.overview))));\n        }\n\n        loading++;\n        setLatesMovies(movieElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get popular movies\n\n      getMovieList(null, 'release_date', 20, false, false, true).then(movies => {\n        movies.reverse();\n        let movieElements = [];\n\n        for (let movie of movies) {\n          let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          movieElements.push(__jsx(MovieBackdrop, {\n            markAsDoneButton: true,\n            id: movie.id,\n            time: movie.watchtime,\n            runtime: movie.runtime,\n            title: movie.title,\n            overview: movie.overview,\n            runtime: movie.runtime,\n            backdrop: img,\n            onClick: id => selectMovie(movie.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setPopularMovies(movieElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get ongoing movies\n\n      getMovieList(null, 'release_date', 20, true).then(movies => {\n        movies.reverse();\n        let movieElements = [];\n\n        for (let movie of movies) {\n          let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          movieElements.push(__jsx(MovieBackdrop, {\n            markAsDoneButton: true,\n            id: movie.id,\n            time: movie.watchtime,\n            runtime: movie.runtime,\n            title: movie.title,\n            overview: movie.overview,\n            runtime: movie.runtime,\n            backdrop: img,\n            onClick: id => selectMovie(movie.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setOngoingMovies(movieElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get watchlist for movies\n\n      getMovieList(null, 'release_date', 20, false, true).then(movies => {\n        movies.reverse();\n        let movieElements = [];\n\n        for (let movie of movies) {\n          let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          movieElements.push(__jsx(MovieBackdrop, {\n            markAsDoneButton: true,\n            id: movie.id,\n            time: movie.watchtime,\n            runtime: movie.runtime,\n            title: movie.title,\n            overview: movie.overview,\n            runtime: movie.runtime,\n            backdrop: img,\n            onClick: id => selectMovie(movie.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setMovieWatchList(movieElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get newly added movies\n\n      getMovieList(null, 'added_date', 20).then(movies => {\n        let movieElements = [];\n\n        for (let movie of movies) {\n          let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          movieElements.push(__jsx(MovieBackdrop, {\n            markAsDoneButton: true,\n            id: movie.id,\n            time: movie.watchtime,\n            runtime: movie.runtime,\n            title: movie.title,\n            overview: movie.overview,\n            runtime: movie.runtime,\n            backdrop: img,\n            onClick: id => selectMovie(movie.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setNewlyAddedMovies(movieElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get newly added shows\n\n      getShowList(null, 'added_date', 20).then(shows => {\n        let showElements = [];\n\n        for (let show of shows) {\n          let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          showElements.push(__jsx(MovieBackdrop, {\n            markAsDoneButton: true,\n            id: show.id,\n            time: show.watchtime,\n            runtime: show.runtime,\n            title: show.title,\n            overview: show.overview,\n            runtime: show.runtime,\n            backdrop: img,\n            onClick: id => selectShow(show.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setNewlyAddedShows(showElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      }); // Get ongoing shows\n\n      getShowList(null, 'added_date', 20, true).then(result => {\n        let showElements = [];\n\n        for (let show of result.upcoming) {\n          let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          showElements.push(__jsx(MovieBackdrop, {\n            showTitle: true,\n            markAsDoneButton: true,\n            id: show.id,\n            time: show.time_watched,\n            runtime: show.runtime,\n            title: show.season_name + \" - Episode \" + show.episode_number,\n            overview: show.overview,\n            runtime: show.total_time,\n            backdrop: img,\n            onClick: id => selectEpisode(show.show_id, show.season_number, show.episode_number, show.internalepisodeid),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        for (let show of result.ongoing) {\n          let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000';\n          showElements.push(__jsx(MovieBackdrop, {\n            showTitle: true,\n            markAsDoneButton: true,\n            id: show.id,\n            time: show.time_watched,\n            runtime: show.runtime,\n            title: show.season_name + \" - Episode \" + show.episode_number,\n            overview: show.overview,\n            runtime: show.total_time,\n            backdrop: img,\n            onClick: id => selectEpisode(show.show_id, show.season_number, show.episode_number, show.internalepisodeid),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setOngoingShows(showElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      });\n      getNewEpisodeList('added_date', 20).then(episodes => {\n        let episodeElements = [];\n\n        for (let episode of episodes) {\n          let poster = episode.poster !== null ? `https://image.tmdb.org/t/p/w500/${episode.poster}` : 'https://via.placeholder.com/500x1000';\n          let backdrop = episode.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${episode.backdrop}` : 'https://via.placeholder.com/500x1000';\n          episodeElements.push(__jsx(EpisodePoster, {\n            show: episode.serie_id,\n            season: episode.season,\n            episode: episode.episode,\n            poster: poster,\n            internalEpisodeID: episode.internalepisodeid,\n            backdrop: backdrop,\n            onClick: (season, episode, show, internalEpisodeID) => selectEpisode(show, season, episode, internalEpisodeID),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 25\n            }\n          }));\n        }\n\n        loading++;\n        setNewlyAddedEpisodes(episodeElements);\n      }).then(() => {\n        if (loading == 7) {\n          setLoaded(true);\n        }\n      });\n    });\n  }, [loading]);\n\n  const selectMovie = id => {\n    Router.push(`/server/${server.server_id}/movies/video/${id}`);\n  };\n\n  const selectShow = id => {\n    Router.push(`/server/${server.server_id}/shows/video/${id}`);\n  };\n\n  const selectEpisode = (showID, seasonNumber, episodeNumber, internalEpisodeID) => {\n    Router.push(`/server/${server.server_id}/shows/video/${showID}/season/${seasonNumber}/episode/${episodeNumber}?internalID=${internalEpisodeID}`);\n  };\n\n  const scrollLeft = id => {\n    document.getElementById(id).scrollLeft -= window.innerWidth * 0.8;\n    window.scrollTo(window.scrollX, window.scrollY - 1);\n    window.scrollTo(window.scrollX, window.scrollY + 1);\n  };\n\n  const scrollRight = id => {\n    document.getElementById(id).scrollLeft += window.innerWidth * 0.8;\n    window.scrollTo(window.scrollX, window.scrollY - 1);\n    window.scrollTo(window.scrollX, window.scrollY + 1);\n  }; // LAYOUT //\n\n\n  return __jsx(React.Fragment, null, !loaded && __jsx(\"div\", {\n    className: Styles.loadingioSpinnerEclipse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: Styles.ldio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 17\n    }\n  }))), loaded && __jsx(Layout, {\n    searchEnabled: true,\n    server: server,\n    serverToken: cookie.get('serverToken'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }\n  }), recommendedMovie != false && __jsx(\"div\", {\n    className: Styles.recommended,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }\n  }, __jsx(\"video\", {\n    autoPlay: true,\n    loop: true,\n    preload: \"auto\",\n    muted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 17\n    }\n  }, __jsx(\"source\", {\n    src: `${server.server_ip}/api/trailer/${recommendedMovie[\"id\"]}?type=MOVIE&token=${cookie.get('serverToken')}`,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    className: Styles.recommendedInformation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }\n  }, recommendedMovie[\"activeLogo\"] != false && __jsx(\"img\", {\n    src: `https://image.tmdb.org/t/p/original/${recommendedMovie[\"activeLogo\"].path}`,\n    className: Styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 21\n    }\n  }), recommendedMovie[\"activeLogo\"] == false && __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 21\n    }\n  }, recommendedMovie[\"title\"]), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 21\n    }\n  }, recommendedMovie[\"overview\"]), __jsx(\"div\", {\n    className: Styles.controls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: `/server/${server.server_id}/movies/video/${recommendedMovie[\"id\"]}?autoPlay=true`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 25\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/001-play-button.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 29\n    }\n  })), __jsx(Link, {\n    href: `/server/${server.server_id}/movies/video/${recommendedMovie[\"id\"]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 25\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/002-information.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 29\n    }\n  }))))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 9\n    }\n  }, __jsx(Container, {\n    fluid: true,\n    className: Styles.contentRows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 13\n    }\n  }, popularMovies.length > 0 && __jsx(React.Fragment, null, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 25\n    }\n  }, \"Popul\\xE4rt just nu\"), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"popularMovies\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 29\n    }\n  }, popularMovies), popularMovies.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('popularMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('popularMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 21\n    }\n  })), ongoingMovies.length > 0 && __jsx(React.Fragment, null, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 25\n    }\n  }, \"P\\xE5g\\xE5ende filmer\"), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"ongoingMovies\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 29\n    }\n  }, ongoingMovies), ongoingMovies.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('ongoingMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('ongoingMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 21\n    }\n  })), ongoingShows.length > 0 && __jsx(React.Fragment, null, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 25\n    }\n  }, \"P\\xE5g\\xE5ende serier\"), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"ongoingShows\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 29\n    }\n  }, ongoingShows), ongoingShows.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('ongoingShows'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('ongoingShows'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 21\n    }\n  })), newlyAddedMovies.length > 0 && __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"/server/\" + server.server_id + \"/movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 80\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 108\n    }\n  }, \"Nyligen tillagda filmer\"))), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"newlyAddedMovies\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 29\n    }\n  }, newlyAddedMovies), newlyAddedMovies.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('newlyAddedMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('newlyAddedMovies'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 21\n    }\n  })), movieWatchList.length > 0 && __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"/server/\" + server.server_id + \"/movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 80\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 108\n    }\n  }, \"Filmer att se senare\"))), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"movieWatchList\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 29\n    }\n  }, movieWatchList), movieWatchList.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('movieWatchList'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('movieWatchList'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 21\n    }\n  })), newlyAddedEpisodes.length > 0 && __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"/server/\" + server.server_id + \"/shows\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 79\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 107\n    }\n  }, \"Nyligen tillagda avsnitt\"))), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"newlyAddedEpisodes\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 29\n    }\n  }, newlyAddedEpisodes), newlyAddedEpisodes.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('newlyAddedEpisodes'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('newlyAddedEpisodes'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 21\n    }\n  })), newlyAddedShows.length > 0 && __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"/server/\" + server.server_id + \"/shows\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 79\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      textTransform: 'capitalize'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 107\n    }\n  }, \"Nyligen tillagda serier\"))), __jsx(\"div\", {\n    className: Styles.movieRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    id: \"newlyAddedShows\",\n    className: Styles.scrollable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 29\n    }\n  }, newlyAddedShows), newlyAddedShows.length * 480 > windowSize.width && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: Styles.scrollButton,\n    onClick: () => scrollLeft('newlyAddedShows'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 41\n    }\n  })), __jsx(\"div\", {\n    className: Styles.scrollButton,\n    style: {\n      right: '0'\n    },\n    onClick: () => scrollRight('newlyAddedShows'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 37\n    }\n  }, __jsx(\"img\", {\n    src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`,\n    width: \"70\",\n    height: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 41\n    }\n  })))), __jsx(\"hr\", {\n    className: Styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 21\n    }\n  }))))));\n};\n\nexport default main; // Get the information about the server and send it to the front end before render (this is server-side)\n\nexport async function getServerSideProps(context) {\n  let serverId = context.params.server;\n  return await fetch(`http://localhost:${process.env.SERVER_PORT}${process.env.SERVER_SUB_FOLDER}/api/servers/getServer`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: serverId\n    })\n  }).then(r => r.json()).then(data => {\n    return {\n      props: {\n        server: data.server\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/pages/server/[server]/index.js"],"names":["Layout","Head","fetch","cookie","Router","useEffect","useState","Carousel","Container","Row","Col","Link","validateServerAccess","useWindowSize","Styles","MovieBackdrop","EpisodePoster","socketIOClient","useTransition","animated","fetcher","url","then","r","json","result","main","props","server","latestMovies","setLatesMovies","ongoingMovies","setOngoingMovies","movieWatchList","setMovieWatchList","ongoingShows","setOngoingShows","newlyAddedMovies","setNewlyAddedMovies","newlyAddedShows","setNewlyAddedShows","newlyAddedEpisodes","setNewlyAddedEpisodes","recommendedMovie","setRecommendedMovie","popularMovies","setPopularMovies","loading","loaded","setLoaded","transitions","from","opacity","enter","leave","delay","onRest","setItems","windowSize","allContent","getMovieList","genre","orderby","limit","ongoing","watchlist","popular","Promise","resolve","reject","server_ip","get","method","headers","body","JSON","stringify","response","forEach","movie","image","images","active","type","path","backdrop","poster","getNewEpisodeList","episode","console","log","getShowList","upcoming","getActiveImage","serverToken","socket","on","data","set","status","activeLogo","movies","reverse","movieElements","img","push","title","objectFit","height","minHeight","cursor","selectMovie","id","textShadow","overview","watchtime","runtime","shows","showElements","show","selectShow","time_watched","season_name","episode_number","total_time","selectEpisode","show_id","season_number","internalepisodeid","episodes","episodeElements","serie_id","season","internalEpisodeID","server_id","showID","seasonNumber","episodeNumber","scrollLeft","document","getElementById","window","innerWidth","scrollTo","scrollX","scrollY","scrollRight","loadingioSpinnerEclipse","ldio","recommended","recommendedInformation","logo","controls","process","env","NEXT_PUBLIC_SERVER_URL","color","contentRows","length","textTransform","movieRow","scrollable","width","scrollButton","right","divider","getServerSideProps","context","serverId","params","SERVER_PORT","SERVER_SUB_FOLDER"],"mappings":"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","sourcesContent":["import Layout from '../../../components/layout'\r\nimport Head from 'next/head'\r\nimport fetch from 'node-fetch'\r\nimport cookie from 'js-cookie';\r\nimport Router from 'next/router';\r\nimport { useEffect, useState } from 'react';\r\nimport { Carousel, Container, Row, Col } from 'react-bootstrap';\r\nimport Link from 'next/link';\r\nimport validateServerAccess from '../../../lib/validateServerAccess';\r\nimport useWindowSize from '../../../components/hooks/WindowSize';\r\nimport Styles from '../../../styles/server.module.css';\r\nimport MovieBackdrop from '../../../components/movieBackdrop';\r\nimport EpisodePoster from '../../../components/episodePoster';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useTransition, animated } from 'react-spring';\r\n\r\nconst fetcher = url =>\r\n  fetch(url)\r\n    .then(r => {\r\n      return r.json().then(result => {\r\n          return result;\r\n      });\r\n    }\r\n  );\r\n\r\nconst main = (props) => {\r\n    // props.server is from the SSR under this function\r\n    let server = props.server;\r\n    \r\n    const [latestMovies, setLatesMovies] = useState(null);\r\n    const [ongoingMovies, setOngoingMovies] = useState([]);\r\n    const [movieWatchList, setMovieWatchList] = useState([]);\r\n    const [ongoingShows, setOngoingShows] = useState([]);\r\n    const [newlyAddedMovies, setNewlyAddedMovies] = useState([]);\r\n    const [newlyAddedShows, setNewlyAddedShows] = useState([]);\r\n    const [newlyAddedEpisodes, setNewlyAddedEpisodes] = useState([]);\r\n    const [recommendedMovie, setRecommendedMovie] = useState(false);\r\n    const [popularMovies, setPopularMovies] = useState([]);\r\n    let loading = 0;\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    const transitions = useTransition(newlyAddedMovies, {\r\n        from: { opacity: 0 },\r\n        enter: { opacity: 1 },\r\n        leave: { opacity: 0 },\r\n        delay: 200,\r\n        onRest: () => setItems([]),\r\n      })\r\n    \r\n    \r\n\r\n\r\n\r\n    const windowSize = useWindowSize();\r\n    let allContent = [];\r\n\r\n    /**\r\n     * Makes a query to the current active server for a list of movies\r\n     * \r\n     * @param {string} genre \r\n     * @param {string} orderby \r\n     * @param {int} limit \r\n     */\r\n    const getMovieList = async (genre=null, orderby=null, limit=20, ongoing=false, watchlist=false, popular=false) => {\r\n        return new Promise((resolve, reject) => {\r\n            let url;\r\n            if (ongoing) {\r\n                url = `${server.server_ip}/api/movies/list/ongoing?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            } else if(watchlist) {\r\n                url = `${server.server_ip}/api/movies/list/watchlist?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            } else if(popular) {\r\n                url = `${server.server_ip}/api/movies/list/popular?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            } else {\r\n                url = `${server.server_ip}/api/movies/list${genre !== null ? '/genre/'+genre : ''}?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            }\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    limit: 20\r\n                })\r\n            })\r\n            .then((r) => r.json())\r\n            .then((response) => {\r\n                // Mark the movies active image\r\n                response.result.forEach(movie => {\r\n                    for (let image of movie.images) {\r\n                        if (image.active) {\r\n                            if (image.type === 'BACKDROP') {\r\n                                if (image.path === 'no_image') {\r\n                                    movie.backdrop = null;\r\n                                } else {\r\n                                    movie.backdrop = image.path;\r\n                                }\r\n                            } else {\r\n                                if (image.path === 'no_image') {\r\n                                    movie.backdrop = null;\r\n                                } else {\r\n                                    movie.poster = image.path;\r\n                                }\r\n                            }\r\n\r\n                            if (movie.backdrop != null && movie.poster != null) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                resolve(response.result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes a query to the current active server for a list of new episodes\r\n     * \r\n     * @param {string} genre \r\n     * @param {string} orderby \r\n     * @param {int} limit \r\n     */\r\n         const getNewEpisodeList = async (orderby=null, limit=20) => {\r\n            return new Promise((resolve, reject) => {\r\n                let url;\r\n                url = `${server.server_ip}/api/series/list/episodes?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n                fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        limit: 20\r\n                    })\r\n                })\r\n                .then((r) => r.json())\r\n                .then((response) => {\r\n                    // Mark the movies active image\r\n                    response.result.forEach(episode => {\r\n                        for (let image of episode.images) {\r\n                            if (image.active) {\r\n                                if (image.type === 'BACKDROP') {\r\n                                    if (image.path === 'no_image') {\r\n                                        episode.backdrop = null;\r\n                                    } else {\r\n                                        episode.backdrop = image.path;\r\n                                    }\r\n                                } else if (image.type === 'POSTER') {\r\n                                    if (image.path === 'no_image') {\r\n                                        episode.poster = null;\r\n                                    } else {\r\n                                        episode.poster = image.path;\r\n                                    }\r\n                                } else {\r\n                                    if (image.path === 'no_image') {\r\n                                        episode.backdrop = null;\r\n                                    } else {\r\n                                        episode.poster = image.path;\r\n                                    }\r\n                                }\r\n    \r\n                                if (episode.backdrop != null && episode.poster != null) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    console.log(response.result);\r\n                    resolve(response.result);\r\n                });\r\n            });\r\n        }\r\n\r\n    const getShowList = async (genre=null, orderby=null, limit=20, ongoing=false) => {\r\n        return new Promise((resolve, reject) => {\r\n            let url;\r\n            if (ongoing) {\r\n                url = `${server.server_ip}/api/series/list/ongoing?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            } else {\r\n                url = `${server.server_ip}/api/series/list${genre !== null ? '/genre/'+genre : ''}?${orderby !== null ? 'orderby='+orderby+'&' : ''}limit=${limit}&token=${cookie.get('serverToken')}`\r\n            }\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    limit: 20\r\n                })\r\n            })\r\n            .then((r) => r.json())\r\n            .then((response) => {\r\n                // Mark the movies active image\r\n                if (ongoing) {\r\n                    response.upcoming.forEach(movie => {\r\n                        for (let image of movie.images) {\r\n                            if (image.active) {\r\n                                if (image.type === 'BACKDROP') {\r\n                                    if (image.path === 'no_image') {\r\n                                        movie.backdrop = null;\r\n                                    } else {\r\n                                        movie.backdrop = image.path;\r\n                                    }\r\n                                } else {\r\n                                    if (image.path === 'no_image') {\r\n                                        movie.backdrop = null;\r\n                                    } else {\r\n                                        movie.poster = image.path;\r\n                                    }\r\n                                }\r\n    \r\n                                if (movie.backdrop != null && movie.poster != null) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    response.ongoing.forEach(movie => {\r\n                        for (let image of movie.images) {\r\n                            if (image.active) {\r\n                                if (image.type === 'BACKDROP') {\r\n                                    if (image.path === 'no_image') {\r\n                                        movie.backdrop = null;\r\n                                    } else {\r\n                                        movie.backdrop = image.path;\r\n                                    }\r\n                                } else {\r\n                                    if (image.path === 'no_image') {\r\n                                        movie.backdrop = null;\r\n                                    } else {\r\n                                        movie.poster = image.path;\r\n                                    }\r\n                                }\r\n    \r\n                                if (movie.backdrop != null && movie.poster != null) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    resolve(response);\r\n                    return;\r\n                }\r\n\r\n\r\n                response.result.forEach(movie => {\r\n                    for (let image of movie.images) {\r\n                        if (image.active) {\r\n                            if (image.type === 'BACKDROP') {\r\n                                if (image.path === 'no_image') {\r\n                                    movie.backdrop = null;\r\n                                } else {\r\n                                    movie.backdrop = image.path;\r\n                                }\r\n                            } else {\r\n                                if (image.path === 'no_image') {\r\n                                    movie.backdrop = null;\r\n                                } else {\r\n                                    movie.poster = image.path;\r\n                                }\r\n                            }\r\n\r\n                            if (movie.backdrop != null && movie.poster != null) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                resolve(response.result);\r\n            });\r\n        });\r\n    }\r\n\r\n    const getActiveImage = (images, type) => {\r\n        for (let image of images) {\r\n            if (image.type === type && image.active && image.path != \"no_image\") {\r\n                return image;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        validateServerAccess(server, (serverToken) => {\r\n            const socket = socketIOClient(server.server_ip);\r\n                socket.on(\"status\", data => {\r\n                console.log(data);\r\n                set([\r\n                    data,\r\n                    ...newlyAddedMovies\r\n                  ])\r\n            });            \r\n            \r\n            \r\n            // Get recommended video (random video right now)\r\n            fetch(`${server.server_ip}/api/movies/list/random?trailer=true&token=${cookie.get('serverToken')}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n            .then((r) => r.json())\r\n            .then(result => {\r\n                if (result.status === 'success') {\r\n                    result.movie.activeLogo = getActiveImage(result.movie.images, 'LOGO');\r\n                    console.log(result);\r\n\r\n                    setRecommendedMovie(result.movie);\r\n                } else {\r\n                    console.log(\"Error getting recommended movie\");\r\n                }\r\n            })\r\n            \r\n\r\n            // Get all the newest released movies (The slieshow)\r\n            getMovieList(null, 'release_date', 5).then(movies => {\r\n                movies.reverse();\r\n                let movieElements = [];\r\n                for (let movie of movies) {\r\n                    let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/original/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    movieElements.push(\r\n                        <Carousel.Item>\r\n                            <img \r\n                                className=\"d-block w-100\"\r\n                                src={img}\r\n                                alt={movie.title}\r\n                                style={{objectFit: 'cover', height: '90vh', minHeight: '500px', cursor: 'pointer'}}\r\n                                onClick={() => {selectMovie(movie.id)}}\r\n                            />\r\n                            <Carousel.Caption>\r\n                                <h3 style={{textShadow: '0px 0px 6px #000'}}>{movie.title}</h3>\r\n                                <p style={{textShadow: '0px 0px 6px #000'}}>{movie.overview}</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n                    );\r\n                }\r\n                loading++\r\n                setLatesMovies(movieElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            // Get popular movies\r\n            getMovieList(null, 'release_date', 20, false, false, true).then(movies => {\r\n                movies.reverse();\r\n                let movieElements = [];\r\n                for (let movie of movies) {\r\n                    let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    movieElements.push(\r\n                        <MovieBackdrop markAsDoneButton id={movie.id} time={movie.watchtime} runtime={movie.runtime} title={movie.title} overview={movie.overview} runtime={movie.runtime} backdrop={img} onClick={(id) => selectMovie(movie.id)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setPopularMovies(movieElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            // Get ongoing movies\r\n            getMovieList(null, 'release_date', 20, true).then(movies => {\r\n                movies.reverse();\r\n                let movieElements = [];\r\n                for (let movie of movies) {\r\n                    let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    movieElements.push(\r\n                        <MovieBackdrop markAsDoneButton id={movie.id} time={movie.watchtime} runtime={movie.runtime} title={movie.title} overview={movie.overview} runtime={movie.runtime} backdrop={img} onClick={(id) => selectMovie(movie.id)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setOngoingMovies(movieElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            // Get watchlist for movies\r\n            getMovieList(null, 'release_date', 20, false, true).then(movies => {\r\n                movies.reverse();\r\n                let movieElements = [];\r\n                for (let movie of movies) {\r\n                    let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    movieElements.push(\r\n                        <MovieBackdrop markAsDoneButton id={movie.id} time={movie.watchtime} runtime={movie.runtime} title={movie.title} overview={movie.overview} runtime={movie.runtime} backdrop={img} onClick={(id) => selectMovie(movie.id)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setMovieWatchList(movieElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            // Get newly added movies\r\n            getMovieList(null, 'added_date', 20).then(movies => {\r\n                let movieElements = [];\r\n                for (let movie of movies) {\r\n                    let img = movie.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${movie.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    movieElements.push(\r\n                        <MovieBackdrop markAsDoneButton id={movie.id} time={movie.watchtime} runtime={movie.runtime} title={movie.title} overview={movie.overview} runtime={movie.runtime} backdrop={img} onClick={(id) => selectMovie(movie.id)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setNewlyAddedMovies(movieElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            // Get newly added shows\r\n            getShowList(null, 'added_date', 20).then(shows => {\r\n                let showElements = [];\r\n                for (let show of shows) {\r\n                    let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    showElements.push(\r\n                        <MovieBackdrop markAsDoneButton id={show.id} time={show.watchtime} runtime={show.runtime} title={show.title} overview={show.overview} runtime={show.runtime} backdrop={img} onClick={(id) => selectShow(show.id)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setNewlyAddedShows(showElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n            // Get ongoing shows\r\n            getShowList(null, 'added_date', 20, true).then(result => {\r\n                let showElements = [];\r\n                for (let show of result.upcoming) {\r\n                    let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    showElements.push(\r\n                        <MovieBackdrop showTitle markAsDoneButton id={show.id} time={show.time_watched} runtime={show.runtime} title={show.season_name + \" - Episode \" + show.episode_number}\r\n                                       overview={show.overview} runtime={show.total_time} backdrop={img} onClick={(id) => selectEpisode(show.show_id, show.season_number, show.episode_number, show.internalepisodeid)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                for (let show of result.ongoing) {\r\n                    let img = show.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${show.backdrop}` : 'https://via.placeholder.com/2000x1000' \r\n                    showElements.push(\r\n                        <MovieBackdrop showTitle markAsDoneButton id={show.id} time={show.time_watched} runtime={show.runtime} title={show.season_name + \" - Episode \" + show.episode_number}\r\n                                       overview={show.overview} runtime={show.total_time} backdrop={img} onClick={(id) => selectEpisode(show.show_id, show.season_number, show.episode_number, show.internalepisodeid)}></MovieBackdrop>\r\n                    );\r\n                }\r\n                loading++\r\n                setOngoingShows(showElements);\r\n\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n\r\n            getNewEpisodeList('added_date', 20).then(episodes => {\r\n                let episodeElements = [];\r\n\r\n                for (let episode of episodes) {\r\n                    let poster = episode.poster !== null ? `https://image.tmdb.org/t/p/w500/${episode.poster}` : 'https://via.placeholder.com/500x1000';\r\n                    let backdrop = episode.backdrop !== null ? `https://image.tmdb.org/t/p/w500/${episode.backdrop}` : 'https://via.placeholder.com/500x1000' \r\n                    episodeElements.push(\r\n                        <EpisodePoster show={episode.serie_id} season={episode.season} episode={episode.episode} poster={poster} internalEpisodeID={episode.internalepisodeid} backdrop={backdrop}\r\n                            onClick={(season, episode, show, internalEpisodeID) => selectEpisode(show, season, episode, internalEpisodeID)}></EpisodePoster>\r\n                    );\r\n                }\r\n                loading++\r\n                setNewlyAddedEpisodes(episodeElements);\r\n            }).then(() => {\r\n                if(loading == 7) {\r\n                    setLoaded(true)\r\n                }\r\n            })\r\n        });\r\n    }, [loading]);\r\n\r\n\r\n    const selectMovie = (id) => {\r\n        Router.push(`/server/${server.server_id}/movies/video/${id}`);\r\n    }\r\n\r\n    const selectShow = (id) => {\r\n        Router.push(`/server/${server.server_id}/shows/video/${id}`);\r\n    }\r\n\r\n    const selectEpisode = (showID, seasonNumber, episodeNumber, internalEpisodeID) => {\r\n        Router.push(`/server/${server.server_id}/shows/video/${showID}/season/${seasonNumber}/episode/${episodeNumber}?internalID=${internalEpisodeID}`)\r\n    }\r\n\r\n\r\n    const scrollLeft = (id) => {\r\n        document.getElementById(id).scrollLeft -= (window.innerWidth)*0.8;\r\n        window.scrollTo(window.scrollX, window.scrollY - 1);\r\n        window.scrollTo(window.scrollX, window.scrollY + 1);\r\n    }\r\n    const scrollRight = (id) => {\r\n        document.getElementById(id).scrollLeft += (window.innerWidth)*0.8;\r\n        window.scrollTo(window.scrollX, window.scrollY - 1);\r\n        window.scrollTo(window.scrollX, window.scrollY + 1);\r\n    }\r\n\r\n    // LAYOUT //\r\n    return (<>\r\n        {!loaded &&\r\n            <div className={Styles.loadingioSpinnerEclipse}>\r\n            <div className={Styles.ldio}>\r\n                <div></div>\r\n            </div>\r\n            </div>\r\n        }\r\n        {loaded &&\r\n\r\n        <Layout searchEnabled server={server} serverToken={cookie.get('serverToken')}>\r\n        <Head>\r\n        </Head>\r\n\r\n        {recommendedMovie != false &&\r\n            <div className={Styles.recommended}>\r\n                <video  autoPlay={true} loop={true} preload=\"auto\" muted>\r\n                    <source src={`${server.server_ip}/api/trailer/${recommendedMovie[\"id\"]}?type=MOVIE&token=${cookie.get('serverToken')}`}type=\"video/mp4\" />\r\n                </video>\r\n                <div className={Styles.recommendedInformation}>\r\n                    {recommendedMovie[\"activeLogo\"] != false &&\r\n                    <img src={`https://image.tmdb.org/t/p/original/${recommendedMovie[\"activeLogo\"].path}`} className={Styles.logo} />\r\n                    }\r\n                    {recommendedMovie[\"activeLogo\"] == false &&\r\n                    <h1>{recommendedMovie[\"title\"]}</h1>\r\n                    }\r\n                    <p>{recommendedMovie[\"overview\"]}</p>\r\n                    <div className={Styles.controls}>\r\n                        <Link href={`/server/${server.server_id}/movies/video/${recommendedMovie[\"id\"]}?autoPlay=true`}>\r\n                            <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/001-play-button.png`} />\r\n                        </Link>\r\n                        <Link href={`/server/${server.server_id}/movies/video/${recommendedMovie[\"id\"]}`}>\r\n                            <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/002-information.png`} />\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n    \r\n    \r\n            </div>\r\n        }\r\n\r\n            \r\n        <br></br>\r\n        <div style={{color: 'white'}}>\r\n            <Container fluid className={Styles.contentRows}>\r\n            {popularMovies.length > 0 &&\r\n                    <>\r\n                        <h2 style={{textTransform: 'capitalize'}}>Populärt just nu</h2>  \r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"popularMovies\" className={Styles.scrollable}>\r\n                                {popularMovies}\r\n                            </div>\r\n                            {popularMovies.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('popularMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('popularMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n\r\n                {ongoingMovies.length > 0 &&\r\n                    <>\r\n                        <h2 style={{textTransform: 'capitalize'}}>Pågående filmer</h2>  \r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"ongoingMovies\" className={Styles.scrollable}>\r\n                                {ongoingMovies}\r\n                            </div>\r\n                            {ongoingMovies.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('ongoingMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('ongoingMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n\r\n                {ongoingShows.length > 0 &&\r\n                    <>\r\n                        <h2 style={{textTransform: 'capitalize'}}>Pågående serier</h2>    \r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"ongoingShows\" className={Styles.scrollable}>\r\n                                {ongoingShows}\r\n                            </div>\r\n                            {ongoingShows.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('ongoingShows')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('ongoingShows')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n\r\n                {newlyAddedMovies.length > 0 &&\r\n                    <>\r\n                        <Link href={\"/server/\" + server.server_id + \"/movies\"}><a style={{color: 'white'}}><h2 style={{textTransform: 'capitalize'}}>Nyligen tillagda filmer</h2></a></Link>   \r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"newlyAddedMovies\" className={Styles.scrollable}>\r\n                                {newlyAddedMovies}\r\n                            </div>\r\n                            {newlyAddedMovies.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('newlyAddedMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('newlyAddedMovies')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n\r\n                {movieWatchList.length > 0 &&\r\n                    <>\r\n                        <Link href={\"/server/\" + server.server_id + \"/movies\"}><a style={{color: 'white'}}><h2 style={{textTransform: 'capitalize'}}>Filmer att se senare</h2></a></Link>   \r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"movieWatchList\" className={Styles.scrollable}>\r\n                                {movieWatchList}\r\n                            </div>\r\n                            {movieWatchList.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('movieWatchList')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('movieWatchList')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n                \r\n                {newlyAddedEpisodes.length > 0 &&\r\n                    <>\r\n                        <Link href={\"/server/\" + server.server_id + \"/shows\"}><a style={{color: 'white'}}><h2 style={{textTransform: 'capitalize'}}>Nyligen tillagda avsnitt</h2></a></Link>\r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"newlyAddedEpisodes\" className={Styles.scrollable}>\r\n                                {newlyAddedEpisodes}\r\n                            </div>\r\n                            {newlyAddedEpisodes.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('newlyAddedEpisodes')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('newlyAddedEpisodes')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n                \r\n                {newlyAddedShows.length > 0 &&\r\n                    <>\r\n                        <Link href={\"/server/\" + server.server_id + \"/shows\"}><a style={{color: 'white'}}><h2 style={{textTransform: 'capitalize'}}>Nyligen tillagda serier</h2></a></Link>\r\n                        <div className={Styles.movieRow}>\r\n                            <div id=\"newlyAddedShows\" className={Styles.scrollable}>\r\n                                {newlyAddedShows}\r\n                            </div>\r\n                            {newlyAddedShows.length * 480 > windowSize.width &&\r\n                                <>\r\n                                    <div className={Styles.scrollButton} onClick={() => scrollLeft('newlyAddedShows')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/left.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                    <div className={Styles.scrollButton} style={{right: '0'}} onClick={() => scrollRight('newlyAddedShows')}>\r\n                                        <img src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/right.svg`} width=\"70\" height=\"70\" />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div> \r\n                    <hr className={Styles.divider}></hr>\r\n                    </> \r\n                }\r\n            </Container>\r\n        </div>\r\n        </Layout>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default main;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Get the information about the server and send it to the front end before render (this is server-side)\r\nexport async function getServerSideProps(context) {\r\n    let serverId = context.params.server;\r\n    return await fetch(`http://localhost:${process.env.SERVER_PORT}${process.env.SERVER_SUB_FOLDER}/api/servers/getServer`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            id: serverId\r\n        }),\r\n    })\r\n    .then((r) => r.json())\r\n    .then((data) => {\r\n        return {\r\n            props: {\r\n                server: data.server\r\n            }\r\n          }\r\n    });\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}