"use strict";

var _react = _interopRequireWildcard(require("react"));

var _enzyme = require("enzyme");

var _index = require("../index");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var DemoClass =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(DemoClass, _PureComponent);

  function DemoClass() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = DemoClass.prototype;

  _proto.render = function render() {
    var inViewport = this.props.inViewport;
    return _react["default"].createElement("div", {
      style: {
        width: '400px',
        height: '300px'
      }
    }, _react["default"].createElement("span", {
      className: "content"
    }, inViewport ? 'in viewport' : 'not in viewport'));
  };

  return DemoClass;
}(_react.PureComponent);

describe('In Viewport', function () {
  it('basic render', function () {
    var TestNode = (0, _index.handleViewport)(DemoClass);
    var tree = (0, _enzyme.mount)(_react["default"].createElement(TestNode, null));
    expect(tree.find('.content').text()).toEqual('not in viewport');
  });
  it.skip('scroll render', function () {
    // until jsdom support observer
    jest.useFakeTimers();
    var TestNode = (0, _index.handleViewport)(DemoClass);
    var tree = (0, _enzyme.mount)(_react["default"].createElement(TestNode, null));
    global.document.scrollTop = 200;
    jest.runOnlyPendingTimers();
    tree.update();
    expect(tree.find('.content').text()).toEqual('in viewport');
  });
});