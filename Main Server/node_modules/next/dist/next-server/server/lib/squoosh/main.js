"use strict";exports.__esModule=true;exports.decodeBuffer=decodeBuffer;exports.rotate=rotate;exports.resize=resize;exports.encodeJpeg=encodeJpeg;exports.encodeWebp=encodeWebp;exports.encodePng=encodePng;var _jestWorker=_interopRequireDefault(require("jest-worker"));var path=_interopRequireWildcard(require("path"));var _utils=require("../../../lib/utils");var _image_data=_interopRequireDefault(require("./image_data"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const getWorker=(0,_utils.execOnce)(()=>new _jestWorker.default(path.resolve(__dirname,'impl'),{enableWorkerThreads:true}));async function decodeBuffer(buffer){const worker=getWorker();return _image_data.default.from(await worker.decodeBuffer(buffer));}async function rotate(image,numRotations){const worker=getWorker();return _image_data.default.from(await worker.rotate(image,numRotations));}async function resize(image,{width}){const worker=getWorker();return _image_data.default.from(await worker.resize(image,{width}));}async function encodeJpeg(image,{quality}){const worker=getWorker();const o=await worker.encodeJpeg(image,{quality});return Buffer.from(o);}async function encodeWebp(image,{quality}){const worker=getWorker();const o=await worker.encodeWebp(image,{quality});return Buffer.from(o);}async function encodePng(image){const worker=getWorker();const o=await worker.encodePng(image);return Buffer.from(o);}
//# sourceMappingURL=main.js.map