{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport default function useWindowSize() {\n  _s();\n\n  var isClient = true;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  var _useState = useState(getSize),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"BavKeL6E6tNTiGKbwq7Pn4eTing=\");","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/components/hooks/WindowSize.js"],"names":["useState","useEffect","useWindowSize","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC,MAAMC,QAAQ,OAAd;;AAEA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFnC,KAAP;AAID;;AARmC,kBAUAR,QAAQ,CAACI,OAAD,CAVR;AAAA,MAU7BO,UAV6B;AAAA,MAUjBC,aAViB;;AAYpCX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASU,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACD;;AAEDE,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO;AAAA,aAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAN;AAAA,KAAP;AACD,GAXQ,EAWN,EAXM,CAAT,CAZoC,CAuB5B;;AAER,SAAOF,UAAP;AACD;;GA1BqBT,a","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useWindowSize() {\n    const isClient = typeof window === 'object';\n  \n    function getSize() {\n      return {\n        width: isClient ? window.innerWidth : undefined,\n        height: isClient ? window.innerHeight : undefined\n      };\n    }\n  \n    const [windowSize, setWindowSize] = useState(getSize);\n  \n    useEffect(() => {\n      if (!isClient) {\n        return false;\n      }\n      \n      function handleResize() {\n        setWindowSize(getSize());\n      }\n  \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return windowSize;\n  }"]},"metadata":{},"sourceType":"module"}