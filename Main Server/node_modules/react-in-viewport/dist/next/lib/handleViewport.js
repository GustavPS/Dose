function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// HOC for handleViewport
import React, { useRef, forwardRef } from 'react';
import hoistNonReactStatic from 'hoist-non-react-statics';
import useInViewport from './useInViewport';

var noop = function noop() {};

var isFunctionalComponent = function isFunctionalComponent(Component) {
  return typeof Component === 'function' && !(Component.prototype && Component.prototype.render);
};

var isReactComponent = function isReactComponent(Component) {
  return Component.prototype && Component.prototype.isReactComponent;
};

function handleViewport(TargetComponent, options, config) {
  if (config === void 0) {
    config = {
      disconnectOnLeave: false
    };
  }

  var ForwardedRefComponent = forwardRef(function (props, ref) {
    var refProps = _objectSpread({
      forwardedRef: ref
    }, isReactComponent(TargetComponent) && !isFunctionalComponent(TargetComponent) ? {
      ref: ref
    } : {});

    return React.createElement(TargetComponent, _extends({}, props, refProps));
  });

  var InViewport = function InViewport(_ref) {
    var _ref$onEnterViewport = _ref.onEnterViewport,
        onEnterViewport = _ref$onEnterViewport === void 0 ? noop : _ref$onEnterViewport,
        _ref$onLeaveViewport = _ref.onLeaveViewport,
        onLeaveViewport = _ref$onLeaveViewport === void 0 ? noop : _ref$onLeaveViewport,
        restProps = _objectWithoutPropertiesLoose(_ref, ["onEnterViewport", "onLeaveViewport"]);

    var node = useRef();

    var _useInViewport = useInViewport(node, options, config, {
      onEnterViewport: onEnterViewport,
      onLeaveViewport: onLeaveViewport
    }),
        inViewport = _useInViewport.inViewport,
        enterCount = _useInViewport.enterCount,
        leaveCount = _useInViewport.leaveCount;

    return React.createElement(ForwardedRefComponent, _extends({}, restProps, {
      inViewport: inViewport,
      enterCount: enterCount,
      leaveCount: leaveCount,
      ref: node
    }));
  };

  var name = TargetComponent.displayName || TargetComponent.name || 'Component';
  InViewport.displayName = "handleViewport(" + name + ")";
  return hoistNonReactStatic(InViewport, ForwardedRefComponent);
}

export default handleViewport;