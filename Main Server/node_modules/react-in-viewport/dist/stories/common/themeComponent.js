"use strict";

exports.__esModule = true;
exports.Spacer = exports.Block = exports.Card = exports.PageTitle = void 0;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var PageTitle = (0, _react.memo)(function (_ref) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? 'React In Viewport' : _ref$title,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? 'Wrapper component to detect if the component is in viewport using Intersection Observer API' : _ref$description;
  return _react["default"].createElement("div", {
    className: "page__title"
  }, _react["default"].createElement("h1", {
    className: "page__title-main"
  }, title, _react["default"].createElement("a", {
    className: "github mui-icon",
    href: "https://github.com/roderickhsiao/react-in-viewport",
    target: "_blank",
    rel: "noopener noreferrer"
  }, _react["default"].createElement("span", {
    style: {
      visibility: 'hidden'
    }
  }, "Github"))), _react["default"].createElement("p", {
    className: "page__title-desc"
  }, description));
});
exports.PageTitle = PageTitle;
PageTitle.displayName = 'PageTitle';
var Card = (0, _react.memo)(function (_ref2) {
  var titleText = _ref2.titleText,
      contentNode = _ref2.contentNode,
      forwardedRef = _ref2.forwardedRef;
  return _react["default"].createElement("div", {
    className: "card",
    ref: forwardedRef
  }, _react["default"].createElement("div", {
    className: "card__head"
  }, _react["default"].createElement("h3", {
    className: "card__title"
  }, titleText)), _react["default"].createElement("div", {
    className: "card__conent"
  }, contentNode));
});
exports.Card = Card;
Card.displayName = 'Card';

var Block = function Block(props) {
  var inViewport = props.inViewport,
      enterCount = props.enterCount,
      leaveCount = props.leaveCount,
      forwardedRef = props.forwardedRef;
  var color = inViewport ? '#217ac0' : '#ff9800';
  var text = inViewport ? 'In viewport' : 'Not in viewport';
  return _react["default"].createElement(Card, {
    className: "viewport-block",
    titleText: text,
    contentNode: _react["default"].createElement("div", {
      ref: forwardedRef,
      title: "Enter viewport " + enterCount + " times, leave viewport " + leaveCount + " times",
      style: {
        width: '100%',
        height: '300px',
        background: color,
        transitionDuration: '1s'
      }
    })
  });
};

exports.Block = Block;
Block.displayName = 'Block';

var Spacer = function Spacer() {
  return _react["default"].createElement("div", {
    style: {
      height: '100vh',
      padding: '20px'
    }
  }, _react["default"].createElement("p", null, "Scroll down to make component in viewport", ' ', _react["default"].createElement("span", {
    role: "img",
    "aria-label": "down"
  }, "\uD83D\uDC47"), ' '));
};

exports.Spacer = Spacer;
Spacer.displayName = Spacer;