{"ast":null,"code":"var _jsxFileName = \"/mnt/h/Code/Dose/Main Server/components/videoComponent.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Styles from './videoComponent.module.css';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\nexport default class VideoComponent extends React.Component {\n  constructor(props) {\n    super(props); // Video element\n\n    this.video = undefined; // Source element\n\n    this.source = undefined; // Subtitle element\n\n    this.subtitle = undefined; // Control timeout\n\n    this.controlTimeout = undefined; // Update currenttime interval (for the server)\n\n    this.updateCurrentTimeInterval = undefined; // Used for unique keys on elements.\n\n    this.elementCounter = 0; // Function to call on time change events\n\n    this.onTimeChange = props.onTimeChange; //this.getNextEpisodeID = props.getNextEpisodeID;\n\n    this.onChangeEpisode = props.onChangeEpisode;\n    this.server = props.server;\n    this.serverToken = props.serverToken;\n    this.type = props.Movie != undefined ? 'movie' : 'serie';\n    this.internalID = props.internalID;\n    this.state = {\n      subtitles: {\n        availableSubtitles: [],\n        activeSubtitle: undefined\n      },\n      resolutions: {\n        availableResolutions: [],\n        activeResolution: ''\n      },\n      audioStreams: {\n        availableStreams: [],\n        activeStream: undefined\n      },\n      settings: {\n        show: false,\n        standardControl: false,\n        audioControl: false,\n        resolutionControl: false,\n        subtitleControl: false\n      },\n      nextEpisode: this.type === 'serie' ? {\n        timeLeft: null,\n        internalID: null,\n        season: null,\n        episode: null,\n        show: false,\n        foundNextEpisode: false\n      } : undefined,\n      videoPaused: true,\n      isBuffering: true,\n      title: props.title,\n      season: props.season,\n      episode: props.episode,\n      show: props.show\n    };\n    this.enterFullScreen = this.enterFullScreen.bind(this);\n    this.togglePlay = this.togglePlay.bind(this);\n    this.seek = this.seek.bind(this);\n    this.startSeek = this.startSeek.bind(this);\n    this.toggleSettings = this.toggleSettings.bind(this);\n    this.updateSeekTime = this.updateSeekTime.bind(this);\n    this.pause = this.pause.bind(this);\n    this.play = this.play.bind(this);\n    this.showResolutions = this.showResolutions.bind(this);\n    this.showAudioStreams = this.showAudioStreams.bind(this);\n    this.showSubtitles = this.showSubtitles.bind(this);\n    this.showStandardSettings = this.showStandardSettings.bind(this);\n    this.changeVolume = this.changeVolume.bind(this);\n    this.showControls = this.showControls.bind(this);\n    this.setNextEpisodeID = this.setNextEpisodeID.bind(this);\n    this.playNextEpisode = this.playNextEpisode.bind(this);\n    this.getNextEpisodeID = this.getNextEpisodeID.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.video.pause();\n    clearInterval(this.updateCurrentTimeInterval);\n    this.video.ontimeupdate = undefined;\n  }\n\n  componentDidMount() {\n    this.video = document.getElementById('video');\n    this.video.isFullscreen = false; // The duration of the movie\n\n    this.video.realDuration = 999; // The watchtime offset for the seekbar (since we change source on seek and HTML do not know the correct watchtime after we change source)\n\n    this.video.watchTimeOffset = 0; // True if we are currently seeking (Draging the seekbar);\n\n    this.video.isSeeking = false;\n    this.video.controls = false;\n    this.video.pauseTime = undefined;\n    this.source = document.createElement('source');\n    this.video.appendChild(this.source);\n    this.subtitle = document.getElementById('subtitle');\n    this.loadSources();\n    this.loadSubtitles();\n    this.loadAudioStreams();\n\n    if (this.type === 'serie') {\n      this.getNextEpisodeID();\n    }\n\n    this.video.ontimeupdate = () => {\n      if (!this.video.isSeeking) {\n        let percentage = (this.video.currentTime + this.video.watchTimeOffset) / this.video.realDuration * 100;\n        document.getElementById('seekbar').value = percentage;\n        this.updateSeekTime();\n\n        if (this.type === 'serie' && this.video.getRealWatchtime() >= this.video.realDuration - 40 && this.state.nextEpisode.foundNextEpisode) {\n          this.displayNextEpisodeBox();\n        }\n      }\n\n      if (this.state.isBuffering) {\n        this.setState({\n          isBuffering: false\n        });\n      }\n    }; // Returns the 'real' current time\n\n\n    this.video.getRealWatchtime = () => {\n      return this.video.watchTimeOffset + this.video.currentTime;\n    };\n\n    this.video.onpause = () => {\n      this.video.pauseTime = new Date();\n      this.setState({\n        videoPaused: true\n      });\n    };\n\n    this.video.onplay = () => {\n      if (this.video.pauseTime != undefined) {\n        let currentTime = new Date();\n        let secondsSincePause = (currentTime.getTime() - this.video.pauseTime.getTime()) / 1000; // TODO: This value needs to be checked, not sure what is needed\n\n        if (secondsSincePause > 15) {\n          this.video.pauseTime = undefined;\n          this.seek();\n        }\n      }\n\n      this.setState({\n        videoPaused: false,\n        isBuffering: false\n      });\n    }; // Show spinner on buffer\n\n\n    this.video.onwaiting = () => {\n      this.setState({\n        isBuffering: true\n      });\n    };\n  }\n\n  updateServerToken(token, cb) {\n    this.serverToken = token;\n    cb();\n  }\n\n  show(time = 0) {\n    document.getElementById('videoContainer').style.display = 'block';\n    this.togglePlay();\n  }\n\n  setNextEpisodeID(id, season, episode, foundNextEpisode) {\n    console.log(`Found next episode: ${foundNextEpisode}, episodeID: ${id}`);\n    let nextEpisode = this.state.nextEpisode;\n\n    if (foundNextEpisode) {\n      nextEpisode.internalID = id;\n      nextEpisode.foundNextEpisode = true;\n      nextEpisode.season = season;\n      nextEpisode.episode = episode;\n    } else {\n      nextEpisode.foundNextEpisode = false;\n    }\n\n    this.setState({\n      nextEpisode: nextEpisode\n    });\n  }\n\n  getNextEpisodeID() {\n    validateServerAccess(this.server, serverToken => {\n      console.log(\"EP: \" + this.state.episode);\n      fetch(`${this.server.server_ip}/api/series/getNextEpisode?serie_id=${this.state.show}&season=${this.state.season}&episode=${this.state.episode}&token=${serverToken}`).then(r => r.json()).then(result => {\n        this.setNextEpisodeID(result.internalID, result.season, result.episode, result.foundEpisode);\n      });\n    });\n  }\n\n  displayNextEpisodeBox() {\n    let nextEpisode = this.state.nextEpisode;\n    let timeLeft = Math.floor(this.video.realDuration - this.video.getRealWatchtime());\n\n    if (timeLeft === 0) {\n      this.playNextEpisode();\n    } else {\n      nextEpisode.timeLeft = timeLeft;\n      nextEpisode.show = true;\n    }\n\n    this.setState({\n      nextEpisode: nextEpisode\n    });\n  }\n\n  async playNextEpisode() {\n    let nextEpisode = this.state.nextEpisode;\n    this.internalID = this.state.nextEpisode.internalID;\n    nextEpisode.timeLeft = null;\n    nextEpisode.internalID = null;\n    nextEpisode.show = false;\n    nextEpisode.foundNextEpisode = false;\n    this.video.watchTimeOffset = 0;\n    await this.loadAudioStreams();\n    this.loadSources(true).then(() => {\n      this.loadSubtitles();\n\n      if (this.onChangeEpisode != undefined) {\n        this.onChangeEpisode(this.state.nextEpisode.season, this.state.nextEpisode.episode, this.internalID);\n      }\n    });\n    this.setState({\n      nextEpisode: nextEpisode\n    });\n  }\n\n  loadSubtitles() {\n    return new Promise(resolve => {\n      validateServerAccess(this.server, serverToken => {\n        fetch(`${this.server.server_ip}/api/subtitles/list?content=${this.internalID}&type=${this.type}&token=${serverToken}`).then(r => r.json()).then(result => {\n          let noSub = {\n            id: -1,\n            language: 'None'\n          };\n          let stateSubs = this.state.subtitles;\n          stateSubs.availableSubtitles = result.subtitles;\n          stateSubs.availableSubtitles.push(noSub); // If a subtitle was already selected (on automatic change episode), try to find a subtitle with the same language and set that as active.\n\n          let found = false;\n\n          if (this.state.subtitles.activeSubtitle !== undefined) {\n            for (let subtitle of result.subtitles) {\n              if (this.state.subtitles.activeSubtitle.language === subtitle.language) {\n                found = true;\n                this.changeSubtitle(subtitle);\n                break;\n              }\n            }\n          }\n\n          if (!found) {\n            this.changeSubtitle(noSub);\n          }\n\n          this.setState({\n            subtitles: stateSubs\n          });\n          resolve();\n        }).catch(e => {\n          // TODO: Error handling\n          console.log(e);\n          resolve();\n        });\n      });\n    });\n  }\n\n  loadAudioStreams() {\n    return new Promise(resolve => {\n      validateServerAccess(this.server, serverToken => {\n        fetch(`${this.server.server_ip}/api/video/${this.internalID}/getLanguages?type=${this.type}&token=${serverToken}`).then(r => r.json()).then(result => {\n          console.log(result);\n          let currentState = this.state.audioStreams;\n          currentState.availableStreams = result;\n          this.setState({\n            audioStreams: currentState\n          }, () => resolve());\n        });\n      });\n    });\n  }\n\n  loadSources(autoplay = false) {\n    return new Promise(resolve => {\n      validateServerAccess(this.server, serverToken => {\n        // Set the duration of the video\n        fetch(`${this.server.server_ip}/api/video/${this.internalID}/getDuration?type=${this.type}&token=${serverToken}`).then(r => r.json()).then(data => {\n          this.video.realDuration = data.duration;\n        }); // Get the current time for this video\n\n        fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/get?type=${this.type}&token=${serverToken}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(r => r.json()).then(time => {\n          time = time.time;\n          this.video.watchTimeOffset = time; // Get the available resolutions for this video\n\n          fetch(`${this.server.server_ip}/api/video/${this.internalID}/getResolution?type=${this.type}&token=${serverToken}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(r => r.json()).then(result => {\n            // If we already have selected an audio stream, change to that one.\n            let audio = '';\n            let audioState = this.state.audioStreams;\n\n            if (this.state.audioStreams.activeStream !== undefined) {\n              for (let stream of this.state.audioStreams.availableStreams) {\n                if (this.state.audioStreams.activeStream.shortName === stream.shortName) {\n                  audio = `&audio=${stream.stream_index}`;\n                  audioState.activeStream = stream;\n                  break;\n                }\n              }\n            } // If we didn't find a match for the langauges, (maybe this video don't have that language): Set the activeAudioStream to undefined (which will give us default audio for the file)\n\n\n            if (audio === '') {\n              audioState.activeStream = undefined;\n            } // Change the available resolutions\n\n\n            let resolutions = this.state.resolutions;\n            resolutions.availableResolutions = result.resolutions;\n\n            if (result.directplay) {\n              this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=directplay${audio}`);\n              resolutions.activeResolution = 'directplay';\n              resolutions.availableResolutions.push('directplay');\n            } else {\n              this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=1080P${audio}`);\n              resolutions.activeResolution = '1080P';\n            } // Save the new resolution state and audioState\n\n\n            this.setState({\n              resolutions: resolutions,\n              audioStreams: audioState\n            });\n            this.video.load();\n\n            if (autoplay) {\n              this.video.play();\n            }\n\n            resolve();\n          });\n        });\n      });\n    });\n  }\n\n  getSettingElements() {\n    let elements = []; // If we should display resulution controls\n\n    if (this.state.settings.resolutionControl) {\n      console.log(this.state.resolutions);\n\n      for (let resolution of this.state.resolutions.availableResolutions) {\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          key: this.elementCounter,\n          className: resolution === this.state.resolutions.activeResolution ? Styles.active : '',\n          onClick: () => this.changeResolution(resolution),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 21\n          }\n        }, resolution));\n        this.elementCounter++;\n      } // If we should display subtitle controls\n\n    } else if (this.state.settings.subtitleControl) {\n      for (let subtitle of this.state.subtitles.availableSubtitles) {\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          style: {\n            position: 'relative'\n          },\n          key: this.elementCounter,\n          className: this.state.subtitles.activeSubtitle != undefined && subtitle.id === this.state.subtitles.activeSubtitle.id ? Styles.active : '',\n          onClick: () => this.changeSubtitle(subtitle),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 21\n          }\n        }, subtitle.extracted && __jsx(\"img\", {\n          className: Styles.subtitleVariant,\n          src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/check.png`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 29\n          }\n        }), !subtitle.extracted && subtitle.synced && __jsx(\"img\", {\n          className: Styles.subtitleVariant,\n          src: `${process.env.NEXT_PUBLIC_SERVER_URL}/images/hourglass.png`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 29\n          }\n        }), subtitle.language));\n        elements.push(__jsx(\"hr\", {\n          style: {\n            margin: '0',\n            padding: '0'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 31\n          }\n        }));\n        this.elementCounter++;\n      } // If we should display audio controls\n\n    } else if (this.state.settings.audioControl) {\n      for (let stream of this.state.audioStreams.availableStreams) {\n        console.log(stream);\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          key: this.elementCounter,\n          className: this.state.audioStreams.activeStream != undefined && stream.id === this.state.audioStreams.activeStream.id ? Styles.active : '',\n          onClick: () => this.changeAudioStream(stream),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 21\n          }\n        }, stream.longName));\n        this.elementCounter++;\n      } // If we should display standard controls\n\n    } else {\n      elements.push(__jsx(\"a\", {\n        href: \"#\",\n        key: this.elementCounter,\n        onClick: this.showResolutions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 17\n        }\n      }, \"Quality\"));\n      this.elementCounter++;\n      elements.push(__jsx(\"a\", {\n        href: \"#\",\n        key: this.elementCounter,\n        onClick: this.showAudioStreams,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 17\n        }\n      }, \"Audio\"));\n      this.elementCounter++;\n      elements.push(__jsx(\"a\", {\n        href: \"#\",\n        key: this.elementCounter,\n        onClick: this.showSubtitles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }\n      }, \"Subtitles\"));\n      this.elementCounter++;\n    }\n\n    return elements;\n  }\n\n  changeResolution(resolution) {\n    validateServerAccess(this.server, serverToken => {\n      let audioSource = \"\";\n      let activeStream = this.state.audioStreams.activeStream;\n\n      if (activeStream != undefined) {\n        audioSource = `&audio=${activeStream.stream_index}`;\n      }\n\n      this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${resolution}${audioSource}`); // Change the watchTimeOffset to proberly sync subtitles and seekbar.\n\n      this.video.watchTimeOffset = this.video.getRealWatchtime();\n      this.changeSubtitle(this.state.subtitles.activeSubtitle);\n      this.video.load();\n      this.video.play(); // Change the active resolution in the state\n\n      let resolutions = this.state.resolutions;\n      resolutions.activeResolution = resolution;\n      this.setState({\n        resolutions: resolutions\n      });\n    });\n  }\n\n  changeSubtitle(subtitle) {\n    let stateSubs = this.state.subtitles;\n\n    if (subtitle == undefined) {\n      return;\n    } // Fix to prevent subs getting \"stuck\" when seeking\n\n\n    this.video.textTracks[0].mode = 'hidden';\n\n    if (subtitle.id === -1) {\n      this.video.textTracks[0].mode = 'hidden';\n      stateSubs.activeSubtitle = subtitle;\n      this.setState({\n        subtitles: stateSubs\n      });\n      return;\n    }\n\n    validateServerAccess(this.server, serverToken => {\n      this.subtitle.setAttribute('src', `${this.server.server_ip}/api/subtitles/get?id=${subtitle.id}&type=${this.type}&start=${this.video.getRealWatchtime() - this.video.currentTime}&token=${serverToken}`);\n      this.video.textTracks[0].mode = 'showing';\n      stateSubs.activeSubtitle = subtitle;\n      this.setState({\n        subtitles: stateSubs\n      });\n    });\n  }\n\n  changeAudioStream(stream) {\n    // If we changed to the same audio stream\n    if (this.state.audioStreams.activeStream !== undefined && stream.id === this.state.audioStreams.activeStream.id) {\n      return;\n    }\n\n    validateServerAccess(this.server, serverToken => {\n      this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${this.state.resolutions.activeResolution}&audio=${stream.stream_index}`);\n      this.video.watchTimeOffset = this.video.getRealWatchtime();\n      this.changeSubtitle(this.state.subtitles.activeSubtitle);\n      this.video.load();\n      this.video.play();\n      let streams = this.state.audioStreams;\n      streams.activeStream = stream;\n      this.setState({\n        audioStreams: streams\n      });\n    });\n  }\n\n  enterFullScreen() {\n    let videoContainer = document.getElementById('videoContainer');\n\n    try {\n      if (!this.video.isFullscreen) {\n        if (this.video.requestFullscreen) {\n          videoContainer.requestFullscreen();\n        } else if (this.video.mozRequestFullScreen) {\n          /* Firefox */\n          videoContainer.mozRequestFullScreen();\n        } else if (this.video.webkitRequestFullscreen) {\n          /* Chrome, Safari & Opera */\n          videoContainer.webkitRequestFullscreen();\n        } else if (this.video.msRequestFullscreen) {\n          /* IE/Edge */\n          videoContainer.msRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          /* Firefox */\n          document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n          /* Chrome, Safari and Opera */\n          document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n          /* IE/Edge */\n          document.msExitFullscreen();\n        }\n      }\n\n      this.video.isFullscreen = !this.video.isFullscreen;\n    } catch (e) {}\n  }\n\n  togglePlay() {\n    if (this.video.paused) {\n      this.video.play();\n\n      if (this.updateCurrentTimeInterval !== undefined) {\n        clearInterval(this.updateCurrentTimeInterval);\n      }\n\n      this.updateCurrentTimeInterval = setInterval(() => {\n        validateServerAccess(this.server, serverToken => {\n          fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/set?type=${this.type}&time=${this.video.getRealWatchtime()}&videoDuration=${this.video.realDuration}&token=${serverToken}`);\n        });\n      }, 5000);\n    } else {\n      clearInterval(this.updateCurrentTimeInterval);\n      this.video.pause();\n    }\n  }\n\n  seek(e) {\n    let vidTime = document.getElementById('seekbar').value / 100 * this.video.realDuration;\n    let quality = this.state.resolutions.activeResolution !== '' ? this.state.resolutions.activeResolution : '1080P';\n    let audio = this.state.audioStreams.activeStream !== undefined ? `&audio=${this.state.audioStreams.activeStream.stream_index}` : '';\n    validateServerAccess(this.server, serverToken => {\n      this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${vidTime}&quality=${quality}${audio}`);\n      this.video.load();\n      this.video.play();\n      this.video.watchTimeOffset = vidTime;\n      this.video.isSeeking = false;\n      this.changeSubtitle(this.state.subtitles.activeSubtitle);\n    });\n  }\n\n  startSeek() {\n    this.video.isSeeking = true;\n  }\n\n  toggleSettings() {\n    let settings = this.state.settings;\n    settings.show = !settings.show;\n    settings.resolutionControl = false;\n    settings.audioControl = false;\n    settings.subtitleControl = false;\n    this.setState({\n      settings: settings\n    });\n  }\n\n  showResolutions() {\n    let settings = this.state.settings;\n    settings.resolutionControl = true;\n    this.setState({\n      settings: settings\n    });\n  }\n\n  showSubtitles() {\n    let settings = this.state.settings;\n    settings.subtitleControl = true;\n    this.setState({\n      settings: settings\n    });\n  }\n\n  showAudioStreams() {\n    let settings = this.state.settings;\n    settings.audioControl = true;\n    this.setState({\n      settings: settings\n    });\n  }\n\n  showStandardSettings() {\n    let settings = this.state.settings;\n    settings.resolutionControl = false;\n    settings.audioControl = false;\n    settings.subtitleControl = false;\n    this.setState({\n      settings: settings\n    });\n  }\n\n  updateSeekTime() {\n    let range = document.getElementById('seekbar');\n    let rangeV = document.getElementById('seekTime');\n    let newValue = range.value;\n    let newPosition = 10 - newValue * 0.2;\n    let seconds = Math.floor(range.value / 100 * this.video.realDuration);\n    let minutes = Math.floor(seconds / 60);\n    let hours = Math.floor(minutes / 60);\n    minutes = minutes % 60;\n    seconds = seconds % 60;\n    seconds = seconds >= 10 ? seconds : `0${seconds}`;\n    minutes = minutes >= 10 ? minutes : `0${minutes}`;\n    hours = hours >= 10 ? hours : `0${hours}`;\n    let time = hours !== 0 ? hours + ':' : '';\n    time += minutes + ':' + seconds;\n    rangeV.innerHTML = `<span>${time}</span>`;\n    rangeV.style.left = `calc(${newValue}% + (${newPosition}px))`;\n  }\n\n  play() {\n    this.video.play();\n  }\n\n  pause() {\n    this.video.pause();\n  }\n\n  getActiveSettingsName() {\n    if (this.state.settings.subtitleControl) {\n      return 'Subtitles';\n    }\n\n    if (this.state.settings.audioControl) {\n      return 'Audio';\n    }\n\n    if (this.state.settings.resolutionControl) {\n      return 'Quality';\n    }\n  }\n\n  changeVolume(e) {\n    this.video.volume = e.target.value / 100;\n  }\n\n  showControls() {\n    document.getElementById('controls').classList.add(Styles.controlsActive);\n    document.getElementById('overlay').classList.add(Styles.controlsActive);\n    document.getElementById('transparentOverlay').classList.add(Styles.controlsActive);\n    document.getElementById('videoContainer').style.cursor = 'auto';\n\n    if (this.controlTimeout != undefined) {\n      clearTimeout(this.controlTimeout);\n    }\n\n    this.controlTimeout = setTimeout(() => {\n      document.getElementById('controls').classList.remove(Styles.controlsActive);\n      document.getElementById('overlay').classList.remove(Styles.controlsActive);\n      document.getElementById('transparentOverlay').classList.remove(Styles.controlsActive);\n      document.getElementById('videoContainer').style.cursor = 'none';\n    }, 5000);\n  }\n\n  setTitle(title) {\n    this.setState({\n      title: title\n    });\n  }\n\n  setEpisode(episode, cb) {\n    this.setState({\n      episode: episode\n    }, () => {\n      cb();\n    });\n  }\n\n  setSeason(season, cb) {\n    this.setState({\n      season: season\n    }, () => {\n      cb();\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 13\n      }\n    }, __jsx(\"script\", {\n      src: \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 17\n      }\n    })), __jsx(\"div\", {\n      className: Styles.videoContainer,\n      id: \"videoContainer\",\n      onMouseMove: this.showControls,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 13\n      }\n    }, __jsx(\"video\", {\n      crossOrigin: \"anonymous\",\n      id: \"video\",\n      className: Styles.videoPlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 17\n      }\n    }, __jsx(\"track\", {\n      id: \"subtitle\",\n      kind: \"subtitles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: Styles.transparentOverlay,\n      id: \"transparentOverlay\",\n      onClick: this.togglePlay,\n      onDoubleClick: this.enterFullScreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 17\n      }\n    }), this.state.isBuffering && __jsx(\"div\", {\n      className: Styles.loadingOuter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      class: Styles.loadingInner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 25\n      }\n    }))), this.state.nextEpisode != undefined && this.state.nextEpisode.show && __jsx(\"div\", {\n      className: Styles.nextEpisode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 21\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 25\n      }\n    }, \"N\\xE4sta avsnitt spelas upp om \", __jsx(\"span\", {\n      id: \"timeToNextEpisode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 57\n      }\n    }, this.state.nextEpisode.timeLeft), \" sekunder\"), __jsx(\"button\", {\n      id: \"playNextEpisode\",\n      onClick: this.playNextEpisode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 25\n      }\n    }, \"Starta nu\"), __jsx(\"button\", {\n      id: \"cancelNextEpisode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 25\n      }\n    }, \"Avbryt\")), __jsx(\"div\", {\n      className: Styles.overlay,\n      id: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: Styles.back,\n      onClick: () => Router.back(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 21\n      }\n    }), this.type === 'serie' && __jsx(React.Fragment, null, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 29\n      }\n    }, this.state.title), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 29\n      }\n    }, \"Season \", this.state.season, \" - Episode \", this.state.episode)), this.type === 'movie' && __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 25\n      }\n    }, this.state.title)), __jsx(\"div\", {\n      className: Styles.controller,\n      id: \"controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 17\n      }\n    }, this.state.videoPaused && __jsx(\"div\", {\n      className: `${Styles.playButton} ${Styles.playPause}`,\n      onClick: this.togglePlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 25\n      }\n    }), !this.state.videoPaused && __jsx(\"div\", {\n      className: `${Styles.pauseButton} ${Styles.playPause}`,\n      onClick: this.togglePlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      className: Styles.seekWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: Styles.seekTime,\n      id: \"seekTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 25\n      }\n    }), __jsx(\"input\", {\n      type: \"range\",\n      id: \"seekbar\",\n      name: \"seekbar\",\n      min: \"0\",\n      max: \"100\",\n      step: \"0.01\",\n      className: Styles.seekbar,\n      onMouseDown: this.startSeek,\n      onMouseUp: this.seek,\n      onInput: this.updateSeekTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 25\n      }\n    })), __jsx(\"div\", {\n      className: Styles.settingsBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: Styles.audioImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 25\n      }\n    }), __jsx(\"input\", {\n      className: Styles.volumeControl,\n      type: \"range\",\n      id: \"volumeControl\",\n      name: \"volume\",\n      min: \"0\",\n      max: \"100\",\n      step: \"0.01\",\n      onChange: this.changeVolume,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      onClick: this.toggleSettings,\n      className: Styles.settingsButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      className: Styles.fullscreenImage,\n      onClick: this.enterFullScreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 25\n      }\n    }), this.state.settings.show && __jsx(\"div\", {\n      className: Styles.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: Styles.settingsBack,\n      onClick: this.showStandardSettings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 33\n      }\n    }, __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 106\n      }\n    }, this.getActiveSettingsName())), __jsx(\"hr\", {\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 33\n      }\n    }), this.getSettingElements())))));\n  }\n\n}","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/components/videoComponent.js"],"names":["Styles","Head","Router","validateServerAccess","VideoComponent","React","Component","constructor","props","video","undefined","source","subtitle","controlTimeout","updateCurrentTimeInterval","elementCounter","onTimeChange","onChangeEpisode","server","serverToken","type","Movie","internalID","state","subtitles","availableSubtitles","activeSubtitle","resolutions","availableResolutions","activeResolution","audioStreams","availableStreams","activeStream","settings","show","standardControl","audioControl","resolutionControl","subtitleControl","nextEpisode","timeLeft","season","episode","foundNextEpisode","videoPaused","isBuffering","title","enterFullScreen","bind","togglePlay","seek","startSeek","toggleSettings","updateSeekTime","pause","play","showResolutions","showAudioStreams","showSubtitles","showStandardSettings","changeVolume","showControls","setNextEpisodeID","playNextEpisode","getNextEpisodeID","componentWillUnmount","clearInterval","ontimeupdate","componentDidMount","document","getElementById","isFullscreen","realDuration","watchTimeOffset","isSeeking","controls","pauseTime","createElement","appendChild","loadSources","loadSubtitles","loadAudioStreams","percentage","currentTime","value","getRealWatchtime","displayNextEpisodeBox","setState","onpause","Date","onplay","secondsSincePause","getTime","onwaiting","updateServerToken","token","cb","time","style","display","id","console","log","fetch","server_ip","then","r","json","result","foundEpisode","Math","floor","Promise","resolve","noSub","language","stateSubs","push","found","changeSubtitle","catch","e","currentState","autoplay","data","duration","method","headers","audio","audioState","stream","shortName","stream_index","directplay","setAttribute","load","getSettingElements","elements","resolution","active","changeResolution","position","extracted","subtitleVariant","process","env","NEXT_PUBLIC_SERVER_URL","synced","margin","padding","changeAudioStream","longName","audioSource","textTracks","mode","streams","videoContainer","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","paused","setInterval","vidTime","quality","range","rangeV","newValue","newPosition","seconds","minutes","hours","innerHTML","left","getActiveSettingsName","volume","target","classList","add","controlsActive","cursor","clearTimeout","setTimeout","remove","setTitle","setEpisode","setSeason","render","videoPlayer","transparentOverlay","loadingOuter","loadingInner","overlay","back","controller","playButton","playPause","pauseButton","seekWrapper","seekTime","seekbar","settingsBox","audioImage","volumeControl","settingsButton","fullscreenImage","settingsBack"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,oBAAP,MAAiC,6BAAjC;AAEA,eAAe,MAAMC,cAAN,SAA6BC,KAAK,CAACC,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAaC,SAAb,CAHe,CAIf;;AACA,SAAKC,MAAL,GAAcD,SAAd,CALe,CAMf;;AACA,SAAKE,QAAL,GAAgBF,SAAhB,CAPe,CAQf;;AACA,SAAKG,cAAL,GAAsBH,SAAtB,CATe,CAUf;;AACA,SAAKI,yBAAL,GAAiCJ,SAAjC,CAXe,CAYf;;AACA,SAAKK,cAAL,GAAsB,CAAtB,CAbe,CAcf;;AACA,SAAKC,YAAL,GAAoBR,KAAK,CAACQ,YAA1B,CAfe,CAgBf;;AAEA,SAAKC,eAAL,GAAuBT,KAAK,CAACS,eAA7B;AAEA,SAAKC,MAAL,GAAcV,KAAK,CAACU,MAApB;AACA,SAAKC,WAAL,GAAmBX,KAAK,CAACW,WAAzB;AACA,SAAKC,IAAL,GAAYZ,KAAK,CAACa,KAAN,IAAeX,SAAf,GAA2B,OAA3B,GAAqC,OAAjD;AACA,SAAKY,UAAL,GAAkBd,KAAK,CAACc,UAAxB;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AACPC,QAAAA,kBAAkB,EAAE,EADb;AAEPC,QAAAA,cAAc,EAAEhB;AAFT,OADF;AAKTiB,MAAAA,WAAW,EAAE;AACTC,QAAAA,oBAAoB,EAAE,EADb;AAETC,QAAAA,gBAAgB,EAAE;AAFT,OALJ;AASTC,MAAAA,YAAY,EAAE;AACVC,QAAAA,gBAAgB,EAAE,EADR;AAEVC,QAAAA,YAAY,EAAEtB;AAFJ,OATL;AAaTuB,MAAAA,QAAQ,EAAE;AACNC,QAAAA,IAAI,EAAE,KADA;AAENC,QAAAA,eAAe,EAAE,KAFX;AAGNC,QAAAA,YAAY,EAAE,KAHR;AAINC,QAAAA,iBAAiB,EAAE,KAJb;AAKNC,QAAAA,eAAe,EAAE;AALX,OAbD;AAoBTC,MAAAA,WAAW,EAAE,KAAKnB,IAAL,KAAc,OAAd,GAAwB;AACjCoB,QAAAA,QAAQ,EAAE,IADuB;AAEjClB,QAAAA,UAAU,EAAE,IAFqB;AAGjCmB,QAAAA,MAAM,EAAE,IAHyB;AAIjCC,QAAAA,OAAO,EAAE,IAJwB;AAKjCR,QAAAA,IAAI,EAAE,KAL2B;AAMjCS,QAAAA,gBAAgB,EAAE;AANe,OAAxB,GAOTjC,SA3BK;AA4BTkC,MAAAA,WAAW,EAAE,IA5BJ;AA6BTC,MAAAA,WAAW,EAAE,IA7BJ;AA8BTC,MAAAA,KAAK,EAAEtC,KAAK,CAACsC,KA9BJ;AA+BTL,MAAAA,MAAM,EAAEjC,KAAK,CAACiC,MA/BL;AAgCTC,MAAAA,OAAO,EAAElC,KAAK,CAACkC,OAhCN;AAiCTR,MAAAA,IAAI,EAAE1B,KAAK,CAAC0B;AAjCH,KAAb;AAoCA,SAAKa,eAAL,GAA4B,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA5B;AACA,SAAKC,UAAL,GAA4B,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAA5B;AACA,SAAKE,IAAL,GAA4B,KAAKA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAA5B;AACA,SAAKG,SAAL,GAA4B,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAA5B;AACA,SAAKI,cAAL,GAA4B,KAAKA,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAA5B;AACA,SAAKK,cAAL,GAA4B,KAAKA,cAAL,CAAoBL,IAApB,CAAyB,IAAzB,CAA5B;AACA,SAAKM,KAAL,GAA4B,KAAKA,KAAL,CAAWN,IAAX,CAAgB,IAAhB,CAA5B;AACA,SAAKO,IAAL,GAA4B,KAAKA,IAAL,CAAUP,IAAV,CAAe,IAAf,CAA5B;AACA,SAAKQ,eAAL,GAA4B,KAAKA,eAAL,CAAqBR,IAArB,CAA0B,IAA1B,CAA5B;AACA,SAAKS,gBAAL,GAA4B,KAAKA,gBAAL,CAAsBT,IAAtB,CAA2B,IAA3B,CAA5B;AACA,SAAKU,aAAL,GAA4B,KAAKA,aAAL,CAAmBV,IAAnB,CAAwB,IAAxB,CAA5B;AACA,SAAKW,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BX,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKY,YAAL,GAA4B,KAAKA,YAAL,CAAkBZ,IAAlB,CAAuB,IAAvB,CAA5B;AACA,SAAKa,YAAL,GAA4B,KAAKA,YAAL,CAAkBb,IAAlB,CAAuB,IAAvB,CAA5B;AACA,SAAKc,gBAAL,GAA4B,KAAKA,gBAAL,CAAsBd,IAAtB,CAA2B,IAA3B,CAA5B;AACA,SAAKe,eAAL,GAA4B,KAAKA,eAAL,CAAqBf,IAArB,CAA0B,IAA1B,CAA5B;AACA,SAAKgB,gBAAL,GAA4B,KAAKA,gBAAL,CAAsBhB,IAAtB,CAA2B,IAA3B,CAA5B;AACH;;AAEDiB,EAAAA,oBAAoB,GAAG;AACnB,SAAKxD,KAAL,CAAW6C,KAAX;AACAY,IAAAA,aAAa,CAAC,KAAKpD,yBAAN,CAAb;AACA,SAAKL,KAAL,CAAW0D,YAAX,GAA0BzD,SAA1B;AACH;;AAED0D,EAAAA,iBAAiB,GAAG;AAChB,SAAK3D,KAAL,GAAa4D,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAb;AACA,SAAK7D,KAAL,CAAW8D,YAAX,GAA0B,KAA1B,CAFgB,CAIhB;;AACA,SAAK9D,KAAL,CAAW+D,YAAX,GAA0B,GAA1B,CALgB,CAMhB;;AACA,SAAK/D,KAAL,CAAWgE,eAAX,GAA6B,CAA7B,CAPgB,CAQhB;;AACA,SAAKhE,KAAL,CAAWiE,SAAX,GAAuB,KAAvB;AACA,SAAKjE,KAAL,CAAWkE,QAAX,GAAsB,KAAtB;AACA,SAAKlE,KAAL,CAAWmE,SAAX,GAAuBlE,SAAvB;AAGA,SAAKC,MAAL,GAAc0D,QAAQ,CAACQ,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAKpE,KAAL,CAAWqE,WAAX,CAAuB,KAAKnE,MAA5B;AAEA,SAAKC,QAAL,GAAgByD,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;AAEA,SAAKS,WAAL;AACA,SAAKC,aAAL;AACA,SAAKC,gBAAL;;AAEA,QAAI,KAAK7D,IAAL,KAAc,OAAlB,EAA2B;AACvB,WAAK4C,gBAAL;AACH;;AAGD,SAAKvD,KAAL,CAAW0D,YAAX,GAA0B,MAAM;AAC5B,UAAI,CAAC,KAAK1D,KAAL,CAAWiE,SAAhB,EAA2B;AACvB,YAAIQ,UAAU,GAAI,CAAC,KAAKzE,KAAL,CAAW0E,WAAX,GAAyB,KAAK1E,KAAL,CAAWgE,eAArC,IAAwD,KAAKhE,KAAL,CAAW+D,YAApE,GAAoF,GAArG;AACAH,QAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCc,KAAnC,GAA2CF,UAA3C;AACA,aAAK7B,cAAL;;AAEA,YAAI,KAAKjC,IAAL,KAAc,OAAd,IAAyB,KAAKX,KAAL,CAAW4E,gBAAX,MAAiC,KAAK5E,KAAL,CAAW+D,YAAX,GAA0B,EAApF,IAA0F,KAAKjD,KAAL,CAAWgB,WAAX,CAAuBI,gBAArH,EAAuI;AACnI,eAAK2C,qBAAL;AACH;AACJ;;AACD,UAAG,KAAK/D,KAAL,CAAWsB,WAAd,EAA2B;AACvB,aAAK0C,QAAL,CAAc;AAAC1C,UAAAA,WAAW,EAAE;AAAd,SAAd;AACH;AACJ,KAbD,CA5BgB,CA2ChB;;;AACA,SAAKpC,KAAL,CAAW4E,gBAAX,GAA8B,MAAM;AAChC,aAAO,KAAK5E,KAAL,CAAWgE,eAAX,GAA6B,KAAKhE,KAAL,CAAW0E,WAA/C;AACH,KAFD;;AAIA,SAAK1E,KAAL,CAAW+E,OAAX,GAAqB,MAAM;AACvB,WAAK/E,KAAL,CAAWmE,SAAX,GAAuB,IAAIa,IAAJ,EAAvB;AACA,WAAKF,QAAL,CAAc;AAAC3C,QAAAA,WAAW,EAAE;AAAd,OAAd;AACH,KAHD;;AAIA,SAAKnC,KAAL,CAAWiF,MAAX,GAAoB,MAAM;AACtB,UAAI,KAAKjF,KAAL,CAAWmE,SAAX,IAAwBlE,SAA5B,EAAuC;AACnC,YAAIyE,WAAW,GAAG,IAAIM,IAAJ,EAAlB;AACA,YAAIE,iBAAiB,GAAG,CAACR,WAAW,CAACS,OAAZ,KAAwB,KAAKnF,KAAL,CAAWmE,SAAX,CAAqBgB,OAArB,EAAzB,IAA2D,IAAnF,CAFmC,CAGnC;;AACA,YAAID,iBAAiB,GAAG,EAAxB,EAA4B;AACxB,eAAKlF,KAAL,CAAWmE,SAAX,GAAuBlE,SAAvB;AACA,eAAKwC,IAAL;AACH;AACJ;;AACD,WAAKqC,QAAL,CAAc;AAAC3C,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,WAAW,EAAE;AAAlC,OAAd;AACH,KAXD,CApDgB,CAgEhB;;;AACA,SAAKpC,KAAL,CAAWoF,SAAX,GAAuB,MAAM;AACzB,WAAKN,QAAL,CAAc;AAAC1C,QAAAA,WAAW,EAAE;AAAd,OAAd;AACH,KAFD;AAGH;;AAEDiD,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,EAAR,EAAY;AACzB,SAAK7E,WAAL,GAAmB4E,KAAnB;AACAC,IAAAA,EAAE;AACL;;AAED9D,EAAAA,IAAI,CAAC+D,IAAI,GAAC,CAAN,EAAS;AACT5B,IAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0C4B,KAA1C,CAAgDC,OAAhD,GAA0D,OAA1D;AACA,SAAKlD,UAAL;AACH;;AAEDa,EAAAA,gBAAgB,CAACsC,EAAD,EAAK3D,MAAL,EAAaC,OAAb,EAAsBC,gBAAtB,EAAwC;AACpD0D,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsB3D,gBAAiB,gBAAeyD,EAAG,EAAtE;AACA,QAAI7D,WAAW,GAAG,KAAKhB,KAAL,CAAWgB,WAA7B;;AAEA,QAAII,gBAAJ,EAAsB;AAClBJ,MAAAA,WAAW,CAACjB,UAAZ,GAAyB8E,EAAzB;AACA7D,MAAAA,WAAW,CAACI,gBAAZ,GAA+B,IAA/B;AACAJ,MAAAA,WAAW,CAACE,MAAZ,GAAqBA,MAArB;AACAF,MAAAA,WAAW,CAACG,OAAZ,GAAsBA,OAAtB;AACH,KALD,MAKO;AACHH,MAAAA,WAAW,CAACI,gBAAZ,GAA+B,KAA/B;AACH;;AACD,SAAK4C,QAAL,CAAc;AAAChD,MAAAA,WAAW,EAAEA;AAAd,KAAd;AACH;;AAEDyB,EAAAA,gBAAgB,GAAG;AACf7D,IAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/CkF,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAS,KAAK/E,KAAL,CAAWmB,OAAhC;AACA6D,MAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,uCAAsC,KAAKjF,KAAL,CAAWW,IAAK,WAAU,KAAKX,KAAL,CAAWkB,MAAO,YAAW,KAAKlB,KAAL,CAAWmB,OAAQ,UAASvB,WAAY,EAA/J,CAAL,CACCsF,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEMG,MAAM,IAAI;AACZ,aAAK9C,gBAAL,CAAsB8C,MAAM,CAACtF,UAA7B,EAAyCsF,MAAM,CAACnE,MAAhD,EAAwDmE,MAAM,CAAClE,OAA/D,EAAwEkE,MAAM,CAACC,YAA/E;AACH,OAJD;AAKH,KAPmB,CAApB;AAQH;;AAEDvB,EAAAA,qBAAqB,GAAG;AACpB,QAAI/C,WAAW,GAAG,KAAKhB,KAAL,CAAWgB,WAA7B;AACA,QAAIC,QAAQ,GAAGsE,IAAI,CAACC,KAAL,CAAW,KAAKtG,KAAL,CAAW+D,YAAX,GAA0B,KAAK/D,KAAL,CAAW4E,gBAAX,EAArC,CAAf;;AACA,QAAI7C,QAAQ,KAAK,CAAjB,EAAoB;AAChB,WAAKuB,eAAL;AACH,KAFD,MAEO;AACHxB,MAAAA,WAAW,CAACC,QAAZ,GAAuBA,QAAvB;AACAD,MAAAA,WAAW,CAACL,IAAZ,GAAmB,IAAnB;AACH;;AAED,SAAKqD,QAAL,CAAc;AAAChD,MAAAA,WAAW,EAAEA;AAAd,KAAd;AACH;;AAED,QAAMwB,eAAN,GAAwB;AACpB,QAAIxB,WAAW,GAAG,KAAKhB,KAAL,CAAWgB,WAA7B;AACA,SAAKjB,UAAL,GAAkB,KAAKC,KAAL,CAAWgB,WAAX,CAAuBjB,UAAzC;AACAiB,IAAAA,WAAW,CAACC,QAAZ,GAAuB,IAAvB;AACAD,IAAAA,WAAW,CAACjB,UAAZ,GAAyB,IAAzB;AACAiB,IAAAA,WAAW,CAACL,IAAZ,GAAmB,KAAnB;AACAK,IAAAA,WAAW,CAACI,gBAAZ,GAA+B,KAA/B;AACA,SAAKlC,KAAL,CAAWgE,eAAX,GAA6B,CAA7B;AAEA,UAAM,KAAKQ,gBAAL,EAAN;AACA,SAAKF,WAAL,CAAiB,IAAjB,EAAuB0B,IAAvB,CAA4B,MAAM;AAC9B,WAAKzB,aAAL;;AACA,UAAI,KAAK/D,eAAL,IAAwBP,SAA5B,EAAuC;AACnC,aAAKO,eAAL,CAAqB,KAAKM,KAAL,CAAWgB,WAAX,CAAuBE,MAA5C,EAAoD,KAAKlB,KAAL,CAAWgB,WAAX,CAAuBG,OAA3E,EAAoF,KAAKpB,UAAzF;AACH;AACJ,KALD;AAMA,SAAKiE,QAAL,CAAc;AAAChD,MAAAA,WAAW,EAAEA;AAAd,KAAd;AAEH;;AAEDyC,EAAAA,aAAa,GAAG;AACZ,WAAO,IAAIgC,OAAJ,CAAYC,OAAO,IAAI;AAC1B9G,MAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/CoF,QAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,+BAA8B,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,EAA/G,CAAL,CACCsF,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEMG,MAAM,IAAI;AACZ,cAAIM,KAAK,GAAG;AAACd,YAAAA,EAAE,EAAE,CAAC,CAAN;AAASe,YAAAA,QAAQ,EAAE;AAAnB,WAAZ;AACA,cAAIC,SAAS,GAAG,KAAK7F,KAAL,CAAWC,SAA3B;AACA4F,UAAAA,SAAS,CAAC3F,kBAAV,GAA+BmF,MAAM,CAACpF,SAAtC;AACA4F,UAAAA,SAAS,CAAC3F,kBAAV,CAA6B4F,IAA7B,CAAkCH,KAAlC,EAJY,CAMZ;;AACA,cAAII,KAAK,GAAG,KAAZ;;AACA,cAAI,KAAK/F,KAAL,CAAWC,SAAX,CAAqBE,cAArB,KAAwChB,SAA5C,EAAuD;AACnD,iBAAK,IAAIE,QAAT,IAAqBgG,MAAM,CAACpF,SAA5B,EAAuC;AACnC,kBAAI,KAAKD,KAAL,CAAWC,SAAX,CAAqBE,cAArB,CAAoCyF,QAApC,KAAiDvG,QAAQ,CAACuG,QAA9D,EAAwE;AACpEG,gBAAAA,KAAK,GAAG,IAAR;AACA,qBAAKC,cAAL,CAAoB3G,QAApB;AACA;AACH;AACJ;AACJ;;AAGD,cAAI,CAAC0G,KAAL,EAAY;AACR,iBAAKC,cAAL,CAAoBL,KAApB;AACH;;AACD,eAAK3B,QAAL,CAAc;AAAC/D,YAAAA,SAAS,EAAE4F;AAAZ,WAAd;AACAH,UAAAA,OAAO;AACV,SA1BD,EA2BCO,KA3BD,CA2BOC,CAAC,IAAI;AACR;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAYmB,CAAZ;AACAR,UAAAA,OAAO;AACV,SA/BD;AAgCH,OAjCmB,CAApB;AAkCH,KAnCM,CAAP;AAoCH;;AAEDhC,EAAAA,gBAAgB,GAAG;AACf,WAAO,IAAI+B,OAAJ,CAAYC,OAAO,IAAI;AAC1B9G,MAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/CoF,QAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,sBAAqB,KAAKF,IAAK,UAASD,WAAY,EAA3G,CAAL,CACCsF,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEMG,MAAM,IAAI;AACZP,UAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACA,cAAIc,YAAY,GAAG,KAAKnG,KAAL,CAAWO,YAA9B;AACA4F,UAAAA,YAAY,CAAC3F,gBAAb,GAAgC6E,MAAhC;AAEA,eAAKrB,QAAL,CAAc;AAACzD,YAAAA,YAAY,EAAE4F;AAAf,WAAd,EAA4C,MAAMT,OAAO,EAAzD;AACH,SARD;AASH,OAVmB,CAApB;AAYH,KAbM,CAAP;AAcH;;AAEDlC,EAAAA,WAAW,CAAC4C,QAAQ,GAAG,KAAZ,EAAmB;AAC1B,WAAO,IAAIX,OAAJ,CAAYC,OAAO,IAAI;AAC1B9G,MAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AACnD;AACAoF,QAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,qBAAoB,KAAKF,IAAK,UAASD,WAAY,EAA1G,CAAL,CACCsF,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEMmB,IAAI,IAAI;AACV,eAAKnH,KAAL,CAAW+D,YAAX,GAA0BoD,IAAI,CAACC,QAA/B;AACH,SAJD,EAFmD,CAQnD;;AACAtB,QAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,yBAAwB,KAAKF,IAAK,UAASD,WAAY,EAA9G,EAAiH;AAClH2G,UAAAA,MAAM,EAAE,KAD0G;AAElHC,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX;AAFyG,SAAjH,CAAL,CAMCtB,IAND,CAMMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EANX,EAOCF,IAPD,CAOMR,IAAI,IAAI;AACVA,UAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACA,eAAKxF,KAAL,CAAWgE,eAAX,GAA6BwB,IAA7B,CAFU,CAIV;;AACAM,UAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,uBAAsB,KAAKF,IAAK,UAASD,WAAY,EAA5G,EAA+G;AAChH2G,YAAAA,MAAM,EAAE,KADwG;AAEhHC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX;AAFuG,WAA/G,CAAL,CAMCtB,IAND,CAMMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EANX,EAOCF,IAPD,CAOMG,MAAM,IAAI;AAEZ;AACA,gBAAIoB,KAAK,GAAG,EAAZ;AACA,gBAAIC,UAAU,GAAG,KAAK1G,KAAL,CAAWO,YAA5B;;AACA,gBAAI,KAAKP,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,KAAyCtB,SAA7C,EAAwD;AACpD,mBAAK,IAAIwH,MAAT,IAAmB,KAAK3G,KAAL,CAAWO,YAAX,CAAwBC,gBAA3C,EAA6D;AACzD,oBAAI,KAAKR,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,CAAqCmG,SAArC,KAAmDD,MAAM,CAACC,SAA9D,EAAyE;AACrEH,kBAAAA,KAAK,GAAI,UAASE,MAAM,CAACE,YAAa,EAAtC;AACAH,kBAAAA,UAAU,CAACjG,YAAX,GAA0BkG,MAA1B;AACA;AACH;AACJ;AACJ,aAbW,CAgBZ;;;AACA,gBAAIF,KAAK,KAAK,EAAd,EAAkB;AACdC,cAAAA,UAAU,CAACjG,YAAX,GAA0BtB,SAA1B;AACH,aAnBW,CAqBZ;;;AACA,gBAAIiB,WAAW,GAAG,KAAKJ,KAAL,CAAWI,WAA7B;AACAA,YAAAA,WAAW,CAACC,oBAAZ,GAAmCgF,MAAM,CAACjF,WAA1C;;AAEA,gBAAIiF,MAAM,CAACyB,UAAX,EAAuB;AACnB,mBAAK1H,MAAL,CAAY2H,YAAZ,CAAyB,KAAzB,EAAiC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,UAAS8E,IAAK,sBAAqB+B,KAAM,EAAtK;AACArG,cAAAA,WAAW,CAACE,gBAAZ,GAA+B,YAA/B;AACAF,cAAAA,WAAW,CAACC,oBAAZ,CAAiCyF,IAAjC,CAAsC,YAAtC;AACH,aAJD,MAIO;AACH,mBAAK1G,MAAL,CAAY2H,YAAZ,CAAyB,KAAzB,EAAiC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,UAAS8E,IAAK,iBAAgB+B,KAAM,EAAjK;AACArG,cAAAA,WAAW,CAACE,gBAAZ,GAA+B,OAA/B;AACH,aAhCW,CAkCZ;;;AACA,iBAAK0D,QAAL,CAAc;AAAC5D,cAAAA,WAAW,EAAEA,WAAd;AAA2BG,cAAAA,YAAY,EAAEmG;AAAzC,aAAd;AAGA,iBAAKxH,KAAL,CAAW8H,IAAX;;AACA,gBAAIZ,QAAJ,EAAc;AACV,mBAAKlH,KAAL,CAAW8C,IAAX;AACH;;AACD0D,YAAAA,OAAO;AACV,WAlDD;AAmDH,SA/DD;AAgEC,OAzEmB,CAApB;AA0EH,KA3EM,CAAP;AA6EH;;AAEDuB,EAAAA,kBAAkB,GAAG;AACjB,QAAIC,QAAQ,GAAG,EAAf,CADiB,CAGjB;;AACA,QAAI,KAAKlH,KAAL,CAAWU,QAAX,CAAoBI,iBAAxB,EAA2C;AACvCgE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/E,KAAL,CAAWI,WAAvB;;AACA,WAAK,IAAI+G,UAAT,IAAuB,KAAKnH,KAAL,CAAWI,WAAX,CAAuBC,oBAA9C,EAAoE;AAChE6G,QAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,UAAA,GAAG,EAAE,KAAKtG,cAAtB;AAAsC,UAAA,SAAS,EAAE2H,UAAU,KAAK,KAAKnH,KAAL,CAAWI,WAAX,CAAuBE,gBAAtC,GAAyD7B,MAAM,CAAC2I,MAAhE,GAAyE,EAA1H;AAA8H,UAAA,OAAO,EAAE,MAAM,KAAKC,gBAAL,CAAsBF,UAAtB,CAA7I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiLA,UAAjL,CADJ;AAGA,aAAK3H,cAAL;AACH,OAPsC,CAU3C;;AACC,KAXD,MAWO,IAAI,KAAKQ,KAAL,CAAWU,QAAX,CAAoBK,eAAxB,EAAyC;AAC5C,WAAK,IAAI1B,QAAT,IAAqB,KAAKW,KAAL,CAAWC,SAAX,CAAqBC,kBAA1C,EAA8D;AAC1DgH,QAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,UAAA,KAAK,EAAE;AAACwB,YAAAA,QAAQ,EAAE;AAAX,WAAnB;AAA2C,UAAA,GAAG,EAAE,KAAK9H,cAArD;AAAqE,UAAA,SAAS,EAAE,KAAKQ,KAAL,CAAWC,SAAX,CAAqBE,cAArB,IAAuChB,SAAvC,IAAoDE,QAAQ,CAACwF,EAAT,KAAgB,KAAK7E,KAAL,CAAWC,SAAX,CAAqBE,cAArB,CAAoC0E,EAAxG,GAA6GpG,MAAM,CAAC2I,MAApH,GAA6H,EAA7M;AAAiN,UAAA,OAAO,EAAE,MAAM,KAAKpB,cAAL,CAAoB3G,QAApB,CAAhO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,QAAQ,CAACkI,SAAT,IACG;AAAK,UAAA,SAAS,EAAE9I,MAAM,CAAC+I,eAAvB;AAAwC,UAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,mBAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFR,EAIK,CAACtI,QAAQ,CAACkI,SAAV,IAAuBlI,QAAQ,CAACuI,MAAhC,IACG;AAAK,UAAA,SAAS,EAAEnJ,MAAM,CAAC+I,eAAvB;AAAwC,UAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,uBAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALR,EAOKtI,QAAQ,CAACuG,QAPd,CADJ;AAWAsB,QAAAA,QAAQ,CAACpB,IAAT,CAAc;AAAI,UAAA,KAAK,EAAE;AAAC+B,YAAAA,MAAM,EAAE,GAAT;AAAcC,YAAAA,OAAO,EAAE;AAAvB,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;AACA,aAAKtI,cAAL;AACH,OAf2C,CAiBhD;;AACC,KAlBM,MAkBA,IAAI,KAAKQ,KAAL,CAAWU,QAAX,CAAoBG,YAAxB,EAAsC;AACzC,WAAK,IAAI8F,MAAT,IAAmB,KAAK3G,KAAL,CAAWO,YAAX,CAAwBC,gBAA3C,EAA6D;AACzDsE,QAAAA,OAAO,CAACC,GAAR,CAAY4B,MAAZ;AACAO,QAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,UAAA,GAAG,EAAE,KAAKtG,cAAtB;AAAsC,UAAA,SAAS,EAAE,KAAKQ,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,IAAwCtB,SAAxC,IAAqDwH,MAAM,CAAC9B,EAAP,KAAc,KAAK7E,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,CAAqCoE,EAAxG,GAA6GpG,MAAM,CAAC2I,MAApH,GAA6H,EAA9K;AAAkL,UAAA,OAAO,EAAE,MAAM,KAAKW,iBAAL,CAAuBpB,MAAvB,CAAjM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkOA,MAAM,CAACqB,QAAzO,CADJ;AAGA,aAAKxI,cAAL;AACH,OAPwC,CAS7C;;AACC,KAVM,MAUA;AACH0H,MAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,GAAG,EAAE,KAAKtG,cAAtB;AAAsC,QAAA,OAAO,EAAE,KAAKyC,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ;AAGA,WAAKzC,cAAL;AACA0H,MAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,GAAG,EAAE,KAAKtG,cAAtB;AAAsC,QAAA,OAAO,EAAE,KAAK0C,gBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ;AAGA,WAAK1C,cAAL;AACA0H,MAAAA,QAAQ,CAACpB,IAAT,CACI;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,GAAG,EAAE,KAAKtG,cAAtB;AAAsC,QAAA,OAAO,EAAE,KAAK2C,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ;AAGA,WAAK3C,cAAL;AACH;;AAED,WAAO0H,QAAP;AACH;;AAEDG,EAAAA,gBAAgB,CAACF,UAAD,EAAa;AACzBvI,IAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/C,UAAIqI,WAAW,GAAG,EAAlB;AACA,UAAIxH,YAAY,GAAG,KAAKT,KAAL,CAAWO,YAAX,CAAwBE,YAA3C;;AACA,UAAIA,YAAY,IAAItB,SAApB,EAA+B;AAC3B8I,QAAAA,WAAW,GAAI,UAASxH,YAAY,CAACoG,YAAa,EAAlD;AACH;;AAED,WAAKzH,MAAL,CAAY2H,YAAZ,CAAyB,KAAzB,EAAiC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,UAAS,KAAKV,KAAL,CAAW4E,gBAAX,EAA8B,YAAWqD,UAAW,GAAEc,WAAY,EAAxM,EAP+C,CAQ/C;;AACA,WAAK/I,KAAL,CAAWgE,eAAX,GAA6B,KAAKhE,KAAL,CAAW4E,gBAAX,EAA7B;AACA,WAAKkC,cAAL,CAAoB,KAAKhG,KAAL,CAAWC,SAAX,CAAqBE,cAAzC;AACA,WAAKjB,KAAL,CAAW8H,IAAX;AACA,WAAK9H,KAAL,CAAW8C,IAAX,GAZ+C,CAc/C;;AACA,UAAI5B,WAAW,GAAG,KAAKJ,KAAL,CAAWI,WAA7B;AACAA,MAAAA,WAAW,CAACE,gBAAZ,GAA+B6G,UAA/B;AACA,WAAKnD,QAAL,CAAc;AAAC5D,QAAAA,WAAW,EAAEA;AAAd,OAAd;AACH,KAlBmB,CAApB;AAmBH;;AAED4F,EAAAA,cAAc,CAAC3G,QAAD,EAAW;AACrB,QAAIwG,SAAS,GAAG,KAAK7F,KAAL,CAAWC,SAA3B;;AACA,QAAIZ,QAAQ,IAAIF,SAAhB,EAA2B;AACvB;AACH,KAJoB,CAKrB;;;AACA,SAAKD,KAAL,CAAWgJ,UAAX,CAAsB,CAAtB,EAAyBC,IAAzB,GAAgC,QAAhC;;AAEA,QAAI9I,QAAQ,CAACwF,EAAT,KAAgB,CAAC,CAArB,EAAwB;AACpB,WAAK3F,KAAL,CAAWgJ,UAAX,CAAsB,CAAtB,EAAyBC,IAAzB,GAAgC,QAAhC;AACAtC,MAAAA,SAAS,CAAC1F,cAAV,GAA2Bd,QAA3B;AACA,WAAK2E,QAAL,CAAc;AAAC/D,QAAAA,SAAS,EAAE4F;AAAZ,OAAd;AACA;AACH;;AACDjH,IAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/C,WAAKP,QAAL,CAAc0H,YAAd,CAA2B,KAA3B,EAAmC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,yBAAwB5F,QAAQ,CAACwF,EAAG,SAAQ,KAAKhF,IAAK,UAAS,KAAKX,KAAL,CAAW4E,gBAAX,KAAgC,KAAK5E,KAAL,CAAW0E,WAAY,UAAShE,WAAY,EAAtM;AACA,WAAKV,KAAL,CAAWgJ,UAAX,CAAsB,CAAtB,EAAyBC,IAAzB,GAAgC,SAAhC;AACAtC,MAAAA,SAAS,CAAC1F,cAAV,GAA2Bd,QAA3B;AACA,WAAK2E,QAAL,CAAc;AAAC/D,QAAAA,SAAS,EAAE4F;AAAZ,OAAd;AACH,KALmB,CAApB;AAOH;;AAEDkC,EAAAA,iBAAiB,CAACpB,MAAD,EAAS;AACtB;AACA,QAAI,KAAK3G,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,KAAyCtB,SAAzC,IAAsDwH,MAAM,CAAC9B,EAAP,KAAc,KAAK7E,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,CAAqCoE,EAA7G,EAAiH;AAC7G;AACH;;AACDjG,IAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/C,WAAKR,MAAL,CAAY2H,YAAZ,CAAyB,KAAzB,EAAiC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,UAAS,KAAKV,KAAL,CAAW4E,gBAAX,EAA8B,YAAW,KAAK9D,KAAL,CAAWI,WAAX,CAAuBE,gBAAiB,UAASqG,MAAM,CAACE,YAAa,EAApP;AACA,WAAK3H,KAAL,CAAWgE,eAAX,GAA6B,KAAKhE,KAAL,CAAW4E,gBAAX,EAA7B;AACA,WAAKkC,cAAL,CAAoB,KAAKhG,KAAL,CAAWC,SAAX,CAAqBE,cAAzC;AACA,WAAKjB,KAAL,CAAW8H,IAAX;AACA,WAAK9H,KAAL,CAAW8C,IAAX;AAEA,UAAIoG,OAAO,GAAG,KAAKpI,KAAL,CAAWO,YAAzB;AACA6H,MAAAA,OAAO,CAAC3H,YAAR,GAAuBkG,MAAvB;AACA,WAAK3C,QAAL,CAAc;AAACzD,QAAAA,YAAY,EAAE6H;AAAf,OAAd;AACH,KAVmB,CAApB;AAWH;;AAED5G,EAAAA,eAAe,GAAG;AACd,QAAI6G,cAAc,GAAGvF,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAArB;;AACA,QAAI;AACA,UAAI,CAAC,KAAK7D,KAAL,CAAW8D,YAAhB,EAA8B;AAC1B,YAAI,KAAK9D,KAAL,CAAWoJ,iBAAf,EAAkC;AAC9BD,UAAAA,cAAc,CAACC,iBAAf;AACH,SAFD,MAEO,IAAI,KAAKpJ,KAAL,CAAWqJ,oBAAf,EAAqC;AAAE;AAC1CF,UAAAA,cAAc,CAACE,oBAAf;AACH,SAFM,MAEA,IAAI,KAAKrJ,KAAL,CAAWsJ,uBAAf,EAAwC;AAAE;AAC7CH,UAAAA,cAAc,CAACG,uBAAf;AACH,SAFM,MAEA,IAAI,KAAKtJ,KAAL,CAAWuJ,mBAAf,EAAoC;AAAE;AACzCJ,UAAAA,cAAc,CAACI,mBAAf;AACH;AACJ,OAVD,MAUO;AACH,YAAI3F,QAAQ,CAAC4F,cAAb,EAA6B;AACzB5F,UAAAA,QAAQ,CAAC4F,cAAT;AACD,SAFH,MAES,IAAI5F,QAAQ,CAAC6F,mBAAb,EAAkC;AAAE;AACzC7F,UAAAA,QAAQ,CAAC6F,mBAAT;AACD,SAFM,MAEA,IAAI7F,QAAQ,CAAC8F,oBAAb,EAAmC;AAAE;AAC1C9F,UAAAA,QAAQ,CAAC8F,oBAAT;AACD,SAFM,MAEA,IAAI9F,QAAQ,CAAC+F,gBAAb,EAA+B;AAAE;AACtC/F,UAAAA,QAAQ,CAAC+F,gBAAT;AACD;AACN;;AACD,WAAK3J,KAAL,CAAW8D,YAAX,GAA0B,CAAC,KAAK9D,KAAL,CAAW8D,YAAtC;AACH,KAvBD,CAuBE,OAAMkD,CAAN,EAAS,CAEV;AAGJ;;AAEDxE,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKxC,KAAL,CAAW4J,MAAf,EAAuB;AACnB,WAAK5J,KAAL,CAAW8C,IAAX;;AAEA,UAAI,KAAKzC,yBAAL,KAAmCJ,SAAvC,EAAkD;AAC9CwD,QAAAA,aAAa,CAAC,KAAKpD,yBAAN,CAAb;AACH;;AAED,WAAKA,yBAAL,GAAiCwJ,WAAW,CAAC,MAAM;AAC/CnK,QAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/CoF,UAAAA,KAAK,CAAE,GAAE,KAAKrF,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,yBAAwB,KAAKF,IAAK,SAAQ,KAAKX,KAAL,CAAW4E,gBAAX,EAA8B,kBAAiB,KAAK5E,KAAL,CAAW+D,YAAa,UAASrD,WAAY,EAA7L,CAAL;AACH,SAFmB,CAApB;AAGH,OAJ2C,EAIzC,IAJyC,CAA5C;AAMH,KAbD,MAaO;AACH+C,MAAAA,aAAa,CAAC,KAAKpD,yBAAN,CAAb;AACA,WAAKL,KAAL,CAAW6C,KAAX;AACH;AACJ;;AAEDJ,EAAAA,IAAI,CAACuE,CAAD,EAAI;AACJ,QAAI8C,OAAO,GAAGlG,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCc,KAAnC,GAA2C,GAA3C,GAAiD,KAAK3E,KAAL,CAAW+D,YAA1E;AACA,QAAIgG,OAAO,GAAG,KAAKjJ,KAAL,CAAWI,WAAX,CAAuBE,gBAAvB,KAA4C,EAA5C,GAAiD,KAAKN,KAAL,CAAWI,WAAX,CAAuBE,gBAAxE,GAA2F,OAAzG;AACA,QAAImG,KAAK,GAAG,KAAKzG,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,KAAyCtB,SAAzC,GAAsD,UAAS,KAAKa,KAAL,CAAWO,YAAX,CAAwBE,YAAxB,CAAqCoG,YAAa,EAAjH,GAAqH,EAAjI;AAEAjI,IAAAA,oBAAoB,CAAC,KAAKe,MAAN,EAAeC,WAAD,IAAiB;AAC/C,WAAKR,MAAL,CAAY2H,YAAZ,CAAyB,KAAzB,EAAiC,GAAE,KAAKpH,MAAL,CAAYsF,SAAU,cAAa,KAAKlF,UAAW,SAAQ,KAAKF,IAAK,UAASD,WAAY,UAASoJ,OAAQ,YAAWC,OAAQ,GAAExC,KAAM,EAAzK;AACA,WAAKvH,KAAL,CAAW8H,IAAX;AACA,WAAK9H,KAAL,CAAW8C,IAAX;AACA,WAAK9C,KAAL,CAAWgE,eAAX,GAA6B8F,OAA7B;AACA,WAAK9J,KAAL,CAAWiE,SAAX,GAAuB,KAAvB;AAEA,WAAK6C,cAAL,CAAoB,KAAKhG,KAAL,CAAWC,SAAX,CAAqBE,cAAzC;AACH,KARmB,CAApB;AAUH;;AAEDyB,EAAAA,SAAS,GAAG;AACR,SAAK1C,KAAL,CAAWiE,SAAX,GAAuB,IAAvB;AACH;;AAEDtB,EAAAA,cAAc,GAAG;AACb,QAAInB,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAA1B;AACAA,IAAAA,QAAQ,CAACC,IAAT,GAAgB,CAACD,QAAQ,CAACC,IAA1B;AACAD,IAAAA,QAAQ,CAACI,iBAAT,GAA6B,KAA7B;AACAJ,IAAAA,QAAQ,CAACG,YAAT,GAA6B,KAA7B;AACAH,IAAAA,QAAQ,CAACK,eAAT,GAA6B,KAA7B;AACA,SAAKiD,QAAL,CAAc;AAACtD,MAAAA,QAAQ,EAAEA;AAAX,KAAd;AACH;;AAEDuB,EAAAA,eAAe,GAAG;AACd,QAAIvB,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAA1B;AACAA,IAAAA,QAAQ,CAACI,iBAAT,GAA6B,IAA7B;AACA,SAAKkD,QAAL,CAAc;AAACtD,MAAAA,QAAQ,EAAEA;AAAX,KAAd;AACH;;AAEDyB,EAAAA,aAAa,GAAG;AACZ,QAAIzB,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAA1B;AACAA,IAAAA,QAAQ,CAACK,eAAT,GAA2B,IAA3B;AACA,SAAKiD,QAAL,CAAc;AAACtD,MAAAA,QAAQ,EAAEA;AAAX,KAAd;AACH;;AAEDwB,EAAAA,gBAAgB,GAAG;AACf,QAAIxB,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAA1B;AACAA,IAAAA,QAAQ,CAACG,YAAT,GAAwB,IAAxB;AACA,SAAKmD,QAAL,CAAc;AAACtD,MAAAA,QAAQ,EAAEA;AAAX,KAAd;AACH;;AAED0B,EAAAA,oBAAoB,GAAG;AACnB,QAAI1B,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAA1B;AACAA,IAAAA,QAAQ,CAACI,iBAAT,GAA6B,KAA7B;AACAJ,IAAAA,QAAQ,CAACG,YAAT,GAA6B,KAA7B;AACAH,IAAAA,QAAQ,CAACK,eAAT,GAA6B,KAA7B;AACA,SAAKiD,QAAL,CAAc;AAACtD,MAAAA,QAAQ,EAAEA;AAAX,KAAd;AACH;;AAEDoB,EAAAA,cAAc,GAAG;AACb,QAAIoH,KAAK,GAAGpG,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAZ;AACA,QAAIoG,MAAM,GAAGrG,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAb;AACA,QAAIqG,QAAQ,GAAGF,KAAK,CAACrF,KAArB;AACA,QAAIwF,WAAW,GAAG,KAAMD,QAAQ,GAAG,GAAnC;AAEA,QAAIE,OAAO,GAAG/D,IAAI,CAACC,KAAL,CAAW0D,KAAK,CAACrF,KAAN,GAAc,GAAd,GAAoB,KAAK3E,KAAL,CAAW+D,YAA1C,CAAd;AACA,QAAIsG,OAAO,GAAGhE,IAAI,CAACC,KAAL,CAAW8D,OAAO,GAAG,EAArB,CAAd;AACA,QAAIE,KAAK,GAAKjE,IAAI,CAACC,KAAL,CAAW+D,OAAO,GAAG,EAArB,CAAd;AACAA,IAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACAD,IAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AAEAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAAX,GAAgBA,OAAhB,GAA2B,IAAGA,OAAQ,EAAhD;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAAX,GAAgBA,OAAhB,GAA2B,IAAGA,OAAQ,EAAhD;AACAC,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAT,GAAcA,KAAd,GAAuB,IAAGA,KAAM,EAAxC;AAEA,QAAI9E,IAAI,GAAG8E,KAAK,KAAK,CAAV,GAAcA,KAAK,GAAG,GAAtB,GAA4B,EAAvC;AACA9E,IAAAA,IAAI,IAAI6E,OAAO,GAAG,GAAV,GAAgBD,OAAxB;AAGAH,IAAAA,MAAM,CAACM,SAAP,GAAoB,SAAQ/E,IAAK,SAAjC;AACAyE,IAAAA,MAAM,CAACxE,KAAP,CAAa+E,IAAb,GAAqB,QAAON,QAAS,QAAOC,WAAY,MAAxD;AACH;;AAEDrH,EAAAA,IAAI,GAAG;AACH,SAAK9C,KAAL,CAAW8C,IAAX;AACH;;AACDD,EAAAA,KAAK,GAAG;AACJ,SAAK7C,KAAL,CAAW6C,KAAX;AACH;;AAED4H,EAAAA,qBAAqB,GAAG;AACpB,QAAI,KAAK3J,KAAL,CAAWU,QAAX,CAAoBK,eAAxB,EAAyC;AACrC,aAAO,WAAP;AACH;;AACD,QAAI,KAAKf,KAAL,CAAWU,QAAX,CAAoBG,YAAxB,EAAsC;AAClC,aAAO,OAAP;AACH;;AACD,QAAI,KAAKb,KAAL,CAAWU,QAAX,CAAoBI,iBAAxB,EAA2C;AACvC,aAAO,SAAP;AACH;AACJ;;AAEDuB,EAAAA,YAAY,CAAC6D,CAAD,EAAI;AACZ,SAAKhH,KAAL,CAAW0K,MAAX,GAAoB1D,CAAC,CAAC2D,MAAF,CAAShG,KAAT,GAAiB,GAArC;AACH;;AAEDvB,EAAAA,YAAY,GAAG;AACXQ,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoC+G,SAApC,CAA8CC,GAA9C,CAAkDtL,MAAM,CAACuL,cAAzD;AACAlH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmC+G,SAAnC,CAA6CC,GAA7C,CAAiDtL,MAAM,CAACuL,cAAxD;AACAlH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8C+G,SAA9C,CAAwDC,GAAxD,CAA4DtL,MAAM,CAACuL,cAAnE;AACAlH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0C4B,KAA1C,CAAgDsF,MAAhD,GAAyD,MAAzD;;AAEA,QAAI,KAAK3K,cAAL,IAAuBH,SAA3B,EAAsC;AAClC+K,MAAAA,YAAY,CAAC,KAAK5K,cAAN,CAAZ;AACH;;AAED,SAAKA,cAAL,GAAsB6K,UAAU,CAAC,MAAM;AACnCrH,MAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoC+G,SAApC,CAA8CM,MAA9C,CAAqD3L,MAAM,CAACuL,cAA5D;AACAlH,MAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmC+G,SAAnC,CAA6CM,MAA7C,CAAoD3L,MAAM,CAACuL,cAA3D;AACAlH,MAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8C+G,SAA9C,CAAwDM,MAAxD,CAA+D3L,MAAM,CAACuL,cAAtE;AACAlH,MAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0C4B,KAA1C,CAAgDsF,MAAhD,GAAyD,MAAzD;AACH,KAL+B,EAK7B,IAL6B,CAAhC;AAOH;;AAEDI,EAAAA,QAAQ,CAAC9I,KAAD,EAAQ;AACZ,SAAKyC,QAAL,CAAc;AAACzC,MAAAA,KAAK,EAAEA;AAAR,KAAd;AACH;;AAED+I,EAAAA,UAAU,CAACnJ,OAAD,EAAUsD,EAAV,EAAc;AACpB,SAAKT,QAAL,CAAc;AAAC7C,MAAAA,OAAO,EAAEA;AAAV,KAAd,EAAkC,MAAM;AACpCsD,MAAAA,EAAE;AACL,KAFD;AAGH;;AAED8F,EAAAA,SAAS,CAACrJ,MAAD,EAASuD,EAAT,EAAa;AAClB,SAAKT,QAAL,CAAc;AAAC9C,MAAAA,MAAM,EAAEA;AAAT,KAAd,EAAgC,MAAM;AAClCuD,MAAAA,EAAE;AACL,KAFD;AAGH;;AAED+F,EAAAA,MAAM,GAAG;AACL,WACI,4BACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAC,4EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,EAKA;AAAK,MAAA,SAAS,EAAE/L,MAAM,CAAC4J,cAAvB;AAAuC,MAAA,EAAE,EAAC,gBAA1C;AAA2D,MAAA,WAAW,EAAE,KAAK/F,YAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAO,MAAA,WAAW,EAAC,WAAnB;AAA+B,MAAA,EAAE,EAAC,OAAlC;AAA0C,MAAA,SAAS,EAAE7D,MAAM,CAACgM,WAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,IAAI,EAAC,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJJ,EAQI;AAAK,MAAA,SAAS,EAAEhM,MAAM,CAACiM,kBAAvB;AAA2C,MAAA,EAAE,EAAC,oBAA9C;AAAmE,MAAA,OAAO,EAAE,KAAKhJ,UAAjF;AAA6F,MAAA,aAAa,EAAE,KAAKF,eAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAWK,KAAKxB,KAAL,CAAWsB,WAAX,IACD;AAAK,MAAA,SAAS,EAAE7C,MAAM,CAACkM,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAElM,MAAM,CAACmM,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ,CAZJ,EAqBK,KAAK5K,KAAL,CAAWgB,WAAX,IAA0B7B,SAA1B,IAAuC,KAAKa,KAAL,CAAWgB,WAAX,CAAuBL,IAA9D,IACG;AAAK,MAAA,SAAS,EAAElC,MAAM,CAACuC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAgC;AAAM,MAAA,EAAE,EAAC,mBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKhB,KAAL,CAAWgB,WAAX,CAAuBC,QAArD,CAAhC,cADJ,EAEI;AAAQ,MAAA,EAAE,EAAC,iBAAX;AAA6B,MAAA,OAAO,EAAE,KAAKuB,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI;AAAQ,MAAA,EAAE,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CAtBR,EA6BI;AAAK,MAAA,SAAS,EAAE/D,MAAM,CAACoM,OAAvB;AAAgC,MAAA,EAAE,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAEpM,MAAM,CAACqM,IAAvB;AAA6B,MAAA,OAAO,EAAE,MAAMnM,MAAM,CAACmM,IAAP,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKjL,IAAL,KAAc,OAAd,IACG,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKG,KAAL,CAAWuB,KAAhB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,KAAKvB,KAAL,CAAWkB,MAAtB,iBAAyC,KAAKlB,KAAL,CAAWmB,OAApD,CAFJ,CAHR,EAQK,KAAKtB,IAAL,KAAc,OAAd,IACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKG,KAAL,CAAWuB,KAAhB,CATR,CA7BJ,EA0CI;AAAK,MAAA,SAAS,EAAE9C,MAAM,CAACsM,UAAvB;AAAmC,MAAA,EAAE,EAAC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/K,KAAL,CAAWqB,WAAX,IACG;AAAK,MAAA,SAAS,EAAG,GAAE5C,MAAM,CAACuM,UAAW,IAAGvM,MAAM,CAACwM,SAAU,EAAzD;AAA4D,MAAA,OAAO,EAAE,KAAKvJ,UAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,EAIK,CAAC,KAAK1B,KAAL,CAAWqB,WAAZ,IACG;AAAK,MAAA,SAAS,EAAG,GAAE5C,MAAM,CAACyM,WAAY,IAAGzM,MAAM,CAACwM,SAAU,EAA1D;AAA6D,MAAA,OAAO,EAAE,KAAKvJ,UAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,EAOI;AAAK,MAAA,SAAS,EAAEjD,MAAM,CAAC0M,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE1M,MAAM,CAAC2M,QAAvB;AAAiC,MAAA,EAAE,EAAC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,EAAE,EAAC,SAAvB;AAAiC,MAAA,IAAI,EAAC,SAAtC;AACA,MAAA,GAAG,EAAC,GADJ;AACQ,MAAA,GAAG,EAAC,KADZ;AACkB,MAAA,IAAI,EAAC,MADvB;AAC8B,MAAA,SAAS,EAAE3M,MAAM,CAAC4M,OADhD;AACyD,MAAA,WAAW,EAAE,KAAKzJ,SAD3E;AACsF,MAAA,SAAS,EAAE,KAAKD,IADtG;AAC4G,MAAA,OAAO,EAAE,KAAKG,cAD1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAPJ,EAaI;AAAK,MAAA,SAAS,EAAErD,MAAM,CAAC6M,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE7M,MAAM,CAAC8M,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAO,MAAA,SAAS,EAAE9M,MAAM,CAAC+M,aAAzB;AAAwC,MAAA,IAAI,EAAC,OAA7C;AAAqD,MAAA,EAAE,EAAC,eAAxD;AAAwE,MAAA,IAAI,EAAC,QAA7E;AACA,MAAA,GAAG,EAAC,GADJ;AACQ,MAAA,GAAG,EAAC,KADZ;AACkB,MAAA,IAAI,EAAC,MADvB;AAC8B,MAAA,QAAQ,EAAE,KAAKnJ,YAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAKI;AAAK,MAAA,OAAO,EAAE,KAAKR,cAAnB;AAAmC,MAAA,SAAS,EAAEpD,MAAM,CAACgN,cAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI;AAAK,MAAA,SAAS,EAAEhN,MAAM,CAACiN,eAAvB;AAAwC,MAAA,OAAO,EAAE,KAAKlK,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAQK,KAAKxB,KAAL,CAAWU,QAAX,CAAoBC,IAApB,IACG;AAAK,MAAA,SAAS,EAAElC,MAAM,CAACiC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAEjC,MAAM,CAACkN,YAAvB;AAAqC,MAAA,OAAO,EAAE,KAAKvJ,oBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKuH,qBAAL,EAAT,CAAzE,CADJ,EAEI;AAAI,MAAA,KAAK,EAAE;AAAC9B,QAAAA,MAAM,EAAE;AAAT,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGK,KAAKZ,kBAAL,EAHL,CATR,CAbJ,CA1CJ,CALA,CADJ;AAmFH;;AAxvBuD","sourcesContent":["import Styles from './videoComponent.module.css';\nimport Head from 'next/head'\nimport Router from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\n\nexport default class VideoComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        // Video element\n        this.video = undefined;\n        // Source element\n        this.source = undefined;\n        // Subtitle element\n        this.subtitle = undefined;\n        // Control timeout\n        this.controlTimeout = undefined;\n        // Update currenttime interval (for the server)\n        this.updateCurrentTimeInterval = undefined;\n        // Used for unique keys on elements.\n        this.elementCounter = 0;\n        // Function to call on time change events\n        this.onTimeChange = props.onTimeChange;\n        //this.getNextEpisodeID = props.getNextEpisodeID;\n\n        this.onChangeEpisode = props.onChangeEpisode;\n\n        this.server = props.server;\n        this.serverToken = props.serverToken;\n        this.type = props.Movie != undefined ? 'movie' : 'serie'\n        this.internalID = props.internalID;\n\n        this.state = {\n            subtitles: {\n                availableSubtitles: [],\n                activeSubtitle: undefined\n            },\n            resolutions: {\n                availableResolutions: [],\n                activeResolution: ''\n            },\n            audioStreams: {\n                availableStreams: [],\n                activeStream: undefined\n            },\n            settings: {\n                show: false,\n                standardControl: false,\n                audioControl: false,\n                resolutionControl: false,\n                subtitleControl: false\n            },\n            nextEpisode: this.type === 'serie' ? {\n                timeLeft: null,\n                internalID: null,\n                season: null,\n                episode: null,\n                show: false,\n                foundNextEpisode: false\n            } : undefined,\n            videoPaused: true,\n            isBuffering: true,\n            title: props.title,\n            season: props.season,\n            episode: props.episode,\n            show: props.show\n        }\n\n        this.enterFullScreen      = this.enterFullScreen.bind(this);\n        this.togglePlay           = this.togglePlay.bind(this);\n        this.seek                 = this.seek.bind(this);\n        this.startSeek            = this.startSeek.bind(this);\n        this.toggleSettings       = this.toggleSettings.bind(this);\n        this.updateSeekTime       = this.updateSeekTime.bind(this);\n        this.pause                = this.pause.bind(this);\n        this.play                 = this.play.bind(this);\n        this.showResolutions      = this.showResolutions.bind(this);\n        this.showAudioStreams     = this.showAudioStreams.bind(this);\n        this.showSubtitles        = this.showSubtitles.bind(this);\n        this.showStandardSettings = this.showStandardSettings.bind(this);\n        this.changeVolume         = this.changeVolume.bind(this);\n        this.showControls         = this.showControls.bind(this);\n        this.setNextEpisodeID     = this.setNextEpisodeID.bind(this);\n        this.playNextEpisode      = this.playNextEpisode.bind(this);\n        this.getNextEpisodeID     = this.getNextEpisodeID.bind(this);\n    }\n\n    componentWillUnmount() {\n        this.video.pause();\n        clearInterval(this.updateCurrentTimeInterval);\n        this.video.ontimeupdate = undefined;\n    }\n\n    componentDidMount() {\n        this.video = document.getElementById('video');\n        this.video.isFullscreen = false;\n\n        // The duration of the movie\n        this.video.realDuration = 999;\n        // The watchtime offset for the seekbar (since we change source on seek and HTML do not know the correct watchtime after we change source)\n        this.video.watchTimeOffset = 0;\n        // True if we are currently seeking (Draging the seekbar);\n        this.video.isSeeking = false;\n        this.video.controls = false;\n        this.video.pauseTime = undefined;\n\n\n        this.source = document.createElement('source');\n        this.video.appendChild(this.source);\n\n        this.subtitle = document.getElementById('subtitle');\n\n        this.loadSources();\n        this.loadSubtitles();\n        this.loadAudioStreams();\n\n        if (this.type === 'serie') {\n            this.getNextEpisodeID();\n        }\n\n\n        this.video.ontimeupdate = () => {\n            if (!this.video.isSeeking) {\n                let percentage = ((this.video.currentTime + this.video.watchTimeOffset) / this.video.realDuration) * 100;\n                document.getElementById('seekbar').value = percentage\n                this.updateSeekTime();\n                \n                if (this.type === 'serie' && this.video.getRealWatchtime() >= this.video.realDuration - 40 && this.state.nextEpisode.foundNextEpisode) {\n                    this.displayNextEpisodeBox();\n                }\n            }\n            if(this.state.isBuffering) {\n                this.setState({isBuffering: false});\n            }\n        }\n\n        // Returns the 'real' current time\n        this.video.getRealWatchtime = () => {\n            return this.video.watchTimeOffset + this.video.currentTime;\n        }\n\n        this.video.onpause = () => {\n            this.video.pauseTime = new Date();\n            this.setState({videoPaused: true});\n        }\n        this.video.onplay = () => {\n            if (this.video.pauseTime != undefined) {\n                let currentTime = new Date();\n                let secondsSincePause = (currentTime.getTime() - this.video.pauseTime.getTime()) / 1000;\n                // TODO: This value needs to be checked, not sure what is needed\n                if (secondsSincePause > 15) {\n                    this.video.pauseTime = undefined;\n                    this.seek();\n                }\n            }\n            this.setState({videoPaused: false, isBuffering: false});\n        }\n        // Show spinner on buffer\n        this.video.onwaiting = () => {\n            this.setState({isBuffering: true});\n        };\n    }\n\n    updateServerToken(token, cb) {\n        this.serverToken = token;\n        cb();\n    }\n\n    show(time=0) {\n        document.getElementById('videoContainer').style.display = 'block';\n        this.togglePlay();\n    }\n\n    setNextEpisodeID(id, season, episode, foundNextEpisode) {\n        console.log(`Found next episode: ${foundNextEpisode}, episodeID: ${id}`);\n        let nextEpisode = this.state.nextEpisode;\n\n        if (foundNextEpisode) {\n            nextEpisode.internalID = id;\n            nextEpisode.foundNextEpisode = true;\n            nextEpisode.season = season;\n            nextEpisode.episode = episode;\n        } else {\n            nextEpisode.foundNextEpisode = false;\n        }\n        this.setState({nextEpisode: nextEpisode});\n    }\n\n    getNextEpisodeID() {\n        validateServerAccess(this.server, (serverToken) => {\n            console.log(\"EP: \" + this.state.episode)\n            fetch(`${this.server.server_ip}/api/series/getNextEpisode?serie_id=${this.state.show}&season=${this.state.season}&episode=${this.state.episode}&token=${serverToken}`)\n            .then(r => r.json())\n            .then(result => {\n                this.setNextEpisodeID(result.internalID, result.season, result.episode, result.foundEpisode);\n            });\n        });\n    }\n\n    displayNextEpisodeBox() {\n        let nextEpisode = this.state.nextEpisode;\n        let timeLeft = Math.floor(this.video.realDuration - this.video.getRealWatchtime());\n        if (timeLeft === 0) {\n            this.playNextEpisode();\n        } else {\n            nextEpisode.timeLeft = timeLeft;\n            nextEpisode.show = true;\n        }\n\n        this.setState({nextEpisode: nextEpisode});\n    }\n\n    async playNextEpisode() {\n        let nextEpisode = this.state.nextEpisode;\n        this.internalID = this.state.nextEpisode.internalID;\n        nextEpisode.timeLeft = null;\n        nextEpisode.internalID = null;\n        nextEpisode.show = false;\n        nextEpisode.foundNextEpisode = false;\n        this.video.watchTimeOffset = 0;\n\n        await this.loadAudioStreams();\n        this.loadSources(true).then(() => {\n            this.loadSubtitles();\n            if (this.onChangeEpisode != undefined) {\n                this.onChangeEpisode(this.state.nextEpisode.season, this.state.nextEpisode.episode, this.internalID);\n            }\n        });\n        this.setState({nextEpisode: nextEpisode});\n        \n    }\n\n    loadSubtitles() {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n                fetch(`${this.server.server_ip}/api/subtitles/list?content=${this.internalID}&type=${this.type}&token=${serverToken}`)\n                .then(r => r.json())\n                .then(result => {\n                    let noSub = {id: -1, language: 'None'};\n                    let stateSubs = this.state.subtitles;\n                    stateSubs.availableSubtitles = result.subtitles;\n                    stateSubs.availableSubtitles.push(noSub);\n    \n                    // If a subtitle was already selected (on automatic change episode), try to find a subtitle with the same language and set that as active.\n                    let found = false;\n                    if (this.state.subtitles.activeSubtitle !== undefined) {\n                        for (let subtitle of result.subtitles) {\n                            if (this.state.subtitles.activeSubtitle.language === subtitle.language) {\n                                found = true;\n                                this.changeSubtitle(subtitle);\n                                break;\n                            }\n                        }\n                    }\n    \n                    \n                    if (!found) {\n                        this.changeSubtitle(noSub);\n                    }\n                    this.setState({subtitles: stateSubs});\n                    resolve();\n                })\n                .catch(e => {\n                    // TODO: Error handling\n                    console.log(e);\n                    resolve();\n                })\n            });\n        });\n    }\n\n    loadAudioStreams() {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n                fetch(`${this.server.server_ip}/api/video/${this.internalID}/getLanguages?type=${this.type}&token=${serverToken}`)\n                .then(r => r.json())\n                .then(result => {\n                    console.log(result);\n                    let currentState = this.state.audioStreams;\n                    currentState.availableStreams = result;\n\n                    this.setState({audioStreams: currentState}, () => resolve());\n                })\n            });\n\n        });\n    }\n    \n    loadSources(autoplay = false) {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n            // Set the duration of the video\n            fetch(`${this.server.server_ip}/api/video/${this.internalID}/getDuration?type=${this.type}&token=${serverToken}`)\n            .then(r => r.json())\n            .then(data => {\n                this.video.realDuration = data.duration;\n            });\n\n            // Get the current time for this video\n            fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/get?type=${this.type}&token=${serverToken}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(r => r.json())\n            .then(time => {\n                time = time.time;\n                this.video.watchTimeOffset = time;\n\n                // Get the available resolutions for this video\n                fetch(`${this.server.server_ip}/api/video/${this.internalID}/getResolution?type=${this.type}&token=${serverToken}`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(r => r.json())\n                .then(result => {\n\n                    // If we already have selected an audio stream, change to that one.\n                    let audio = '';\n                    let audioState = this.state.audioStreams;\n                    if (this.state.audioStreams.activeStream !== undefined) {\n                        for (let stream of this.state.audioStreams.availableStreams) {\n                            if (this.state.audioStreams.activeStream.shortName === stream.shortName) {\n                                audio = `&audio=${stream.stream_index}`;\n                                audioState.activeStream = stream;\n                                break;\n                            }\n                        }\n                    }\n\n\n                    // If we didn't find a match for the langauges, (maybe this video don't have that language): Set the activeAudioStream to undefined (which will give us default audio for the file)\n                    if (audio === '') {\n                        audioState.activeStream = undefined\n                    }\n\n                    // Change the available resolutions\n                    let resolutions = this.state.resolutions;\n                    resolutions.availableResolutions = result.resolutions;\n\n                    if (result.directplay) {\n                        this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=directplay${audio}`)\n                        resolutions.activeResolution = 'directplay';\n                        resolutions.availableResolutions.push('directplay');\n                    } else {\n                        this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=1080P${audio}`);\n                        resolutions.activeResolution = '1080P';\n                    }\n\n                    // Save the new resolution state and audioState\n                    this.setState({resolutions: resolutions, audioStreams: audioState});\n    \n    \n                    this.video.load();\n                    if (autoplay) {\n                        this.video.play();\n                    }\n                    resolve();\n                });\n            })\n            });\n        });\n\n    }\n\n    getSettingElements() {\n        let elements = [];\n\n        // If we should display resulution controls\n        if (this.state.settings.resolutionControl) {\n            console.log(this.state.resolutions)\n            for (let resolution of this.state.resolutions.availableResolutions) {\n                elements.push(\n                    <a href=\"#\" key={this.elementCounter} className={resolution === this.state.resolutions.activeResolution ? Styles.active : ''} onClick={() => this.changeResolution(resolution)}>{resolution}</a>\n                )\n                this.elementCounter++;\n            }\n\n\n        // If we should display subtitle controls\n        } else if (this.state.settings.subtitleControl) {\n            for (let subtitle of this.state.subtitles.availableSubtitles) {\n                elements.push(\n                    <a href=\"#\" style={{position: 'relative'}} key={this.elementCounter} className={this.state.subtitles.activeSubtitle != undefined && subtitle.id === this.state.subtitles.activeSubtitle.id ? Styles.active : ''} onClick={() => this.changeSubtitle(subtitle)}>\n                        {subtitle.extracted && \n                            <img className={Styles.subtitleVariant} src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/check.png`} />\n                        }\n                        {!subtitle.extracted && subtitle.synced &&\n                            <img className={Styles.subtitleVariant} src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/hourglass.png`} />\n                        }\n                        {subtitle.language}\n                        </a>\n                )\n                elements.push(<hr style={{margin: '0', padding: '0'}}></hr>)\n                this.elementCounter++;\n            }\n\n        // If we should display audio controls\n        } else if (this.state.settings.audioControl) {\n            for (let stream of this.state.audioStreams.availableStreams) {\n                console.log(stream);\n                elements.push(\n                    <a href=\"#\" key={this.elementCounter} className={this.state.audioStreams.activeStream != undefined && stream.id === this.state.audioStreams.activeStream.id ? Styles.active : ''} onClick={() => this.changeAudioStream(stream)}>{stream.longName}</a>\n                );\n                this.elementCounter++;\n            }\n\n        // If we should display standard controls\n        } else {\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showResolutions}>Quality</a>\n            );\n            this.elementCounter++;\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showAudioStreams} >Audio</a>\n            );\n            this.elementCounter++;\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showSubtitles}>Subtitles</a>\n            );\n            this.elementCounter++;\n        }\n\n        return elements;\n    }\n\n    changeResolution(resolution) {\n        validateServerAccess(this.server, (serverToken) => {\n            let audioSource = \"\";\n            let activeStream = this.state.audioStreams.activeStream;\n            if (activeStream != undefined) {\n                audioSource = `&audio=${activeStream.stream_index}`;\n            }\n\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${resolution}${audioSource}`);\n            // Change the watchTimeOffset to proberly sync subtitles and seekbar.\n            this.video.watchTimeOffset = this.video.getRealWatchtime();\n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n            this.video.load();\n            this.video.play();\n    \n            // Change the active resolution in the state\n            let resolutions = this.state.resolutions;\n            resolutions.activeResolution = resolution;\n            this.setState({resolutions: resolutions});\n        });\n    }\n\n    changeSubtitle(subtitle) {\n        let stateSubs = this.state.subtitles;\n        if (subtitle == undefined) {\n            return;\n        }\n        // Fix to prevent subs getting \"stuck\" when seeking\n        this.video.textTracks[0].mode = 'hidden';\n\n        if (subtitle.id === -1) {\n            this.video.textTracks[0].mode = 'hidden';\n            stateSubs.activeSubtitle = subtitle;\n            this.setState({subtitles: stateSubs});\n            return;\n        }\n        validateServerAccess(this.server, (serverToken) => {\n            this.subtitle.setAttribute('src', `${this.server.server_ip}/api/subtitles/get?id=${subtitle.id}&type=${this.type}&start=${this.video.getRealWatchtime() - this.video.currentTime}&token=${serverToken}`);\n            this.video.textTracks[0].mode = 'showing';\n            stateSubs.activeSubtitle = subtitle;\n            this.setState({subtitles: stateSubs});\n        });\n\n    }\n\n    changeAudioStream(stream) {\n        // If we changed to the same audio stream\n        if (this.state.audioStreams.activeStream !== undefined && stream.id === this.state.audioStreams.activeStream.id) {\n            return;\n        }\n        validateServerAccess(this.server, (serverToken) => {\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${this.state.resolutions.activeResolution}&audio=${stream.stream_index}`);\n            this.video.watchTimeOffset = this.video.getRealWatchtime();\n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n            this.video.load();\n            this.video.play();\n    \n            let streams = this.state.audioStreams;\n            streams.activeStream = stream;\n            this.setState({audioStreams: streams});\n        });\n    }\n\n    enterFullScreen() {\n        let videoContainer = document.getElementById('videoContainer');\n        try {\n            if (!this.video.isFullscreen) {\n                if (this.video.requestFullscreen) {\n                    videoContainer.requestFullscreen();\n                } else if (this.video.mozRequestFullScreen) { /* Firefox */\n                    videoContainer.mozRequestFullScreen();\n                } else if (this.video.webkitRequestFullscreen) { /* Chrome, Safari & Opera */\n                    videoContainer.webkitRequestFullscreen();\n                } else if (this.video.msRequestFullscreen) { /* IE/Edge */\n                    videoContainer.msRequestFullscreen();\n                }\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                  } else if (document.mozCancelFullScreen) { /* Firefox */\n                    document.mozCancelFullScreen();\n                  } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                    document.webkitExitFullscreen();\n                  } else if (document.msExitFullscreen) { /* IE/Edge */\n                    document.msExitFullscreen();\n                  }\n            }\n            this.video.isFullscreen = !this.video.isFullscreen;\n        } catch(e) {\n\n        }\n\n\n    }\n\n    togglePlay() {\n        if (this.video.paused) {\n            this.video.play();\n\n            if (this.updateCurrentTimeInterval !== undefined) {\n                clearInterval(this.updateCurrentTimeInterval);\n            }\n    \n            this.updateCurrentTimeInterval = setInterval(() => {\n                validateServerAccess(this.server, (serverToken) => {\n                    fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/set?type=${this.type}&time=${this.video.getRealWatchtime()}&videoDuration=${this.video.realDuration}&token=${serverToken}`);\n                });\n            }, 5000);\n\n        } else {\n            clearInterval(this.updateCurrentTimeInterval);\n            this.video.pause();\n        }\n    }\n\n    seek(e) {\n        let vidTime = document.getElementById('seekbar').value / 100 * this.video.realDuration;\n        let quality = this.state.resolutions.activeResolution !== '' ? this.state.resolutions.activeResolution : '1080P';\n        let audio = this.state.audioStreams.activeStream !== undefined ? `&audio=${this.state.audioStreams.activeStream.stream_index}` : ''\n\n        validateServerAccess(this.server, (serverToken) => {\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${vidTime}&quality=${quality}${audio}`);\n            this.video.load();\n            this.video.play();\n            this.video.watchTimeOffset = vidTime;\n            this.video.isSeeking = false;\n    \n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n        });\n\n    }\n\n    startSeek() {\n        this.video.isSeeking = true;\n    }\n\n    toggleSettings() {\n        let settings = this.state.settings;\n        settings.show = !settings.show;\n        settings.resolutionControl = false;\n        settings.audioControl      = false;\n        settings.subtitleControl   = false;\n        this.setState({settings: settings});\n    }\n\n    showResolutions() {\n        let settings = this.state.settings;\n        settings.resolutionControl = true;\n        this.setState({settings: settings});\n    }\n\n    showSubtitles() {\n        let settings = this.state.settings;\n        settings.subtitleControl = true;\n        this.setState({settings: settings});\n    }\n\n    showAudioStreams() {\n        let settings = this.state.settings;\n        settings.audioControl = true;\n        this.setState({settings: settings});\n    }\n\n    showStandardSettings() {\n        let settings = this.state.settings;\n        settings.resolutionControl = false;\n        settings.audioControl      = false;\n        settings.subtitleControl   = false;\n        this.setState({settings: settings});\n    }\n\n    updateSeekTime() {\n        let range = document.getElementById('seekbar');\n        let rangeV = document.getElementById('seekTime');\n        let newValue = range.value;\n        let newPosition = 10 - (newValue * 0.2);\n\n        let seconds = Math.floor(range.value / 100 * this.video.realDuration);\n        let minutes = Math.floor(seconds / 60);\n        let hours   = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n        seconds = seconds % 60;\n\n        seconds = seconds >= 10 ? seconds : `0${seconds}`;\n        minutes = minutes >= 10 ? minutes : `0${minutes}`;\n        hours = hours >= 10 ? hours : `0${hours}`;\n\n        let time = hours !== 0 ? hours + ':' : '';\n        time += minutes + ':' + seconds;\n\n\n        rangeV.innerHTML = `<span>${time}</span>`;\n        rangeV.style.left = `calc(${newValue}% + (${newPosition}px))`;\n    }\n\n    play() {\n        this.video.play();\n    }\n    pause() {\n        this.video.pause();\n    }\n\n    getActiveSettingsName() {\n        if (this.state.settings.subtitleControl) {\n            return 'Subtitles';\n        }\n        if (this.state.settings.audioControl) {\n            return 'Audio';\n        }\n        if (this.state.settings.resolutionControl) {\n            return 'Quality';\n        }\n    }\n\n    changeVolume(e) {\n        this.video.volume = e.target.value / 100;\n    }\n\n    showControls() {\n        document.getElementById('controls').classList.add(Styles.controlsActive);\n        document.getElementById('overlay').classList.add(Styles.controlsActive);\n        document.getElementById('transparentOverlay').classList.add(Styles.controlsActive);\n        document.getElementById('videoContainer').style.cursor = 'auto';\n\n        if (this.controlTimeout != undefined) {\n            clearTimeout(this.controlTimeout);\n        }\n\n        this.controlTimeout = setTimeout(() => {\n            document.getElementById('controls').classList.remove(Styles.controlsActive);\n            document.getElementById('overlay').classList.remove(Styles.controlsActive);\n            document.getElementById('transparentOverlay').classList.remove(Styles.controlsActive);\n            document.getElementById('videoContainer').style.cursor = 'none';\n        }, 5000);\n\n    }\n\n    setTitle(title) {\n        this.setState({title: title});\n    }\n\n    setEpisode(episode, cb) {\n        this.setState({episode: episode}, () => {\n            cb();\n        });\n    }\n\n    setSeason(season, cb) {\n        this.setState({season: season}, () => {\n            cb();\n        });\n    }\n\n    render() {\n        return (\n            <>\n            <Head>\n                <script src=\"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\"></script>\n                \n            </Head>\n            <div className={Styles.videoContainer} id=\"videoContainer\" onMouseMove={this.showControls}>\n            \n\n                \n                <video crossOrigin=\"anonymous\" id=\"video\" className={Styles.videoPlayer}>\n                    <track id=\"subtitle\" kind=\"subtitles\" />\n                </video>\n\n                <div className={Styles.transparentOverlay} id=\"transparentOverlay\" onClick={this.togglePlay} onDoubleClick={this.enterFullScreen}>\n\n                </div>\n                {this.state.isBuffering &&\n                <div className={Styles.loadingOuter}>\n                    <div class={Styles.loadingInner}>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n                }\n\n                {this.state.nextEpisode != undefined && this.state.nextEpisode.show &&\n                    <div className={Styles.nextEpisode}>\n                        <h3>Nästa avsnitt spelas upp om <span id=\"timeToNextEpisode\">{this.state.nextEpisode.timeLeft}</span> sekunder</h3>\n                        <button id=\"playNextEpisode\" onClick={this.playNextEpisode}>Starta nu</button>\n                        <button id=\"cancelNextEpisode\">Avbryt</button>\n                    </div>\n                }\n\n                <div className={Styles.overlay} id=\"overlay\">\n                    <div className={Styles.back} onClick={() => Router.back()}></div>\n                    {this.type === 'serie' &&\n                        <>\n                            <h1>{this.state.title}</h1>\n                            <p>Season {this.state.season} - Episode {this.state.episode}</p>\n                        </>\n                    }\n                    {this.type === 'movie' &&\n                        <h1>{this.state.title}</h1>\n                    }\n                </div>\n\n                <div className={Styles.controller} id=\"controls\">\n                    {this.state.videoPaused &&\n                        <div className={`${Styles.playButton} ${Styles.playPause}`} onClick={this.togglePlay}></div>\n                    }\n                    {!this.state.videoPaused && \n                        <div className={`${Styles.pauseButton} ${Styles.playPause}`} onClick={this.togglePlay}></div>\n                    }\n                    <div className={Styles.seekWrapper}>\n                        <div className={Styles.seekTime} id=\"seekTime\"></div>\n                        <input type=\"range\" id=\"seekbar\" name=\"seekbar\"\n                        min=\"0\" max=\"100\" step=\"0.01\" className={Styles.seekbar} onMouseDown={this.startSeek} onMouseUp={this.seek} onInput={this.updateSeekTime}/>\n                    </div>\n\n                    <div className={Styles.settingsBox}>\n                        <div className={Styles.audioImage}></div>\n                        <input className={Styles.volumeControl} type=\"range\" id=\"volumeControl\" name=\"volume\"\n                        min=\"0\" max=\"100\" step=\"0.01\" onChange={this.changeVolume} />\n\n                        <div onClick={this.toggleSettings} className={Styles.settingsButton}></div>\n                        <div className={Styles.fullscreenImage} onClick={this.enterFullScreen}></div>\n\n                        {this.state.settings.show &&\n                            <div className={Styles.settings}>\n                                <div className={Styles.settingsBack} onClick={this.showStandardSettings}><strong>{this.getActiveSettingsName()}</strong></div>\n                                <hr style={{margin: 0}}/>\n                                {this.getSettingElements()}\n                            </div>\n                        }\n                    </div>\n\n                </div>\n\n            </div>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}