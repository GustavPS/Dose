{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/h/Code/Dose/Main Server/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/h/Code/Dose/Main Server/components/videoComponent.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Styles from './videoComponent.module.css';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\n\nvar VideoComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(VideoComponent, _React$Component);\n\n  var _super = _createSuper(VideoComponent);\n\n  function VideoComponent(props) {\n    var _this;\n\n    _classCallCheck(this, VideoComponent);\n\n    _this = _super.call(this, props); // Video element\n\n    _this.video = undefined; // Source element\n\n    _this.source = undefined; // Subtitle element\n\n    _this.subtitle = undefined; // Control timeout\n\n    _this.controlTimeout = undefined; // Update currenttime interval (for the server)\n\n    _this.updateCurrentTimeInterval = undefined; // Used for unique keys on elements.\n\n    _this.elementCounter = 0; // Function to call on time change events\n\n    _this.onTimeChange = props.onTimeChange; //this.getNextEpisodeID = props.getNextEpisodeID;\n\n    _this.onChangeEpisode = props.onChangeEpisode;\n    _this.server = props.server;\n    _this.serverToken = props.serverToken;\n    _this.type = props.Movie != undefined ? 'movie' : 'serie';\n    _this.internalID = props.internalID;\n    _this.state = {\n      subtitles: {\n        availableSubtitles: [],\n        activeSubtitle: undefined\n      },\n      resolutions: {\n        availableResolutions: [],\n        activeResolution: ''\n      },\n      audioStreams: {\n        availableStreams: [],\n        activeStream: undefined\n      },\n      settings: {\n        show: false,\n        standardControl: false,\n        audioControl: false,\n        resolutionControl: false,\n        subtitleControl: false\n      },\n      nextEpisode: _this.type === 'serie' ? {\n        timeLeft: null,\n        internalID: null,\n        season: null,\n        episode: null,\n        show: false,\n        foundNextEpisode: false\n      } : undefined,\n      videoPaused: true,\n      isBuffering: true,\n      title: props.title,\n      season: props.season,\n      episode: props.episode,\n      show: props.show\n    };\n    _this.enterFullScreen = _this.enterFullScreen.bind(_assertThisInitialized(_this));\n    _this.togglePlay = _this.togglePlay.bind(_assertThisInitialized(_this));\n    _this.seek = _this.seek.bind(_assertThisInitialized(_this));\n    _this.startSeek = _this.startSeek.bind(_assertThisInitialized(_this));\n    _this.toggleSettings = _this.toggleSettings.bind(_assertThisInitialized(_this));\n    _this.updateSeekTime = _this.updateSeekTime.bind(_assertThisInitialized(_this));\n    _this.pause = _this.pause.bind(_assertThisInitialized(_this));\n    _this.play = _this.play.bind(_assertThisInitialized(_this));\n    _this.showResolutions = _this.showResolutions.bind(_assertThisInitialized(_this));\n    _this.showAudioStreams = _this.showAudioStreams.bind(_assertThisInitialized(_this));\n    _this.showSubtitles = _this.showSubtitles.bind(_assertThisInitialized(_this));\n    _this.showStandardSettings = _this.showStandardSettings.bind(_assertThisInitialized(_this));\n    _this.changeVolume = _this.changeVolume.bind(_assertThisInitialized(_this));\n    _this.showControls = _this.showControls.bind(_assertThisInitialized(_this));\n    _this.setNextEpisodeID = _this.setNextEpisodeID.bind(_assertThisInitialized(_this));\n    _this.playNextEpisode = _this.playNextEpisode.bind(_assertThisInitialized(_this));\n    _this.getNextEpisodeID = _this.getNextEpisodeID.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VideoComponent, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.video.pause();\n      clearInterval(this.updateCurrentTimeInterval);\n      this.video.ontimeupdate = undefined;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.video = document.getElementById('video');\n      this.video.isFullscreen = false; // The duration of the movie\n\n      this.video.realDuration = 999; // The watchtime offset for the seekbar (since we change source on seek and HTML do not know the correct watchtime after we change source)\n\n      this.video.watchTimeOffset = 0; // True if we are currently seeking (Draging the seekbar);\n\n      this.video.isSeeking = false;\n      this.video.controls = false;\n      this.video.pauseTime = undefined;\n      this.source = document.createElement('source');\n      this.video.appendChild(this.source);\n      this.subtitle = document.getElementById('subtitle');\n      this.loadSources();\n      this.loadSubtitles();\n      this.loadAudioStreams();\n\n      if (this.type === 'serie') {\n        this.getNextEpisodeID();\n      }\n\n      this.video.ontimeupdate = function () {\n        if (!_this2.video.isSeeking) {\n          var percentage = (_this2.video.currentTime + _this2.video.watchTimeOffset) / _this2.video.realDuration * 100;\n          document.getElementById('seekbar').value = percentage;\n\n          _this2.updateSeekTime();\n\n          if (_this2.type === 'serie' && _this2.video.getRealWatchtime() >= _this2.video.realDuration - 40 && _this2.state.nextEpisode.foundNextEpisode) {\n            _this2.displayNextEpisodeBox();\n          }\n        }\n\n        if (_this2.state.isBuffering) {\n          _this2.setState({\n            isBuffering: false\n          });\n        }\n      }; // Returns the 'real' current time\n\n\n      this.video.getRealWatchtime = function () {\n        return _this2.video.watchTimeOffset + _this2.video.currentTime;\n      };\n\n      this.video.onpause = function () {\n        _this2.video.pauseTime = new Date();\n\n        _this2.setState({\n          videoPaused: true\n        });\n      };\n\n      this.video.onplay = function () {\n        if (_this2.video.pauseTime != undefined) {\n          var currentTime = new Date();\n          var secondsSincePause = (currentTime.getTime() - _this2.video.pauseTime.getTime()) / 1000; // TODO: This value needs to be checked, not sure what is needed\n\n          if (secondsSincePause > 15) {\n            _this2.video.pauseTime = undefined;\n\n            _this2.seek();\n          }\n        }\n\n        _this2.setState({\n          videoPaused: false,\n          isBuffering: false\n        });\n      }; // Show spinner on buffer\n\n\n      this.video.onwaiting = function () {\n        _this2.setState({\n          isBuffering: true\n        });\n      };\n    }\n  }, {\n    key: \"updateServerToken\",\n    value: function updateServerToken(token, cb) {\n      this.serverToken = token;\n      cb();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      document.getElementById('videoContainer').style.display = 'block';\n      this.togglePlay();\n    }\n  }, {\n    key: \"setNextEpisodeID\",\n    value: function setNextEpisodeID(id, season, episode, foundNextEpisode) {\n      console.log(\"Found next episode: \".concat(foundNextEpisode, \", episodeID: \").concat(id));\n      var nextEpisode = this.state.nextEpisode;\n\n      if (foundNextEpisode) {\n        nextEpisode.internalID = id;\n        nextEpisode.foundNextEpisode = true;\n        nextEpisode.season = season;\n        nextEpisode.episode = episode;\n      } else {\n        nextEpisode.foundNextEpisode = false;\n      }\n\n      this.setState({\n        nextEpisode: nextEpisode\n      });\n    }\n  }, {\n    key: \"getNextEpisodeID\",\n    value: function getNextEpisodeID() {\n      var _this3 = this;\n\n      validateServerAccess(this.server, function (serverToken) {\n        console.log(\"EP: \" + _this3.state.episode);\n        fetch(\"\".concat(_this3.server.server_ip, \"/api/series/getNextEpisode?serie_id=\").concat(_this3.state.show, \"&season=\").concat(_this3.state.season, \"&episode=\").concat(_this3.state.episode, \"&token=\").concat(serverToken)).then(function (r) {\n          return r.json();\n        }).then(function (result) {\n          _this3.setNextEpisodeID(result.internalID, result.season, result.episode, result.foundEpisode);\n        });\n      });\n    }\n  }, {\n    key: \"displayNextEpisodeBox\",\n    value: function displayNextEpisodeBox() {\n      var nextEpisode = this.state.nextEpisode;\n      var timeLeft = Math.floor(this.video.realDuration - this.video.getRealWatchtime());\n\n      if (timeLeft === 0) {\n        this.playNextEpisode();\n      } else {\n        nextEpisode.timeLeft = timeLeft;\n        nextEpisode.show = true;\n      }\n\n      this.setState({\n        nextEpisode: nextEpisode\n      });\n    }\n  }, {\n    key: \"playNextEpisode\",\n    value: function () {\n      var _playNextEpisode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this4 = this;\n\n        var nextEpisode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nextEpisode = this.state.nextEpisode;\n                this.internalID = this.state.nextEpisode.internalID;\n                nextEpisode.timeLeft = null;\n                nextEpisode.internalID = null;\n                nextEpisode.show = false;\n                nextEpisode.foundNextEpisode = false;\n                this.video.watchTimeOffset = 0;\n                _context.next = 9;\n                return this.loadAudioStreams();\n\n              case 9:\n                this.loadSources(true).then(function () {\n                  _this4.loadSubtitles();\n\n                  if (_this4.onChangeEpisode != undefined) {\n                    _this4.onChangeEpisode(_this4.state.nextEpisode.season, _this4.state.nextEpisode.episode, _this4.internalID);\n                  }\n                });\n                this.setState({\n                  nextEpisode: nextEpisode\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function playNextEpisode() {\n        return _playNextEpisode.apply(this, arguments);\n      }\n\n      return playNextEpisode;\n    }()\n  }, {\n    key: \"loadSubtitles\",\n    value: function loadSubtitles() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        validateServerAccess(_this5.server, function (serverToken) {\n          fetch(\"\".concat(_this5.server.server_ip, \"/api/subtitles/list?content=\").concat(_this5.internalID, \"&type=\").concat(_this5.type, \"&token=\").concat(serverToken)).then(function (r) {\n            return r.json();\n          }).then(function (result) {\n            var noSub = {\n              id: -1,\n              language: 'None'\n            };\n            var stateSubs = _this5.state.subtitles;\n            stateSubs.availableSubtitles = result.subtitles;\n            stateSubs.availableSubtitles.push(noSub); // If a subtitle was already selected (on automatic change episode), try to find a subtitle with the same language and set that as active.\n\n            var found = false;\n\n            if (_this5.state.subtitles.activeSubtitle !== undefined) {\n              var _iterator = _createForOfIteratorHelper(result.subtitles),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var subtitle = _step.value;\n\n                  if (_this5.state.subtitles.activeSubtitle.language === subtitle.language) {\n                    found = true;\n\n                    _this5.changeSubtitle(subtitle);\n\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            if (!found) {\n              _this5.changeSubtitle(noSub);\n            }\n\n            _this5.setState({\n              subtitles: stateSubs\n            });\n\n            resolve();\n          })[\"catch\"](function (e) {\n            // TODO: Error handling\n            console.log(e);\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"loadAudioStreams\",\n    value: function loadAudioStreams() {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        validateServerAccess(_this6.server, function (serverToken) {\n          fetch(\"\".concat(_this6.server.server_ip, \"/api/video/\").concat(_this6.internalID, \"/getLanguages?type=\").concat(_this6.type, \"&token=\").concat(serverToken)).then(function (r) {\n            return r.json();\n          }).then(function (result) {\n            console.log(result);\n            var currentState = _this6.state.audioStreams;\n            currentState.availableStreams = result;\n\n            _this6.setState({\n              audioStreams: currentState\n            }, function () {\n              return resolve();\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"loadSources\",\n    value: function loadSources() {\n      var _this7 = this;\n\n      var autoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Promise(function (resolve) {\n        validateServerAccess(_this7.server, function (serverToken) {\n          // Set the duration of the video\n          fetch(\"\".concat(_this7.server.server_ip, \"/api/video/\").concat(_this7.internalID, \"/getDuration?type=\").concat(_this7.type, \"&token=\").concat(serverToken)).then(function (r) {\n            return r.json();\n          }).then(function (data) {\n            _this7.video.realDuration = data.duration;\n          }); // Get the current time for this video\n\n          fetch(\"\".concat(_this7.server.server_ip, \"/api/video/\").concat(_this7.internalID, \"/currenttime/get?type=\").concat(_this7.type, \"&token=\").concat(serverToken), {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (r) {\n            return r.json();\n          }).then(function (time) {\n            time = time.time;\n            _this7.video.watchTimeOffset = time; // Get the available resolutions for this video\n\n            fetch(\"\".concat(_this7.server.server_ip, \"/api/video/\").concat(_this7.internalID, \"/getResolution?type=\").concat(_this7.type, \"&token=\").concat(serverToken), {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (r) {\n              return r.json();\n            }).then(function (result) {\n              // If we already have selected an audio stream, change to that one.\n              var audio = '';\n              var audioState = _this7.state.audioStreams;\n\n              if (_this7.state.audioStreams.activeStream !== undefined) {\n                var _iterator2 = _createForOfIteratorHelper(_this7.state.audioStreams.availableStreams),\n                    _step2;\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var stream = _step2.value;\n\n                    if (_this7.state.audioStreams.activeStream.shortName === stream.shortName) {\n                      audio = \"&audio=\".concat(stream.stream_index);\n                      audioState.activeStream = stream;\n                      break;\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n              } // If we didn't find a match for the langauges, (maybe this video don't have that language): Set the activeAudioStream to undefined (which will give us default audio for the file)\n\n\n              if (audio === '') {\n                audioState.activeStream = undefined;\n              } // Change the available resolutions\n\n\n              var resolutions = _this7.state.resolutions;\n              resolutions.availableResolutions = result.resolutions;\n\n              if (result.directplay) {\n                _this7.source.setAttribute('src', \"\".concat(_this7.server.server_ip, \"/api/video/\").concat(_this7.internalID, \"?type=\").concat(_this7.type, \"&token=\").concat(serverToken, \"&start=\").concat(time, \"&quality=directplay\").concat(audio));\n\n                resolutions.activeResolution = 'directplay';\n                resolutions.availableResolutions.push('directplay');\n              } else {\n                _this7.source.setAttribute('src', \"\".concat(_this7.server.server_ip, \"/api/video/\").concat(_this7.internalID, \"?type=\").concat(_this7.type, \"&token=\").concat(serverToken, \"&start=\").concat(time, \"&quality=1080P\").concat(audio));\n\n                resolutions.activeResolution = '1080P';\n              } // Save the new resolution state and audioState\n\n\n              _this7.setState({\n                resolutions: resolutions,\n                audioStreams: audioState\n              });\n\n              _this7.video.load();\n\n              if (autoplay) {\n                _this7.video.play();\n              }\n\n              resolve();\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getSettingElements\",\n    value: function getSettingElements() {\n      var _this8 = this;\n\n      var elements = []; // If we should display resulution controls\n\n      if (this.state.settings.resolutionControl) {\n        console.log(this.state.resolutions);\n\n        var _iterator3 = _createForOfIteratorHelper(this.state.resolutions.availableResolutions),\n            _step3;\n\n        try {\n          var _loop = function _loop() {\n            var resolution = _step3.value;\n            elements.push(__jsx(\"a\", {\n              href: \"#\",\n              key: _this8.elementCounter,\n              className: resolution === _this8.state.resolutions.activeResolution ? Styles.active : '',\n              onClick: function onClick() {\n                return _this8.changeResolution(resolution);\n              },\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 21\n              }\n            }, resolution));\n            _this8.elementCounter++;\n          };\n\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            _loop();\n          } // If we should display subtitle controls\n\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else if (this.state.settings.subtitleControl) {\n        var _iterator4 = _createForOfIteratorHelper(this.state.subtitles.availableSubtitles),\n            _step4;\n\n        try {\n          var _loop2 = function _loop2() {\n            var subtitle = _step4.value;\n            elements.push(__jsx(\"a\", {\n              href: \"#\",\n              style: {\n                position: 'relative'\n              },\n              key: _this8.elementCounter,\n              className: _this8.state.subtitles.activeSubtitle != undefined && subtitle.id === _this8.state.subtitles.activeSubtitle.id ? Styles.active : '',\n              onClick: function onClick() {\n                return _this8.changeSubtitle(subtitle);\n              },\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }\n            }, subtitle.extracted && __jsx(\"img\", {\n              className: Styles.subtitleVariant,\n              src: \"\".concat(process.env.NEXT_PUBLIC_SERVER_URL, \"/images/check.png\"),\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 29\n              }\n            }), !subtitle.extracted && subtitle.synced && __jsx(\"img\", {\n              className: Styles.subtitleVariant,\n              src: \"\".concat(process.env.NEXT_PUBLIC_SERVER_URL, \"/images/hourglass.png\"),\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 29\n              }\n            }), subtitle.language));\n            elements.push(__jsx(\"hr\", {\n              style: {\n                margin: '0',\n                padding: '0'\n              },\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 31\n              }\n            }));\n            _this8.elementCounter++;\n          };\n\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            _loop2();\n          } // If we should display audio controls\n\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else if (this.state.settings.audioControl) {\n        var _iterator5 = _createForOfIteratorHelper(this.state.audioStreams.availableStreams),\n            _step5;\n\n        try {\n          var _loop3 = function _loop3() {\n            var stream = _step5.value;\n            console.log(stream);\n            elements.push(__jsx(\"a\", {\n              href: \"#\",\n              key: _this8.elementCounter,\n              className: _this8.state.audioStreams.activeStream != undefined && stream.id === _this8.state.audioStreams.activeStream.id ? Styles.active : '',\n              onClick: function onClick() {\n                return _this8.changeAudioStream(stream);\n              },\n              __self: _this8,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 21\n              }\n            }, stream.longName));\n            _this8.elementCounter++;\n          };\n\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            _loop3();\n          } // If we should display standard controls\n\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      } else {\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          key: this.elementCounter,\n          onClick: this.showResolutions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 17\n          }\n        }, \"Quality\"));\n        this.elementCounter++;\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          key: this.elementCounter,\n          onClick: this.showAudioStreams,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 17\n          }\n        }, \"Audio\"));\n        this.elementCounter++;\n        elements.push(__jsx(\"a\", {\n          href: \"#\",\n          key: this.elementCounter,\n          onClick: this.showSubtitles,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }\n        }, \"Subtitles\"));\n        this.elementCounter++;\n      }\n\n      return elements;\n    }\n  }, {\n    key: \"changeResolution\",\n    value: function changeResolution(resolution) {\n      var _this9 = this;\n\n      validateServerAccess(this.server, function (serverToken) {\n        var audioSource = \"\";\n        var activeStream = _this9.state.audioStreams.activeStream;\n\n        if (activeStream != undefined) {\n          audioSource = \"&audio=\".concat(activeStream.stream_index);\n        }\n\n        _this9.source.setAttribute('src', \"\".concat(_this9.server.server_ip, \"/api/video/\").concat(_this9.internalID, \"?type=\").concat(_this9.type, \"&token=\").concat(serverToken, \"&start=\").concat(_this9.video.getRealWatchtime(), \"&quality=\").concat(resolution).concat(audioSource)); // Change the watchTimeOffset to proberly sync subtitles and seekbar.\n\n\n        _this9.video.watchTimeOffset = _this9.video.getRealWatchtime();\n\n        _this9.changeSubtitle(_this9.state.subtitles.activeSubtitle);\n\n        _this9.video.load();\n\n        _this9.video.play(); // Change the active resolution in the state\n\n\n        var resolutions = _this9.state.resolutions;\n        resolutions.activeResolution = resolution;\n\n        _this9.setState({\n          resolutions: resolutions\n        });\n      });\n    }\n  }, {\n    key: \"changeSubtitle\",\n    value: function changeSubtitle(subtitle) {\n      var _this10 = this;\n\n      var stateSubs = this.state.subtitles;\n\n      if (subtitle == undefined) {\n        return;\n      } // Fix to prevent subs getting \"stuck\" when seeking\n\n\n      this.video.textTracks[0].mode = 'hidden';\n\n      if (subtitle.id === -1) {\n        this.video.textTracks[0].mode = 'hidden';\n        stateSubs.activeSubtitle = subtitle;\n        this.setState({\n          subtitles: stateSubs\n        });\n        return;\n      }\n\n      validateServerAccess(this.server, function (serverToken) {\n        _this10.subtitle.setAttribute('src', \"\".concat(_this10.server.server_ip, \"/api/subtitles/get?id=\").concat(subtitle.id, \"&type=\").concat(_this10.type, \"&start=\").concat(_this10.video.getRealWatchtime() - _this10.video.currentTime, \"&token=\").concat(serverToken));\n\n        _this10.video.textTracks[0].mode = 'showing';\n        stateSubs.activeSubtitle = subtitle;\n\n        _this10.setState({\n          subtitles: stateSubs\n        });\n      });\n    }\n  }, {\n    key: \"changeAudioStream\",\n    value: function changeAudioStream(stream) {\n      var _this11 = this;\n\n      // If we changed to the same audio stream\n      if (this.state.audioStreams.activeStream !== undefined && stream.id === this.state.audioStreams.activeStream.id) {\n        return;\n      }\n\n      validateServerAccess(this.server, function (serverToken) {\n        _this11.source.setAttribute('src', \"\".concat(_this11.server.server_ip, \"/api/video/\").concat(_this11.internalID, \"?type=\").concat(_this11.type, \"&token=\").concat(serverToken, \"&start=\").concat(_this11.video.getRealWatchtime(), \"&quality=\").concat(_this11.state.resolutions.activeResolution, \"&audio=\").concat(stream.stream_index));\n\n        _this11.video.watchTimeOffset = _this11.video.getRealWatchtime();\n\n        _this11.changeSubtitle(_this11.state.subtitles.activeSubtitle);\n\n        _this11.video.load();\n\n        _this11.video.play();\n\n        var streams = _this11.state.audioStreams;\n        streams.activeStream = stream;\n\n        _this11.setState({\n          audioStreams: streams\n        });\n      });\n    }\n  }, {\n    key: \"enterFullScreen\",\n    value: function enterFullScreen() {\n      var videoContainer = document.getElementById('videoContainer');\n\n      try {\n        if (!this.video.isFullscreen) {\n          if (this.video.requestFullscreen) {\n            videoContainer.requestFullscreen();\n          } else if (this.video.mozRequestFullScreen) {\n            /* Firefox */\n            videoContainer.mozRequestFullScreen();\n          } else if (this.video.webkitRequestFullscreen) {\n            /* Chrome, Safari & Opera */\n            videoContainer.webkitRequestFullscreen();\n          } else if (this.video.msRequestFullscreen) {\n            /* IE/Edge */\n            videoContainer.msRequestFullscreen();\n          }\n        } else {\n          if (document.exitFullscreen) {\n            document.exitFullscreen();\n          } else if (document.mozCancelFullScreen) {\n            /* Firefox */\n            document.mozCancelFullScreen();\n          } else if (document.webkitExitFullscreen) {\n            /* Chrome, Safari and Opera */\n            document.webkitExitFullscreen();\n          } else if (document.msExitFullscreen) {\n            /* IE/Edge */\n            document.msExitFullscreen();\n          }\n        }\n\n        this.video.isFullscreen = !this.video.isFullscreen;\n      } catch (e) {}\n    }\n  }, {\n    key: \"togglePlay\",\n    value: function togglePlay() {\n      var _this12 = this;\n\n      if (this.video.paused) {\n        this.video.play();\n\n        if (this.updateCurrentTimeInterval !== undefined) {\n          clearInterval(this.updateCurrentTimeInterval);\n        }\n\n        this.updateCurrentTimeInterval = setInterval(function () {\n          validateServerAccess(_this12.server, function (serverToken) {\n            fetch(\"\".concat(_this12.server.server_ip, \"/api/video/\").concat(_this12.internalID, \"/currenttime/set?type=\").concat(_this12.type, \"&time=\").concat(_this12.video.getRealWatchtime(), \"&videoDuration=\").concat(_this12.video.realDuration, \"&token=\").concat(serverToken));\n          });\n        }, 5000);\n      } else {\n        clearInterval(this.updateCurrentTimeInterval);\n        this.video.pause();\n      }\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(e) {\n      var _this13 = this;\n\n      var vidTime = document.getElementById('seekbar').value / 100 * this.video.realDuration;\n      var quality = this.state.resolutions.activeResolution !== '' ? this.state.resolutions.activeResolution : '1080P';\n      var audio = this.state.audioStreams.activeStream !== undefined ? \"&audio=\".concat(this.state.audioStreams.activeStream.stream_index) : '';\n      validateServerAccess(this.server, function (serverToken) {\n        _this13.source.setAttribute('src', \"\".concat(_this13.server.server_ip, \"/api/video/\").concat(_this13.internalID, \"?type=\").concat(_this13.type, \"&token=\").concat(serverToken, \"&start=\").concat(vidTime, \"&quality=\").concat(quality).concat(audio));\n\n        _this13.video.load();\n\n        _this13.video.play();\n\n        _this13.video.watchTimeOffset = vidTime;\n        _this13.video.isSeeking = false;\n\n        _this13.changeSubtitle(_this13.state.subtitles.activeSubtitle);\n      });\n    }\n  }, {\n    key: \"startSeek\",\n    value: function startSeek() {\n      this.video.isSeeking = true;\n    }\n  }, {\n    key: \"toggleSettings\",\n    value: function toggleSettings() {\n      var settings = this.state.settings;\n      settings.show = !settings.show;\n      settings.resolutionControl = false;\n      settings.audioControl = false;\n      settings.subtitleControl = false;\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"showResolutions\",\n    value: function showResolutions() {\n      var settings = this.state.settings;\n      settings.resolutionControl = true;\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"showSubtitles\",\n    value: function showSubtitles() {\n      var settings = this.state.settings;\n      settings.subtitleControl = true;\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"showAudioStreams\",\n    value: function showAudioStreams() {\n      var settings = this.state.settings;\n      settings.audioControl = true;\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"showStandardSettings\",\n    value: function showStandardSettings() {\n      var settings = this.state.settings;\n      settings.resolutionControl = false;\n      settings.audioControl = false;\n      settings.subtitleControl = false;\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"updateSeekTime\",\n    value: function updateSeekTime() {\n      var range = document.getElementById('seekbar');\n      var rangeV = document.getElementById('seekTime');\n      var newValue = range.value;\n      var newPosition = 10 - newValue * 0.2;\n      var seconds = Math.floor(range.value / 100 * this.video.realDuration);\n      var minutes = Math.floor(seconds / 60);\n      var hours = Math.floor(minutes / 60);\n      minutes = minutes % 60;\n      seconds = seconds % 60;\n      seconds = seconds >= 10 ? seconds : \"0\".concat(seconds);\n      minutes = minutes >= 10 ? minutes : \"0\".concat(minutes);\n      hours = hours >= 10 ? hours : \"0\".concat(hours);\n      var time = hours !== 0 ? hours + ':' : '';\n      time += minutes + ':' + seconds;\n      rangeV.innerHTML = \"<span>\".concat(time, \"</span>\");\n      rangeV.style.left = \"calc(\".concat(newValue, \"% + (\").concat(newPosition, \"px))\");\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.video.play();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.video.pause();\n    }\n  }, {\n    key: \"getActiveSettingsName\",\n    value: function getActiveSettingsName() {\n      if (this.state.settings.subtitleControl) {\n        return 'Subtitles';\n      }\n\n      if (this.state.settings.audioControl) {\n        return 'Audio';\n      }\n\n      if (this.state.settings.resolutionControl) {\n        return 'Quality';\n      }\n    }\n  }, {\n    key: \"changeVolume\",\n    value: function changeVolume(e) {\n      this.video.volume = e.target.value / 100;\n    }\n  }, {\n    key: \"showControls\",\n    value: function showControls() {\n      document.getElementById('controls').classList.add(Styles.controlsActive);\n      document.getElementById('overlay').classList.add(Styles.controlsActive);\n      document.getElementById('transparentOverlay').classList.add(Styles.controlsActive);\n      document.getElementById('videoContainer').style.cursor = 'auto';\n\n      if (this.controlTimeout != undefined) {\n        clearTimeout(this.controlTimeout);\n      }\n\n      this.controlTimeout = setTimeout(function () {\n        document.getElementById('controls').classList.remove(Styles.controlsActive);\n        document.getElementById('overlay').classList.remove(Styles.controlsActive);\n        document.getElementById('transparentOverlay').classList.remove(Styles.controlsActive);\n        document.getElementById('videoContainer').style.cursor = 'none';\n      }, 5000);\n    }\n  }, {\n    key: \"setTitle\",\n    value: function setTitle(title) {\n      this.setState({\n        title: title\n      });\n    }\n  }, {\n    key: \"setEpisode\",\n    value: function setEpisode(episode, cb) {\n      this.setState({\n        episode: episode\n      }, function () {\n        cb();\n      });\n    }\n  }, {\n    key: \"setSeason\",\n    value: function setSeason(season, cb) {\n      this.setState({\n        season: season\n      }, function () {\n        cb();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 13\n        }\n      }, __jsx(\"script\", {\n        src: \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 17\n        }\n      })), __jsx(\"div\", {\n        className: Styles.videoContainer,\n        id: \"videoContainer\",\n        onMouseMove: this.showControls,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }\n      }, __jsx(\"video\", {\n        crossOrigin: \"anonymous\",\n        id: \"video\",\n        className: Styles.videoPlayer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 17\n        }\n      }, __jsx(\"track\", {\n        id: \"subtitle\",\n        kind: \"subtitles\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 21\n        }\n      })), __jsx(\"div\", {\n        className: Styles.transparentOverlay,\n        id: \"transparentOverlay\",\n        onClick: this.togglePlay,\n        onDoubleClick: this.enterFullScreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 17\n        }\n      }), this.state.isBuffering && __jsx(\"div\", {\n        className: Styles.loadingOuter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        \"class\": Styles.loadingInner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 25\n        }\n      }))), this.state.nextEpisode != undefined && this.state.nextEpisode.show && __jsx(\"div\", {\n        className: Styles.nextEpisode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 21\n        }\n      }, __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 25\n        }\n      }, \"N\\xE4sta avsnitt spelas upp om \", __jsx(\"span\", {\n        id: \"timeToNextEpisode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 57\n        }\n      }, this.state.nextEpisode.timeLeft), \" sekunder\"), __jsx(\"button\", {\n        id: \"playNextEpisode\",\n        onClick: this.playNextEpisode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 25\n        }\n      }, \"Starta nu\"), __jsx(\"button\", {\n        id: \"cancelNextEpisode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 25\n        }\n      }, \"Avbryt\")), __jsx(\"div\", {\n        className: Styles.overlay,\n        id: \"overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: Styles.back,\n        onClick: function onClick() {\n          return Router.back();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 21\n        }\n      }), this.type === 'serie' && __jsx(React.Fragment, null, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 29\n        }\n      }, this.state.title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 29\n        }\n      }, \"Season \", this.state.season, \" - Episode \", this.state.episode)), this.type === 'movie' && __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 25\n        }\n      }, this.state.title)), __jsx(\"div\", {\n        className: Styles.controller,\n        id: \"controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 17\n        }\n      }, this.state.videoPaused && __jsx(\"div\", {\n        className: \"\".concat(Styles.playButton, \" \").concat(Styles.playPause),\n        onClick: this.togglePlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 25\n        }\n      }), !this.state.videoPaused && __jsx(\"div\", {\n        className: \"\".concat(Styles.pauseButton, \" \").concat(Styles.playPause),\n        onClick: this.togglePlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        className: Styles.seekWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: Styles.seekTime,\n        id: \"seekTime\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 25\n        }\n      }), __jsx(\"input\", {\n        type: \"range\",\n        id: \"seekbar\",\n        name: \"seekbar\",\n        min: \"0\",\n        max: \"100\",\n        step: \"0.01\",\n        className: Styles.seekbar,\n        onMouseDown: this.startSeek,\n        onMouseUp: this.seek,\n        onInput: this.updateSeekTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 25\n        }\n      })), __jsx(\"div\", {\n        className: Styles.settingsBox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: Styles.audioImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 25\n        }\n      }), __jsx(\"input\", {\n        className: Styles.volumeControl,\n        type: \"range\",\n        id: \"volumeControl\",\n        name: \"volume\",\n        min: \"0\",\n        max: \"100\",\n        step: \"0.01\",\n        onChange: this.changeVolume,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        onClick: this.toggleSettings,\n        className: Styles.settingsButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        className: Styles.fullscreenImage,\n        onClick: this.enterFullScreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 25\n        }\n      }), this.state.settings.show && __jsx(\"div\", {\n        className: Styles.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 29\n        }\n      }, __jsx(\"div\", {\n        className: Styles.settingsBack,\n        onClick: this.showStandardSettings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 33\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 106\n        }\n      }, this.getActiveSettingsName())), __jsx(\"hr\", {\n        style: {\n          margin: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 33\n        }\n      }), this.getSettingElements())))));\n    }\n  }]);\n\n  return VideoComponent;\n}(React.Component);\n\nexport { VideoComponent as default };","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/components/videoComponent.js"],"names":["Styles","Head","Router","validateServerAccess","VideoComponent","props","video","undefined","source","subtitle","controlTimeout","updateCurrentTimeInterval","elementCounter","onTimeChange","onChangeEpisode","server","serverToken","type","Movie","internalID","state","subtitles","availableSubtitles","activeSubtitle","resolutions","availableResolutions","activeResolution","audioStreams","availableStreams","activeStream","settings","show","standardControl","audioControl","resolutionControl","subtitleControl","nextEpisode","timeLeft","season","episode","foundNextEpisode","videoPaused","isBuffering","title","enterFullScreen","bind","togglePlay","seek","startSeek","toggleSettings","updateSeekTime","pause","play","showResolutions","showAudioStreams","showSubtitles","showStandardSettings","changeVolume","showControls","setNextEpisodeID","playNextEpisode","getNextEpisodeID","clearInterval","ontimeupdate","document","getElementById","isFullscreen","realDuration","watchTimeOffset","isSeeking","controls","pauseTime","createElement","appendChild","loadSources","loadSubtitles","loadAudioStreams","percentage","currentTime","value","getRealWatchtime","displayNextEpisodeBox","setState","onpause","Date","onplay","secondsSincePause","getTime","onwaiting","token","cb","time","style","display","id","console","log","fetch","server_ip","then","r","json","result","foundEpisode","Math","floor","Promise","resolve","noSub","language","stateSubs","push","found","changeSubtitle","e","currentState","autoplay","data","duration","method","headers","audio","audioState","stream","shortName","stream_index","directplay","setAttribute","load","elements","resolution","active","changeResolution","position","extracted","subtitleVariant","process","env","NEXT_PUBLIC_SERVER_URL","synced","margin","padding","changeAudioStream","longName","audioSource","textTracks","mode","streams","videoContainer","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","paused","setInterval","vidTime","quality","range","rangeV","newValue","newPosition","seconds","minutes","hours","innerHTML","left","volume","target","classList","add","controlsActive","cursor","clearTimeout","setTimeout","remove","videoPlayer","transparentOverlay","loadingOuter","loadingInner","overlay","back","controller","playButton","playPause","pauseButton","seekWrapper","seekTime","seekbar","settingsBox","audioImage","volumeControl","settingsButton","fullscreenImage","settingsBack","getActiveSettingsName","getSettingElements","React","Component"],"mappings":"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","sourcesContent":["import Styles from './videoComponent.module.css';\nimport Head from 'next/head'\nimport Router from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\n\nexport default class VideoComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        // Video element\n        this.video = undefined;\n        // Source element\n        this.source = undefined;\n        // Subtitle element\n        this.subtitle = undefined;\n        // Control timeout\n        this.controlTimeout = undefined;\n        // Update currenttime interval (for the server)\n        this.updateCurrentTimeInterval = undefined;\n        // Used for unique keys on elements.\n        this.elementCounter = 0;\n        // Function to call on time change events\n        this.onTimeChange = props.onTimeChange;\n        //this.getNextEpisodeID = props.getNextEpisodeID;\n\n        this.onChangeEpisode = props.onChangeEpisode;\n\n        this.server = props.server;\n        this.serverToken = props.serverToken;\n        this.type = props.Movie != undefined ? 'movie' : 'serie'\n        this.internalID = props.internalID;\n\n        this.state = {\n            subtitles: {\n                availableSubtitles: [],\n                activeSubtitle: undefined\n            },\n            resolutions: {\n                availableResolutions: [],\n                activeResolution: ''\n            },\n            audioStreams: {\n                availableStreams: [],\n                activeStream: undefined\n            },\n            settings: {\n                show: false,\n                standardControl: false,\n                audioControl: false,\n                resolutionControl: false,\n                subtitleControl: false\n            },\n            nextEpisode: this.type === 'serie' ? {\n                timeLeft: null,\n                internalID: null,\n                season: null,\n                episode: null,\n                show: false,\n                foundNextEpisode: false\n            } : undefined,\n            videoPaused: true,\n            isBuffering: true,\n            title: props.title,\n            season: props.season,\n            episode: props.episode,\n            show: props.show\n        }\n\n        this.enterFullScreen      = this.enterFullScreen.bind(this);\n        this.togglePlay           = this.togglePlay.bind(this);\n        this.seek                 = this.seek.bind(this);\n        this.startSeek            = this.startSeek.bind(this);\n        this.toggleSettings       = this.toggleSettings.bind(this);\n        this.updateSeekTime       = this.updateSeekTime.bind(this);\n        this.pause                = this.pause.bind(this);\n        this.play                 = this.play.bind(this);\n        this.showResolutions      = this.showResolutions.bind(this);\n        this.showAudioStreams     = this.showAudioStreams.bind(this);\n        this.showSubtitles        = this.showSubtitles.bind(this);\n        this.showStandardSettings = this.showStandardSettings.bind(this);\n        this.changeVolume         = this.changeVolume.bind(this);\n        this.showControls         = this.showControls.bind(this);\n        this.setNextEpisodeID     = this.setNextEpisodeID.bind(this);\n        this.playNextEpisode      = this.playNextEpisode.bind(this);\n        this.getNextEpisodeID     = this.getNextEpisodeID.bind(this);\n    }\n\n    componentWillUnmount() {\n        this.video.pause();\n        clearInterval(this.updateCurrentTimeInterval);\n        this.video.ontimeupdate = undefined;\n    }\n\n    componentDidMount() {\n        this.video = document.getElementById('video');\n        this.video.isFullscreen = false;\n\n        // The duration of the movie\n        this.video.realDuration = 999;\n        // The watchtime offset for the seekbar (since we change source on seek and HTML do not know the correct watchtime after we change source)\n        this.video.watchTimeOffset = 0;\n        // True if we are currently seeking (Draging the seekbar);\n        this.video.isSeeking = false;\n        this.video.controls = false;\n        this.video.pauseTime = undefined;\n\n\n        this.source = document.createElement('source');\n        this.video.appendChild(this.source);\n\n        this.subtitle = document.getElementById('subtitle');\n\n        this.loadSources();\n        this.loadSubtitles();\n        this.loadAudioStreams();\n\n        if (this.type === 'serie') {\n            this.getNextEpisodeID();\n        }\n\n\n        this.video.ontimeupdate = () => {\n            if (!this.video.isSeeking) {\n                let percentage = ((this.video.currentTime + this.video.watchTimeOffset) / this.video.realDuration) * 100;\n                document.getElementById('seekbar').value = percentage\n                this.updateSeekTime();\n                \n                if (this.type === 'serie' && this.video.getRealWatchtime() >= this.video.realDuration - 40 && this.state.nextEpisode.foundNextEpisode) {\n                    this.displayNextEpisodeBox();\n                }\n            }\n            if(this.state.isBuffering) {\n                this.setState({isBuffering: false});\n            }\n        }\n\n        // Returns the 'real' current time\n        this.video.getRealWatchtime = () => {\n            return this.video.watchTimeOffset + this.video.currentTime;\n        }\n\n        this.video.onpause = () => {\n            this.video.pauseTime = new Date();\n            this.setState({videoPaused: true});\n        }\n        this.video.onplay = () => {\n            if (this.video.pauseTime != undefined) {\n                let currentTime = new Date();\n                let secondsSincePause = (currentTime.getTime() - this.video.pauseTime.getTime()) / 1000;\n                // TODO: This value needs to be checked, not sure what is needed\n                if (secondsSincePause > 15) {\n                    this.video.pauseTime = undefined;\n                    this.seek();\n                }\n            }\n            this.setState({videoPaused: false, isBuffering: false});\n        }\n        // Show spinner on buffer\n        this.video.onwaiting = () => {\n            this.setState({isBuffering: true});\n        };\n    }\n\n    updateServerToken(token, cb) {\n        this.serverToken = token;\n        cb();\n    }\n\n    show(time=0) {\n        document.getElementById('videoContainer').style.display = 'block';\n        this.togglePlay();\n    }\n\n    setNextEpisodeID(id, season, episode, foundNextEpisode) {\n        console.log(`Found next episode: ${foundNextEpisode}, episodeID: ${id}`);\n        let nextEpisode = this.state.nextEpisode;\n\n        if (foundNextEpisode) {\n            nextEpisode.internalID = id;\n            nextEpisode.foundNextEpisode = true;\n            nextEpisode.season = season;\n            nextEpisode.episode = episode;\n        } else {\n            nextEpisode.foundNextEpisode = false;\n        }\n        this.setState({nextEpisode: nextEpisode});\n    }\n\n    getNextEpisodeID() {\n        validateServerAccess(this.server, (serverToken) => {\n            console.log(\"EP: \" + this.state.episode)\n            fetch(`${this.server.server_ip}/api/series/getNextEpisode?serie_id=${this.state.show}&season=${this.state.season}&episode=${this.state.episode}&token=${serverToken}`)\n            .then(r => r.json())\n            .then(result => {\n                this.setNextEpisodeID(result.internalID, result.season, result.episode, result.foundEpisode);\n            });\n        });\n    }\n\n    displayNextEpisodeBox() {\n        let nextEpisode = this.state.nextEpisode;\n        let timeLeft = Math.floor(this.video.realDuration - this.video.getRealWatchtime());\n        if (timeLeft === 0) {\n            this.playNextEpisode();\n        } else {\n            nextEpisode.timeLeft = timeLeft;\n            nextEpisode.show = true;\n        }\n\n        this.setState({nextEpisode: nextEpisode});\n    }\n\n    async playNextEpisode() {\n        let nextEpisode = this.state.nextEpisode;\n        this.internalID = this.state.nextEpisode.internalID;\n        nextEpisode.timeLeft = null;\n        nextEpisode.internalID = null;\n        nextEpisode.show = false;\n        nextEpisode.foundNextEpisode = false;\n        this.video.watchTimeOffset = 0;\n\n        await this.loadAudioStreams();\n        this.loadSources(true).then(() => {\n            this.loadSubtitles();\n            if (this.onChangeEpisode != undefined) {\n                this.onChangeEpisode(this.state.nextEpisode.season, this.state.nextEpisode.episode, this.internalID);\n            }\n        });\n        this.setState({nextEpisode: nextEpisode});\n        \n    }\n\n    loadSubtitles() {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n                fetch(`${this.server.server_ip}/api/subtitles/list?content=${this.internalID}&type=${this.type}&token=${serverToken}`)\n                .then(r => r.json())\n                .then(result => {\n                    let noSub = {id: -1, language: 'None'};\n                    let stateSubs = this.state.subtitles;\n                    stateSubs.availableSubtitles = result.subtitles;\n                    stateSubs.availableSubtitles.push(noSub);\n    \n                    // If a subtitle was already selected (on automatic change episode), try to find a subtitle with the same language and set that as active.\n                    let found = false;\n                    if (this.state.subtitles.activeSubtitle !== undefined) {\n                        for (let subtitle of result.subtitles) {\n                            if (this.state.subtitles.activeSubtitle.language === subtitle.language) {\n                                found = true;\n                                this.changeSubtitle(subtitle);\n                                break;\n                            }\n                        }\n                    }\n    \n                    \n                    if (!found) {\n                        this.changeSubtitle(noSub);\n                    }\n                    this.setState({subtitles: stateSubs});\n                    resolve();\n                })\n                .catch(e => {\n                    // TODO: Error handling\n                    console.log(e);\n                    resolve();\n                })\n            });\n        });\n    }\n\n    loadAudioStreams() {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n                fetch(`${this.server.server_ip}/api/video/${this.internalID}/getLanguages?type=${this.type}&token=${serverToken}`)\n                .then(r => r.json())\n                .then(result => {\n                    console.log(result);\n                    let currentState = this.state.audioStreams;\n                    currentState.availableStreams = result;\n\n                    this.setState({audioStreams: currentState}, () => resolve());\n                })\n            });\n\n        });\n    }\n    \n    loadSources(autoplay = false) {\n        return new Promise(resolve => {\n            validateServerAccess(this.server, (serverToken) => {\n            // Set the duration of the video\n            fetch(`${this.server.server_ip}/api/video/${this.internalID}/getDuration?type=${this.type}&token=${serverToken}`)\n            .then(r => r.json())\n            .then(data => {\n                this.video.realDuration = data.duration;\n            });\n\n            // Get the current time for this video\n            fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/get?type=${this.type}&token=${serverToken}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(r => r.json())\n            .then(time => {\n                time = time.time;\n                this.video.watchTimeOffset = time;\n\n                // Get the available resolutions for this video\n                fetch(`${this.server.server_ip}/api/video/${this.internalID}/getResolution?type=${this.type}&token=${serverToken}`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(r => r.json())\n                .then(result => {\n\n                    // If we already have selected an audio stream, change to that one.\n                    let audio = '';\n                    let audioState = this.state.audioStreams;\n                    if (this.state.audioStreams.activeStream !== undefined) {\n                        for (let stream of this.state.audioStreams.availableStreams) {\n                            if (this.state.audioStreams.activeStream.shortName === stream.shortName) {\n                                audio = `&audio=${stream.stream_index}`;\n                                audioState.activeStream = stream;\n                                break;\n                            }\n                        }\n                    }\n\n\n                    // If we didn't find a match for the langauges, (maybe this video don't have that language): Set the activeAudioStream to undefined (which will give us default audio for the file)\n                    if (audio === '') {\n                        audioState.activeStream = undefined\n                    }\n\n                    // Change the available resolutions\n                    let resolutions = this.state.resolutions;\n                    resolutions.availableResolutions = result.resolutions;\n\n                    if (result.directplay) {\n                        this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=directplay${audio}`)\n                        resolutions.activeResolution = 'directplay';\n                        resolutions.availableResolutions.push('directplay');\n                    } else {\n                        this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${time}&quality=1080P${audio}`);\n                        resolutions.activeResolution = '1080P';\n                    }\n\n                    // Save the new resolution state and audioState\n                    this.setState({resolutions: resolutions, audioStreams: audioState});\n    \n    \n                    this.video.load();\n                    if (autoplay) {\n                        this.video.play();\n                    }\n                    resolve();\n                });\n            })\n            });\n        });\n\n    }\n\n    getSettingElements() {\n        let elements = [];\n\n        // If we should display resulution controls\n        if (this.state.settings.resolutionControl) {\n            console.log(this.state.resolutions)\n            for (let resolution of this.state.resolutions.availableResolutions) {\n                elements.push(\n                    <a href=\"#\" key={this.elementCounter} className={resolution === this.state.resolutions.activeResolution ? Styles.active : ''} onClick={() => this.changeResolution(resolution)}>{resolution}</a>\n                )\n                this.elementCounter++;\n            }\n\n\n        // If we should display subtitle controls\n        } else if (this.state.settings.subtitleControl) {\n            for (let subtitle of this.state.subtitles.availableSubtitles) {\n                elements.push(\n                    <a href=\"#\" style={{position: 'relative'}} key={this.elementCounter} className={this.state.subtitles.activeSubtitle != undefined && subtitle.id === this.state.subtitles.activeSubtitle.id ? Styles.active : ''} onClick={() => this.changeSubtitle(subtitle)}>\n                        {subtitle.extracted && \n                            <img className={Styles.subtitleVariant} src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/check.png`} />\n                        }\n                        {!subtitle.extracted && subtitle.synced &&\n                            <img className={Styles.subtitleVariant} src={`${process.env.NEXT_PUBLIC_SERVER_URL}/images/hourglass.png`} />\n                        }\n                        {subtitle.language}\n                        </a>\n                )\n                elements.push(<hr style={{margin: '0', padding: '0'}}></hr>)\n                this.elementCounter++;\n            }\n\n        // If we should display audio controls\n        } else if (this.state.settings.audioControl) {\n            for (let stream of this.state.audioStreams.availableStreams) {\n                console.log(stream);\n                elements.push(\n                    <a href=\"#\" key={this.elementCounter} className={this.state.audioStreams.activeStream != undefined && stream.id === this.state.audioStreams.activeStream.id ? Styles.active : ''} onClick={() => this.changeAudioStream(stream)}>{stream.longName}</a>\n                );\n                this.elementCounter++;\n            }\n\n        // If we should display standard controls\n        } else {\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showResolutions}>Quality</a>\n            );\n            this.elementCounter++;\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showAudioStreams} >Audio</a>\n            );\n            this.elementCounter++;\n            elements.push(\n                <a href=\"#\" key={this.elementCounter} onClick={this.showSubtitles}>Subtitles</a>\n            );\n            this.elementCounter++;\n        }\n\n        return elements;\n    }\n\n    changeResolution(resolution) {\n        validateServerAccess(this.server, (serverToken) => {\n            let audioSource = \"\";\n            let activeStream = this.state.audioStreams.activeStream;\n            if (activeStream != undefined) {\n                audioSource = `&audio=${activeStream.stream_index}`;\n            }\n\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${resolution}${audioSource}`);\n            // Change the watchTimeOffset to proberly sync subtitles and seekbar.\n            this.video.watchTimeOffset = this.video.getRealWatchtime();\n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n            this.video.load();\n            this.video.play();\n    \n            // Change the active resolution in the state\n            let resolutions = this.state.resolutions;\n            resolutions.activeResolution = resolution;\n            this.setState({resolutions: resolutions});\n        });\n    }\n\n    changeSubtitle(subtitle) {\n        let stateSubs = this.state.subtitles;\n        if (subtitle == undefined) {\n            return;\n        }\n        // Fix to prevent subs getting \"stuck\" when seeking\n        this.video.textTracks[0].mode = 'hidden';\n\n        if (subtitle.id === -1) {\n            this.video.textTracks[0].mode = 'hidden';\n            stateSubs.activeSubtitle = subtitle;\n            this.setState({subtitles: stateSubs});\n            return;\n        }\n        validateServerAccess(this.server, (serverToken) => {\n            this.subtitle.setAttribute('src', `${this.server.server_ip}/api/subtitles/get?id=${subtitle.id}&type=${this.type}&start=${this.video.getRealWatchtime() - this.video.currentTime}&token=${serverToken}`);\n            this.video.textTracks[0].mode = 'showing';\n            stateSubs.activeSubtitle = subtitle;\n            this.setState({subtitles: stateSubs});\n        });\n\n    }\n\n    changeAudioStream(stream) {\n        // If we changed to the same audio stream\n        if (this.state.audioStreams.activeStream !== undefined && stream.id === this.state.audioStreams.activeStream.id) {\n            return;\n        }\n        validateServerAccess(this.server, (serverToken) => {\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${this.video.getRealWatchtime()}&quality=${this.state.resolutions.activeResolution}&audio=${stream.stream_index}`);\n            this.video.watchTimeOffset = this.video.getRealWatchtime();\n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n            this.video.load();\n            this.video.play();\n    \n            let streams = this.state.audioStreams;\n            streams.activeStream = stream;\n            this.setState({audioStreams: streams});\n        });\n    }\n\n    enterFullScreen() {\n        let videoContainer = document.getElementById('videoContainer');\n        try {\n            if (!this.video.isFullscreen) {\n                if (this.video.requestFullscreen) {\n                    videoContainer.requestFullscreen();\n                } else if (this.video.mozRequestFullScreen) { /* Firefox */\n                    videoContainer.mozRequestFullScreen();\n                } else if (this.video.webkitRequestFullscreen) { /* Chrome, Safari & Opera */\n                    videoContainer.webkitRequestFullscreen();\n                } else if (this.video.msRequestFullscreen) { /* IE/Edge */\n                    videoContainer.msRequestFullscreen();\n                }\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                  } else if (document.mozCancelFullScreen) { /* Firefox */\n                    document.mozCancelFullScreen();\n                  } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                    document.webkitExitFullscreen();\n                  } else if (document.msExitFullscreen) { /* IE/Edge */\n                    document.msExitFullscreen();\n                  }\n            }\n            this.video.isFullscreen = !this.video.isFullscreen;\n        } catch(e) {\n\n        }\n\n\n    }\n\n    togglePlay() {\n        if (this.video.paused) {\n            this.video.play();\n\n            if (this.updateCurrentTimeInterval !== undefined) {\n                clearInterval(this.updateCurrentTimeInterval);\n            }\n    \n            this.updateCurrentTimeInterval = setInterval(() => {\n                validateServerAccess(this.server, (serverToken) => {\n                    fetch(`${this.server.server_ip}/api/video/${this.internalID}/currenttime/set?type=${this.type}&time=${this.video.getRealWatchtime()}&videoDuration=${this.video.realDuration}&token=${serverToken}`);\n                });\n            }, 5000);\n\n        } else {\n            clearInterval(this.updateCurrentTimeInterval);\n            this.video.pause();\n        }\n    }\n\n    seek(e) {\n        let vidTime = document.getElementById('seekbar').value / 100 * this.video.realDuration;\n        let quality = this.state.resolutions.activeResolution !== '' ? this.state.resolutions.activeResolution : '1080P';\n        let audio = this.state.audioStreams.activeStream !== undefined ? `&audio=${this.state.audioStreams.activeStream.stream_index}` : ''\n\n        validateServerAccess(this.server, (serverToken) => {\n            this.source.setAttribute('src', `${this.server.server_ip}/api/video/${this.internalID}?type=${this.type}&token=${serverToken}&start=${vidTime}&quality=${quality}${audio}`);\n            this.video.load();\n            this.video.play();\n            this.video.watchTimeOffset = vidTime;\n            this.video.isSeeking = false;\n    \n            this.changeSubtitle(this.state.subtitles.activeSubtitle);\n        });\n\n    }\n\n    startSeek() {\n        this.video.isSeeking = true;\n    }\n\n    toggleSettings() {\n        let settings = this.state.settings;\n        settings.show = !settings.show;\n        settings.resolutionControl = false;\n        settings.audioControl      = false;\n        settings.subtitleControl   = false;\n        this.setState({settings: settings});\n    }\n\n    showResolutions() {\n        let settings = this.state.settings;\n        settings.resolutionControl = true;\n        this.setState({settings: settings});\n    }\n\n    showSubtitles() {\n        let settings = this.state.settings;\n        settings.subtitleControl = true;\n        this.setState({settings: settings});\n    }\n\n    showAudioStreams() {\n        let settings = this.state.settings;\n        settings.audioControl = true;\n        this.setState({settings: settings});\n    }\n\n    showStandardSettings() {\n        let settings = this.state.settings;\n        settings.resolutionControl = false;\n        settings.audioControl      = false;\n        settings.subtitleControl   = false;\n        this.setState({settings: settings});\n    }\n\n    updateSeekTime() {\n        let range = document.getElementById('seekbar');\n        let rangeV = document.getElementById('seekTime');\n        let newValue = range.value;\n        let newPosition = 10 - (newValue * 0.2);\n\n        let seconds = Math.floor(range.value / 100 * this.video.realDuration);\n        let minutes = Math.floor(seconds / 60);\n        let hours   = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n        seconds = seconds % 60;\n\n        seconds = seconds >= 10 ? seconds : `0${seconds}`;\n        minutes = minutes >= 10 ? minutes : `0${minutes}`;\n        hours = hours >= 10 ? hours : `0${hours}`;\n\n        let time = hours !== 0 ? hours + ':' : '';\n        time += minutes + ':' + seconds;\n\n\n        rangeV.innerHTML = `<span>${time}</span>`;\n        rangeV.style.left = `calc(${newValue}% + (${newPosition}px))`;\n    }\n\n    play() {\n        this.video.play();\n    }\n    pause() {\n        this.video.pause();\n    }\n\n    getActiveSettingsName() {\n        if (this.state.settings.subtitleControl) {\n            return 'Subtitles';\n        }\n        if (this.state.settings.audioControl) {\n            return 'Audio';\n        }\n        if (this.state.settings.resolutionControl) {\n            return 'Quality';\n        }\n    }\n\n    changeVolume(e) {\n        this.video.volume = e.target.value / 100;\n    }\n\n    showControls() {\n        document.getElementById('controls').classList.add(Styles.controlsActive);\n        document.getElementById('overlay').classList.add(Styles.controlsActive);\n        document.getElementById('transparentOverlay').classList.add(Styles.controlsActive);\n        document.getElementById('videoContainer').style.cursor = 'auto';\n\n        if (this.controlTimeout != undefined) {\n            clearTimeout(this.controlTimeout);\n        }\n\n        this.controlTimeout = setTimeout(() => {\n            document.getElementById('controls').classList.remove(Styles.controlsActive);\n            document.getElementById('overlay').classList.remove(Styles.controlsActive);\n            document.getElementById('transparentOverlay').classList.remove(Styles.controlsActive);\n            document.getElementById('videoContainer').style.cursor = 'none';\n        }, 5000);\n\n    }\n\n    setTitle(title) {\n        this.setState({title: title});\n    }\n\n    setEpisode(episode, cb) {\n        this.setState({episode: episode}, () => {\n            cb();\n        });\n    }\n\n    setSeason(season, cb) {\n        this.setState({season: season}, () => {\n            cb();\n        });\n    }\n\n    render() {\n        return (\n            <>\n            <Head>\n                <script src=\"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\"></script>\n                \n            </Head>\n            <div className={Styles.videoContainer} id=\"videoContainer\" onMouseMove={this.showControls}>\n            \n\n                \n                <video crossOrigin=\"anonymous\" id=\"video\" className={Styles.videoPlayer}>\n                    <track id=\"subtitle\" kind=\"subtitles\" />\n                </video>\n\n                <div className={Styles.transparentOverlay} id=\"transparentOverlay\" onClick={this.togglePlay} onDoubleClick={this.enterFullScreen}>\n\n                </div>\n                {this.state.isBuffering &&\n                <div className={Styles.loadingOuter}>\n                    <div class={Styles.loadingInner}>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n                }\n\n                {this.state.nextEpisode != undefined && this.state.nextEpisode.show &&\n                    <div className={Styles.nextEpisode}>\n                        <h3>Nästa avsnitt spelas upp om <span id=\"timeToNextEpisode\">{this.state.nextEpisode.timeLeft}</span> sekunder</h3>\n                        <button id=\"playNextEpisode\" onClick={this.playNextEpisode}>Starta nu</button>\n                        <button id=\"cancelNextEpisode\">Avbryt</button>\n                    </div>\n                }\n\n                <div className={Styles.overlay} id=\"overlay\">\n                    <div className={Styles.back} onClick={() => Router.back()}></div>\n                    {this.type === 'serie' &&\n                        <>\n                            <h1>{this.state.title}</h1>\n                            <p>Season {this.state.season} - Episode {this.state.episode}</p>\n                        </>\n                    }\n                    {this.type === 'movie' &&\n                        <h1>{this.state.title}</h1>\n                    }\n                </div>\n\n                <div className={Styles.controller} id=\"controls\">\n                    {this.state.videoPaused &&\n                        <div className={`${Styles.playButton} ${Styles.playPause}`} onClick={this.togglePlay}></div>\n                    }\n                    {!this.state.videoPaused && \n                        <div className={`${Styles.pauseButton} ${Styles.playPause}`} onClick={this.togglePlay}></div>\n                    }\n                    <div className={Styles.seekWrapper}>\n                        <div className={Styles.seekTime} id=\"seekTime\"></div>\n                        <input type=\"range\" id=\"seekbar\" name=\"seekbar\"\n                        min=\"0\" max=\"100\" step=\"0.01\" className={Styles.seekbar} onMouseDown={this.startSeek} onMouseUp={this.seek} onInput={this.updateSeekTime}/>\n                    </div>\n\n                    <div className={Styles.settingsBox}>\n                        <div className={Styles.audioImage}></div>\n                        <input className={Styles.volumeControl} type=\"range\" id=\"volumeControl\" name=\"volume\"\n                        min=\"0\" max=\"100\" step=\"0.01\" onChange={this.changeVolume} />\n\n                        <div onClick={this.toggleSettings} className={Styles.settingsButton}></div>\n                        <div className={Styles.fullscreenImage} onClick={this.enterFullScreen}></div>\n\n                        {this.state.settings.show &&\n                            <div className={Styles.settings}>\n                                <div className={Styles.settingsBack} onClick={this.showStandardSettings}><strong>{this.getActiveSettingsName()}</strong></div>\n                                <hr style={{margin: 0}}/>\n                                {this.getSettingElements()}\n                            </div>\n                        }\n                    </div>\n\n                </div>\n\n            </div>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}