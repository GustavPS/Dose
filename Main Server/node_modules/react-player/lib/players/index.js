"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _utils = require("../utils");

var _patterns = require("../patterns");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var canPlayFile = function canPlayFile(url) {
  if (url instanceof Array) {
    var _iterator = _createForOfIteratorHelper(url),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (typeof item === 'string' && canPlayFile(item)) {
          return true;
        }

        if (canPlayFile(item.src)) {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return false;
  }

  if ((0, _utils.isMediaStream)(url)) {
    return true;
  }

  return _patterns.AUDIO_EXTENSIONS.test(url) || _patterns.VIDEO_EXTENSIONS.test(url) || _patterns.HLS_EXTENSIONS.test(url) || _patterns.DASH_EXTENSIONS.test(url);
};

var _default = [{
  key: 'youtube',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_YOUTUBE.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./YouTube'));
    });
  })
}, {
  key: 'soundcloud',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_SOUNDCLOUD.test(url) && !_patterns.AUDIO_EXTENSIONS.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./SoundCloud'));
    });
  })
}, {
  key: 'vimeo',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_VIMEO.test(url) && !_patterns.VIDEO_EXTENSIONS.test(url) && !_patterns.HLS_EXTENSIONS.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Vimeo'));
    });
  })
}, {
  key: 'facebook',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_FACEBOOK.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Facebook'));
    });
  })
}, {
  key: 'streamable',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_STREAMABLE.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Streamable'));
    });
  })
}, {
  key: 'wistia',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_WISTIA.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Wistia'));
    });
  })
}, {
  key: 'twitch',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_TWITCH_VIDEO.test(url) || _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Twitch'));
    });
  })
}, {
  key: 'dailymotion',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_DAILYMOTION.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./DailyMotion'));
    });
  })
}, {
  key: 'mixcloud',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_MIXCLOUD.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Mixcloud'));
    });
  })
}, {
  key: 'vidyard',
  canPlay: function canPlay(url) {
    return _patterns.MATCH_URL_VIDYARD.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./Vidyard'));
    });
  })
}, {
  key: 'file',
  canPlay: canPlayFile,
  canEnablePIP: function canEnablePIP(url) {
    return canPlayFile(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
  },
  lazyPlayer: (0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(require('./FilePlayer'));
    });
  })
}];
exports["default"] = _default;