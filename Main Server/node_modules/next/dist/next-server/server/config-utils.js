"use strict";exports.__esModule=true;exports.install=install;exports.shouldLoadWithWebpack5=shouldLoadWithWebpack5;exports.loadWebpackHook=loadWebpackHook;var _jestWorker=_interopRequireDefault(require("jest-worker"));var _findUp=_interopRequireDefault(require("next/dist/compiled/find-up"));var _webpack=require("next/dist/compiled/webpack/webpack");var _constants=require("../lib/constants");var _configShared=require("./config-shared");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}let installed=false;function install(useWebpack5){if(installed){return;}installed=true;(0,_webpack.init)(useWebpack5);// hook the Node.js require so that webpack requires are
// routed to the bundled and now initialized webpack version
require('../../build/webpack/require-hook');}async function shouldLoadWithWebpack5(phase,dir){var _userConfig$future;const path=await(0,_findUp.default)(_constants.CONFIG_FILE,{cwd:dir});if(Number(process.env.NEXT_PRIVATE_TEST_WEBPACK5_MODE)>0){return true;}// No `next.config.js`:
if(!(path!=null&&path.length)){return false;// TODO: return true to default to webpack 5
}// Default to webpack 4 for backwards compatibility on boot:
install(false);const userConfigModule=require(path);const userConfig=(0,_configShared.normalizeConfig)(phase,userConfigModule.default||userConfigModule);// TODO: enable commented branch to enable webpack 5
return((_userConfig$future=userConfig.future)==null?void 0:_userConfig$future.webpack5)===true;/* || !userConfig.webpack */}async function loadWebpackHook(phase,dir){let useWebpack5=false;const worker=new _jestWorker.default(__filename,{enableWorkerThreads:false});try{useWebpack5=Boolean(await worker.shouldLoadWithWebpack5(phase,dir));}catch(_unused){// If this errors, it likely will do so again upon boot, so we just swallow
// it here.
}finally{worker.end();}install(useWebpack5);}
//# sourceMappingURL=config-utils.js.map