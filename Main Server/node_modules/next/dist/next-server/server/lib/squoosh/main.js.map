{"version":3,"sources":["../../../../../next-server/server/lib/squoosh/main.ts"],"names":["getWorker","JestWorker","path","resolve","__dirname","enableWorkerThreads","decodeBuffer","buffer","worker","ImageData","from","rotate","image","numRotations","resize","width","encodeJpeg","quality","o","Buffer","encodeWebp","encodePng"],"mappings":"2MAAA,+DACA,kDACA,yCACA,gE,w4BAEA,KAAMA,CAAAA,SAAS,CAAG,oBAChB,IACE,GAAIC,oBAAJ,CAAeC,IAAI,CAACC,OAAL,CAAaC,SAAb,CAAwB,MAAxB,CAAf,CAAgD,CAC9CC,mBAAmB,CAAE,IADyB,CAAhD,CAFc,CAAlB,CAOO,cAAeC,CAAAA,YAAf,CAA4BC,MAA5B,CAAgE,CACrE,KAAMC,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,MAAOS,qBAAUC,IAAV,CAAe,KAAMF,CAAAA,MAAM,CAACF,YAAP,CAAoBC,MAApB,CAArB,CAAP,CACD,CAEM,cAAeI,CAAAA,MAAf,CACLC,KADK,CAELC,YAFK,CAGe,CACpB,KAAML,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,MAAOS,qBAAUC,IAAV,CAAe,KAAMF,CAAAA,MAAM,CAACG,MAAP,CAAcC,KAAd,CAAqBC,YAArB,CAArB,CAAP,CACD,CAEM,cAAeC,CAAAA,MAAf,CACLF,KADK,CAEL,CAAEG,KAAF,CAFK,CAGe,CACpB,KAAMP,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,MAAOS,qBAAUC,IAAV,CAAe,KAAMF,CAAAA,MAAM,CAACM,MAAP,CAAcF,KAAd,CAAqB,CAAEG,KAAF,CAArB,CAArB,CAAP,CACD,CAEM,cAAeC,CAAAA,UAAf,CACLJ,KADK,CAEL,CAAEK,OAAF,CAFK,CAGY,CACjB,KAAMT,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,KAAMkB,CAAAA,CAAC,CAAG,KAAMV,CAAAA,MAAM,CAACQ,UAAP,CAAkBJ,KAAlB,CAAyB,CAAEK,OAAF,CAAzB,CAAhB,CACA,MAAOE,CAAAA,MAAM,CAACT,IAAP,CAAYQ,CAAZ,CAAP,CACD,CAEM,cAAeE,CAAAA,UAAf,CACLR,KADK,CAEL,CAAEK,OAAF,CAFK,CAGY,CACjB,KAAMT,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,KAAMkB,CAAAA,CAAC,CAAG,KAAMV,CAAAA,MAAM,CAACY,UAAP,CAAkBR,KAAlB,CAAyB,CAAEK,OAAF,CAAzB,CAAhB,CACA,MAAOE,CAAAA,MAAM,CAACT,IAAP,CAAYQ,CAAZ,CAAP,CACD,CAEM,cAAeG,CAAAA,SAAf,CAAyBT,KAAzB,CAA4D,CACjE,KAAMJ,CAAAA,MAA+B,CAAGR,SAAS,EAAjD,CACA,KAAMkB,CAAAA,CAAC,CAAG,KAAMV,CAAAA,MAAM,CAACa,SAAP,CAAiBT,KAAjB,CAAhB,CACA,MAAOO,CAAAA,MAAM,CAACT,IAAP,CAAYQ,CAAZ,CAAP,CACD","sourcesContent":["import JestWorker from 'jest-worker'\nimport * as path from 'path'\nimport { execOnce } from '../../../lib/utils'\nimport ImageData from './image_data'\n\nconst getWorker = execOnce(\n  () =>\n    new JestWorker(path.resolve(__dirname, 'impl'), {\n      enableWorkerThreads: true,\n    })\n)\n\nexport async function decodeBuffer(buffer: Buffer): Promise<ImageData> {\n  const worker: typeof import('./impl') = getWorker() as any\n  return ImageData.from(await worker.decodeBuffer(buffer))\n}\n\nexport async function rotate(\n  image: ImageData,\n  numRotations: number\n): Promise<ImageData> {\n  const worker: typeof import('./impl') = getWorker() as any\n  return ImageData.from(await worker.rotate(image, numRotations))\n}\n\nexport async function resize(\n  image: ImageData,\n  { width }: { width: number }\n): Promise<ImageData> {\n  const worker: typeof import('./impl') = getWorker() as any\n  return ImageData.from(await worker.resize(image, { width }))\n}\n\nexport async function encodeJpeg(\n  image: ImageData,\n  { quality }: { quality: number }\n): Promise<Buffer> {\n  const worker: typeof import('./impl') = getWorker() as any\n  const o = await worker.encodeJpeg(image, { quality })\n  return Buffer.from(o)\n}\n\nexport async function encodeWebp(\n  image: ImageData,\n  { quality }: { quality: number }\n): Promise<Buffer> {\n  const worker: typeof import('./impl') = getWorker() as any\n  const o = await worker.encodeWebp(image, { quality })\n  return Buffer.from(o)\n}\n\nexport async function encodePng(image: ImageData): Promise<Buffer> {\n  const worker: typeof import('./impl') = getWorker() as any\n  const o = await worker.encodePng(image)\n  return Buffer.from(o)\n}\n"]}