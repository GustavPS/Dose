{"ast":null,"code":"var _jsxFileName = \"/mnt/h/Code/Dose/Main Server/components/changeImages.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Styles from './changeImages.module.css';\nimport { Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\nlet selectedImages = [];\nexport default function ChangeImages(props) {\n  const {\n    0: imageBox,\n    1: setImageBox\n  } = useState(false);\n  const {\n    0: movieBackdropResult,\n    1: setMovieBackdropResult\n  } = useState([]);\n  const {\n    0: moviePosterResult,\n    1: setMoviePosterResult\n  } = useState([]);\n  const {\n    server,\n    id,\n    serverToken,\n    type\n  } = props;\n  const Router = useRouter();\n\n  const updateImages = () => {\n    let poster;\n    let backdrop;\n    console.log(selectedImages);\n\n    for (let image of selectedImages) {\n      if (image.type === 'POSTER') {\n        poster = image.id;\n      } else if (image.type === 'BACKDROP') {\n        backdrop = image.id;\n      }\n    }\n\n    console.log(selectedImages);\n    console.log(poster);\n    console.log(backdrop);\n    validateServerAccess(server, serverToken => {\n      fetch(`${server.server_ip}/api/${type}/${id}/setImages?poster=${poster}&backdrop=${backdrop}&token=${serverToken}`).then(r => r.json()).then(json => {\n        if (json.success) {\n          Router.reload(window.location.pathname);\n        }\n      });\n    });\n  };\n\n  const selectImage = (imageID, type) => {\n    let selected = []; // Add the other type that we did not select to the new selected list\n\n    for (let image of selectedImages) {\n      if (image.type !== type) {\n        selected.push(image);\n      } else {\n        // Remove the active class\n        document.body.querySelector(`img[data-imageid=\"${image.id}\"]`).classList.remove(Styles.activeImage);\n      }\n    }\n\n    document.body.querySelector(`img[data-imageid=\"${imageID}\"]`).classList.add(Styles.activeImage);\n    selected.push({\n      id: imageID,\n      type: type\n    });\n    selectedImages = [];\n\n    for (let image of selected) {\n      selectedImages.push(image);\n    }\n  };\n\n  const getImages = () => {\n    validateServerAccess(server, serverToken => {\n      fetch(`${server.server_ip}/api/${type}/${id}/getImages?token=${serverToken}`).then(r => r.json()).then(images => {\n        let backdropElements = [];\n        let posterElements = [];\n        let count = 0;\n        selectedImages = [];\n\n        for (let image of images) {\n          let img = `https://image.tmdb.org/t/p/w500/${image.path}`;\n\n          if (image.active) {\n            selectedImages.push({\n              id: image.id,\n              type: image.type\n            });\n          }\n\n          let active = image.active;\n\n          if (image.type === 'BACKDROP') {\n            backdropElements.push(__jsx(Col, {\n              key: count,\n              className: Styles.metadataSearchRow,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }\n            }, __jsx(Image, {\n              style: {\n                width: \"500px\"\n              },\n              src: img,\n              className: ('imageSearchImg', active ? Styles.activeImage : ''),\n              onClick: () => selectImage(image.id, image.type),\n              \"data-imageid\": image.id,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }\n            })));\n          } else {\n            posterElements.push(__jsx(Col, {\n              key: count,\n              className: Styles.metadataSearchRow,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }\n            }, __jsx(Image, {\n              style: {\n                width: \"200px\"\n              },\n              src: img,\n              className: ('imageSearchImg', active ? Styles.activeImage : ''),\n              onClick: () => selectImage(image.id, image.type),\n              \"data-imageid\": image.id,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }\n            })));\n          }\n\n          count++;\n        }\n\n        setMoviePosterResult(posterElements);\n        setMovieBackdropResult(backdropElements);\n        setImageBox(true);\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      marginLeft: \"27px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundImage: `url('${process.env.NEXT_PUBLIC_SERVER_URL}/images/search.svg')`\n    },\n    className: Styles.playButton,\n    onClick: () => getImages(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    style: {\n      marginTop: \"5px\",\n      fontSize: '14px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"V\\xE4lj bild\")), imageBox && __jsx(\"div\", {\n    className: \"metadataBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    style: {\n      display: 'table',\n      margin: '0 auto'\n    },\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: () => updateImages(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Spara\"), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Backdrops\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, movieBackdropResult), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Posters\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, moviePosterResult))));\n}","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/components/changeImages.js"],"names":["Styles","Container","Row","Col","Button","Image","useState","useRouter","validateServerAccess","selectedImages","ChangeImages","props","imageBox","setImageBox","movieBackdropResult","setMovieBackdropResult","moviePosterResult","setMoviePosterResult","server","id","serverToken","type","Router","updateImages","poster","backdrop","console","log","image","fetch","server_ip","then","r","json","success","reload","window","location","pathname","selectImage","imageID","selected","push","document","body","querySelector","classList","remove","activeImage","add","getImages","images","backdropElements","posterElements","count","img","path","active","metadataSearchRow","width","marginLeft","backgroundImage","process","env","NEXT_PUBLIC_SERVER_URL","playButton","marginTop","fontSize","display","margin"],"mappings":"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","sourcesContent":["import Styles from './changeImages.module.css';\nimport {Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router'\nimport validateServerAccess from '../lib/validateServerAccess';\n\n\nlet selectedImages = [];\n\n\nexport default function ChangeImages(props) {\n    const [imageBox, setImageBox] = useState(false);\n    const [movieBackdropResult, setMovieBackdropResult] = useState([]);\n    const [moviePosterResult, setMoviePosterResult] = useState([]);\n    const {server, id, serverToken, type} = props;\n    const Router = useRouter();\n\n\n\n\n    const updateImages = () => {\n        let poster;\n        let backdrop;\n        console.log(selectedImages);\n        for (let image of selectedImages) {\n          if (image.type === 'POSTER') {\n            poster = image.id;\n          } else if (image.type === 'BACKDROP') {\n            backdrop = image.id;\n          }\n        }\n        console.log(selectedImages);\n        console.log(poster);\n        console.log(backdrop);\n  \n        validateServerAccess(server, (serverToken) => {\n          fetch(`${server.server_ip}/api/${type}/${id}/setImages?poster=${poster}&backdrop=${backdrop}&token=${serverToken}`)\n          .then(r => r.json())\n          .then(json => {\n            if (json.success) {\n              Router.reload(window.location.pathname);\n            }\n          });\n        });\n      }\n  \n      const selectImage = (imageID, type) => {\n        let selected = [];\n  \n        // Add the other type that we did not select to the new selected list\n        for (let image of selectedImages) {\n          if (image.type !== type) {\n            selected.push(image);\n          } else {\n            // Remove the active class\n            document.body.querySelector(`img[data-imageid=\"${image.id}\"]`).classList.remove(Styles.activeImage);\n          }\n        }\n  \n        document.body.querySelector(`img[data-imageid=\"${imageID}\"]`).classList.add(Styles.activeImage);\n  \n        selected.push({\n          id: imageID,\n          type: type\n        })\n        selectedImages = [];\n        for (let image of selected) {\n          selectedImages.push(image);\n        }\n      }\n\n    const getImages = () => {\n      validateServerAccess(server, (serverToken) => {\n        fetch(`${server.server_ip}/api/${type}/${id}/getImages?token=${serverToken}`)\n        .then(r => r.json())\n        .then(images => {\n          let backdropElements = [];\n          let posterElements = [];\n          let count = 0;\n          selectedImages = [];\n          for (let image of images) {\n            let img = `https://image.tmdb.org/t/p/w500/${image.path}`\n            if (image.active) {\n              selectedImages.push({\n                id: image.id,\n                type: image.type\n              });\n            }\n            let active = image.active;\n            if (image.type === 'BACKDROP') {\n              backdropElements.push(\n                <Col key={count} className={Styles.metadataSearchRow}>\n                  <Image style={{width: \"500px\"}} src={img} className={'imageSearchImg', active ? Styles.activeImage : ''} onClick={() => selectImage(image.id, image.type)} data-imageid={image.id}/>\n                </Col>\n              );\n            } else {\n              posterElements.push(\n                <Col key={count} className={Styles.metadataSearchRow}>\n                  <Image style={{width: \"200px\"}} src={img} className={'imageSearchImg', active ? Styles.activeImage : ''} onClick={() => selectImage(image.id, image.type)} data-imageid={image.id}/>\n                </Col>\n              );\n            }\n            count++;\n          }\n          setMoviePosterResult(posterElements);\n          setMovieBackdropResult(backdropElements);\n          setImageBox(true);\n        });\n      });\n    }\n\n    return (\n        <>\n            <div style={{marginLeft: \"27px\"}}>\n                <div style={{backgroundImage: `url('${process.env.NEXT_PUBLIC_SERVER_URL}/images/search.svg')`}} className={Styles.playButton} onClick={() => getImages()}></div>\n                <p style={{marginTop: \"5px\", fontSize: '14px'}}>Välj bild</p>\n            </div>\n\n            {imageBox &&\n            <div className=\"metadataBox\">\n\n                <Container>\n                    <Button style={{display: 'table', margin: '0 auto'}} variant=\"primary\" type=\"submit\" onClick={() => updateImages()}>\n                        Spara\n                    </Button>\n                <h3>Backdrops</h3>\n                <Row>\n                    {movieBackdropResult}\n                </Row>\n                <h3>Posters</h3>\n                <Row>\n                    {moviePosterResult}\n                </Row>\n                </Container>\n                \n            </div>\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}