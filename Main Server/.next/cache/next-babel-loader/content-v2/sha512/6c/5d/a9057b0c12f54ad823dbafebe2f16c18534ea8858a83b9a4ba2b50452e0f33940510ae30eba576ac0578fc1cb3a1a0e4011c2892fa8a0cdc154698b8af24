{"ast":null,"code":"var _jsxFileName = \"/mnt/h/Code/Dose/Main Server/components/changeImages.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Styles from './changeImages.module.css';\nimport { Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport validateServerAccess from '../lib/validateServerAccess';\nvar selectedImages = [];\nexport default function ChangeImages(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(false),\n      imageBox = _useState[0],\n      setImageBox = _useState[1];\n\n  var _useState2 = useState([]),\n      movieBackdropResult = _useState2[0],\n      setMovieBackdropResult = _useState2[1];\n\n  var _useState3 = useState([]),\n      moviePosterResult = _useState3[0],\n      setMoviePosterResult = _useState3[1];\n\n  var server = props.server,\n      id = props.id,\n      serverToken = props.serverToken,\n      type = props.type;\n  var Router = useRouter();\n\n  var updateImages = function updateImages() {\n    var poster;\n    var backdrop;\n    console.log(selectedImages);\n\n    var _iterator = _createForOfIteratorHelper(selectedImages),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var image = _step.value;\n\n        if (image.type === 'POSTER') {\n          poster = image.id;\n        } else if (image.type === 'BACKDROP') {\n          backdrop = image.id;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    console.log(selectedImages);\n    console.log(poster);\n    console.log(backdrop);\n    validateServerAccess(server, function (serverToken) {\n      fetch(\"\".concat(server.server_ip, \"/api/\").concat(type, \"/\").concat(id, \"/setImages?poster=\").concat(poster, \"&backdrop=\").concat(backdrop, \"&token=\").concat(serverToken)).then(function (r) {\n        return r.json();\n      }).then(function (json) {\n        if (json.success) {\n          Router.reload(window.location.pathname);\n        }\n      });\n    });\n  };\n\n  var selectImage = function selectImage(imageID, type) {\n    var selected = []; // Add the other type that we did not select to the new selected list\n\n    var _iterator2 = _createForOfIteratorHelper(selectedImages),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _image = _step2.value;\n\n        if (_image.type !== type) {\n          selected.push(_image);\n        } else {\n          // Remove the active class\n          document.body.querySelector(\"img[data-imageid=\\\"\".concat(_image.id, \"\\\"]\")).classList.remove(Styles.activeImage);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    document.body.querySelector(\"img[data-imageid=\\\"\".concat(imageID, \"\\\"]\")).classList.add(Styles.activeImage);\n    selected.push({\n      id: imageID,\n      type: type\n    });\n    selectedImages = [];\n\n    for (var _i = 0, _selected = selected; _i < _selected.length; _i++) {\n      var image = _selected[_i];\n      selectedImages.push(image);\n    }\n  };\n\n  var getImages = function getImages() {\n    validateServerAccess(server, function (serverToken) {\n      fetch(\"\".concat(server.server_ip, \"/api/\").concat(type, \"/\").concat(id, \"/getImages?token=\").concat(serverToken)).then(function (r) {\n        return r.json();\n      }).then(function (images) {\n        var backdropElements = [];\n        var posterElements = [];\n        var count = 0;\n        selectedImages = [];\n\n        var _iterator3 = _createForOfIteratorHelper(images),\n            _step3;\n\n        try {\n          var _loop = function _loop() {\n            var image = _step3.value;\n            var img = \"https://image.tmdb.org/t/p/w500/\".concat(image.path);\n\n            if (image.active) {\n              selectedImages.push({\n                id: image.id,\n                type: image.type\n              });\n            }\n\n            var active = image.active;\n\n            if (image.type === 'BACKDROP') {\n              backdropElements.push(__jsx(Col, {\n                key: count,\n                className: Styles.metadataSearchRow,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 17\n                }\n              }, __jsx(Image, {\n                style: {\n                  width: \"500px\"\n                },\n                src: img,\n                className: ('imageSearchImg', active ? Styles.activeImage : ''),\n                onClick: function onClick() {\n                  return selectImage(image.id, image.type);\n                },\n                \"data-imageid\": image.id,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }\n              })));\n            } else {\n              posterElements.push(__jsx(Col, {\n                key: count,\n                className: Styles.metadataSearchRow,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 17\n                }\n              }, __jsx(Image, {\n                style: {\n                  width: \"200px\"\n                },\n                src: img,\n                className: ('imageSearchImg', active ? Styles.activeImage : ''),\n                onClick: function onClick() {\n                  return selectImage(image.id, image.type);\n                },\n                \"data-imageid\": image.id,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 19\n                }\n              })));\n            }\n\n            count++;\n          };\n\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        setMoviePosterResult(posterElements);\n        setMovieBackdropResult(backdropElements);\n        setImageBox(true);\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      marginLeft: \"27px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundImage: \"url('\".concat(process.env.NEXT_PUBLIC_SERVER_URL, \"/images/search.svg')\")\n    },\n    className: Styles.playButton,\n    onClick: function onClick() {\n      return getImages();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    style: {\n      marginTop: \"5px\",\n      fontSize: '14px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"V\\xE4lj bild\")), imageBox && __jsx(\"div\", {\n    className: \"metadataBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    style: {\n      display: 'table',\n      margin: '0 auto'\n    },\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: function onClick() {\n      return updateImages();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Spara\"), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Backdrops\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, movieBackdropResult), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Posters\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, moviePosterResult))));\n}\n\n_s(ChangeImages, \"KbqE38emu5bqg2S7effQNzxOvss=\", false, function () {\n  return [useRouter];\n});\n\n_c = ChangeImages;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeImages\");","map":{"version":3,"sources":["/mnt/h/Code/Dose/Main Server/components/changeImages.js"],"names":["Styles","Container","Row","Col","Button","Image","useState","useRouter","validateServerAccess","selectedImages","ChangeImages","props","imageBox","setImageBox","movieBackdropResult","setMovieBackdropResult","moviePosterResult","setMoviePosterResult","server","id","serverToken","type","Router","updateImages","poster","backdrop","console","log","image","fetch","server_ip","then","r","json","success","reload","window","location","pathname","selectImage","imageID","selected","push","document","body","querySelector","classList","remove","activeImage","add","getImages","images","backdropElements","posterElements","count","img","path","active","metadataSearchRow","width","marginLeft","backgroundImage","process","env","NEXT_PUBLIC_SERVER_URL","playButton","marginTop","fontSize","display","margin"],"mappings":"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","sourcesContent":["import Styles from './changeImages.module.css';\nimport {Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router'\nimport validateServerAccess from '../lib/validateServerAccess';\n\n\nlet selectedImages = [];\n\n\nexport default function ChangeImages(props) {\n    const [imageBox, setImageBox] = useState(false);\n    const [movieBackdropResult, setMovieBackdropResult] = useState([]);\n    const [moviePosterResult, setMoviePosterResult] = useState([]);\n    const {server, id, serverToken, type} = props;\n    const Router = useRouter();\n\n\n\n\n    const updateImages = () => {\n        let poster;\n        let backdrop;\n        console.log(selectedImages);\n        for (let image of selectedImages) {\n          if (image.type === 'POSTER') {\n            poster = image.id;\n          } else if (image.type === 'BACKDROP') {\n            backdrop = image.id;\n          }\n        }\n        console.log(selectedImages);\n        console.log(poster);\n        console.log(backdrop);\n  \n        validateServerAccess(server, (serverToken) => {\n          fetch(`${server.server_ip}/api/${type}/${id}/setImages?poster=${poster}&backdrop=${backdrop}&token=${serverToken}`)\n          .then(r => r.json())\n          .then(json => {\n            if (json.success) {\n              Router.reload(window.location.pathname);\n            }\n          });\n        });\n      }\n  \n      const selectImage = (imageID, type) => {\n        let selected = [];\n  \n        // Add the other type that we did not select to the new selected list\n        for (let image of selectedImages) {\n          if (image.type !== type) {\n            selected.push(image);\n          } else {\n            // Remove the active class\n            document.body.querySelector(`img[data-imageid=\"${image.id}\"]`).classList.remove(Styles.activeImage);\n          }\n        }\n  \n        document.body.querySelector(`img[data-imageid=\"${imageID}\"]`).classList.add(Styles.activeImage);\n  \n        selected.push({\n          id: imageID,\n          type: type\n        })\n        selectedImages = [];\n        for (let image of selected) {\n          selectedImages.push(image);\n        }\n      }\n\n    const getImages = () => {\n      validateServerAccess(server, (serverToken) => {\n        fetch(`${server.server_ip}/api/${type}/${id}/getImages?token=${serverToken}`)\n        .then(r => r.json())\n        .then(images => {\n          let backdropElements = [];\n          let posterElements = [];\n          let count = 0;\n          selectedImages = [];\n          for (let image of images) {\n            let img = `https://image.tmdb.org/t/p/w500/${image.path}`\n            if (image.active) {\n              selectedImages.push({\n                id: image.id,\n                type: image.type\n              });\n            }\n            let active = image.active;\n            if (image.type === 'BACKDROP') {\n              backdropElements.push(\n                <Col key={count} className={Styles.metadataSearchRow}>\n                  <Image style={{width: \"500px\"}} src={img} className={'imageSearchImg', active ? Styles.activeImage : ''} onClick={() => selectImage(image.id, image.type)} data-imageid={image.id}/>\n                </Col>\n              );\n            } else {\n              posterElements.push(\n                <Col key={count} className={Styles.metadataSearchRow}>\n                  <Image style={{width: \"200px\"}} src={img} className={'imageSearchImg', active ? Styles.activeImage : ''} onClick={() => selectImage(image.id, image.type)} data-imageid={image.id}/>\n                </Col>\n              );\n            }\n            count++;\n          }\n          setMoviePosterResult(posterElements);\n          setMovieBackdropResult(backdropElements);\n          setImageBox(true);\n        });\n      });\n    }\n\n    return (\n        <>\n            <div style={{marginLeft: \"27px\"}}>\n                <div style={{backgroundImage: `url('${process.env.NEXT_PUBLIC_SERVER_URL}/images/search.svg')`}} className={Styles.playButton} onClick={() => getImages()}></div>\n                <p style={{marginTop: \"5px\", fontSize: '14px'}}>Välj bild</p>\n            </div>\n\n            {imageBox &&\n            <div className=\"metadataBox\">\n\n                <Container>\n                    <Button style={{display: 'table', margin: '0 auto'}} variant=\"primary\" type=\"submit\" onClick={() => updateImages()}>\n                        Spara\n                    </Button>\n                <h3>Backdrops</h3>\n                <Row>\n                    {movieBackdropResult}\n                </Row>\n                <h3>Posters</h3>\n                <Row>\n                    {moviePosterResult}\n                </Row>\n                </Container>\n                \n            </div>\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}